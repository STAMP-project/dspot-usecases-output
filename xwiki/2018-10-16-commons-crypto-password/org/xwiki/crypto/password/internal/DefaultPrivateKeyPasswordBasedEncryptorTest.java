package org.xwiki.crypto.password.internal;


import javax.crypto.EncryptedPrivateKeyInfo;
import org.bouncycastle.util.encoders.Base64;
import org.bouncycastle.util.encoders.Hex;
import org.hamcrest.CoreMatchers;
import org.hamcrest.Matcher;
import org.hamcrest.core.IsEqual;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Rule;
import org.junit.Test;
import org.xwiki.crypto.AsymmetricKeyFactory;
import org.xwiki.crypto.cipher.internal.symmetric.factory.BcAesCbcPaddedCipherFactory;
import org.xwiki.crypto.cipher.internal.symmetric.factory.BcBlowfishCbcPaddedCipherFactory;
import org.xwiki.crypto.cipher.internal.symmetric.factory.BcDesCbcPaddedCipherFactory;
import org.xwiki.crypto.cipher.internal.symmetric.factory.BcDesEdeCbcPaddedCipherFactory;
import org.xwiki.crypto.cipher.internal.symmetric.factory.BcRc2CbcPaddedCipherFactory;
import org.xwiki.crypto.internal.DefaultSecureRandomProvider;
import org.xwiki.crypto.internal.asymmetric.keyfactory.BcRSAKeyFactory;
import org.xwiki.crypto.internal.asymmetric.keyfactory.DefaultKeyFactory;
import org.xwiki.crypto.params.cipher.asymmetric.PrivateKeyParameters;
import org.xwiki.crypto.params.cipher.symmetric.KeyWithIVParameters;
import org.xwiki.crypto.password.PasswordToByteConverter;
import org.xwiki.crypto.password.PrivateKeyPasswordBasedEncryptor;
import org.xwiki.crypto.password.internal.kdf.factory.BcPKCS5S2KeyDerivationFunctionFactory;
import org.xwiki.crypto.password.internal.kdf.factory.BcScryptKeyDerivationFunctionFactory;
import org.xwiki.crypto.password.internal.kdf.factory.DefaultKeyDerivationFunctionFactory;
import org.xwiki.crypto.password.internal.pbe.factory.BcPBES2AesCipherFactory;
import org.xwiki.crypto.password.internal.pbe.factory.BcPBES2BlowfishCipherFactory;
import org.xwiki.crypto.password.internal.pbe.factory.BcPBES2CipherFactory;
import org.xwiki.crypto.password.internal.pbe.factory.BcPBES2DesCipherFactory;
import org.xwiki.crypto.password.internal.pbe.factory.BcPBES2DesEdeCipherFactory;
import org.xwiki.crypto.password.internal.pbe.factory.BcPBES2Rc2CipherFactory;
import org.xwiki.crypto.password.params.PBKDF2Parameters;
import org.xwiki.test.annotation.ComponentList;
import org.xwiki.test.mockito.MockitoComponentMockingRule;


@ComponentList({ DefaultKeyDerivationFunctionFactory.class, BcPKCS5S2KeyDerivationFunctionFactory.class, BcPBES2Rc2CipherFactory.class, BcRc2CbcPaddedCipherFactory.class, BcPBES2DesCipherFactory.class, BcDesCbcPaddedCipherFactory.class, BcPBES2DesEdeCipherFactory.class, BcDesEdeCbcPaddedCipherFactory.class, BcPBES2BlowfishCipherFactory.class, BcBlowfishCbcPaddedCipherFactory.class, BcPBES2AesCipherFactory.class, BcAesCbcPaddedCipherFactory.class, BcScryptKeyDerivationFunctionFactory.class, BcPBES2CipherFactory.class, BcRSAKeyFactory.class, DefaultKeyFactory.class, DefaultSecureRandomProvider.class })
public class DefaultPrivateKeyPasswordBasedEncryptorTest {
    private static final boolean IS_JRE_8 = System.getProperty("java.specification.version").equals("1.8");

    private static final byte[] PASSWORD = PasswordToByteConverter.convert("changeit");

    private static final byte[] RSAKEY = Base64.decode(("MIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQDIY6+Wgj6MqdEd" + (((((((((((((((((((((((("Yq6FgH5xMgTBmFqAonR/eshjxY2C6MHs+WmCmNSDik2NgZWIaODvOF9uOEK2U0Zf" + "JEG2LcZxoeIEgg/mfII2f4DLy1JYajm/llzwFBzAd/Rkcs3qwP2ba5VKn/pSqNLl") + "nKHMXkXO+9SjfHDx95x2dK1dB8eGQGculOMcTm3uK7UlWNO4TSlwG9qHZ1aoM3GI") + "g5C1fIpbxJqDVjFq6fFAapE3KRIWIQmKd3E5ICcDErqr/AapxnfO8UFNxVWSOLW7") + "ZAfis4w/c8/EAgyQHw42R0dNyjUOZsToF8McCsOpRjGolSU8aUyqspvd8IWJPd5d") + "6HBHueXNAgMBAAECggEAV3q9MpVVPQ79TTjBO2Km0D+nt+QMzk8dUHGHfZbGejmm") + "Pw96shqJ24rK5FWHs+8lEwmnD3TcGsAr3mjzjtZY5U5oXtNwoYwFRElRLqZqIlLt") + "NugrVltRWeyD8j30CuGJVQoYOGWyX9d3ielg8NjO3NcvMtembttLoKK68/vrbH11") + "9W7wr5p8/xyMfyl9curnmCFk5QqJ1FBpjPWY05NDIBCUJB0tGAqViCpxEeWPSlvb") + "xcElqWfdbtnsYUxYU+iOTHHotoKnz4nLHYK2/njMhlCEyMXfu1DJOd8rg5yXewJF") + "v6NhXgWStSexAT1bZ17LROazVcHfWB9QmXF1Fm7vOQKBgQD+dZxPDOi3Y4gCFegn") + "Z+epNyl2aPTkseEZxrIqPKLHsGxUfYjQqkX2RdfTrq2vf4vFlN6uCXhSlZKXfLH/") + "iQ8FAzqenhVVHK2fv5xB0SE5zNmcHDrHshl+/zUNI2u5AMFECVO2SVbgoFjvgkou") + "FolK8XUXfHfb4f732LUyYI0lEwKBgQDJmkWHhzekz3P5iWaAt1SH8bZpt2hqa6Bx") + "A4VvMdtmjCxEDETN0Rb3CPYxw3qa3xGfW1y1j/49xi4gr69yaT2Tbca7PFGUmWRo") + "OJwfCUB5uBUi6UVytK19OVKReOm4666x8P3YO4cxxSI/HeoSU0HR1kkX9rGmrsGN") + "MgUQ15+FnwKBgAKf6/DUzUG3ARwkZbSiWb1hGEhkZMJHI29EoWnWHke5BiUI9nRQ") + "jVAxADzqvFfnFOYA1xssddVEPbLaUmu0WjdPBTfFoaqzFQdkzpPPOGyENGpr0B9n") + "MuQgdceg6eeKnnO5NOfYcdD3VnOCAInhKaFgRDjty7604hBkZ9oRLOOJAoGBAIJ+") + "dmUMlGr80XADjTLh+DhqsA1r542DDv44LkXUetS9BOYjHuIuZnQO+/UoOBNJMsn4") + "xGDNzN7FihQkRCeFkZL9arbFi3TpeUGw6vV38qEXE69eWVKvOuEkmpqJLphBDfom") + "KNmvZopDtTAvt9SWybL+xp9ZUpK26ZfwebD2MU63AoGBAOa2Kt01DxoqiWiQP/ds") + "Mc9wOw1zJsSmIK7wEiW3FkCz8uw3UgjF9ymYY/YAW3eZtuUpuxEzyENb9f21p4b2") + "zYoZ7nCUo4TmVXxgCjiEWglg3b/R3xjQr1dAABhTeI8bXMv5r/tMUsnS79uKqwGD") + "2Gc1syc3+055K4qcfZHH0XWu")));

    @Rule
    public final MockitoComponentMockingRule<PrivateKeyPasswordBasedEncryptor> mocker = new MockitoComponentMockingRule<PrivateKeyPasswordBasedEncryptor>(DefaultPrivateKeyPasswordBasedEncryptor.class);

    PrivateKeyPasswordBasedEncryptor encryptor;

    PrivateKeyParameters keyParameters;

    @Before
    public void configure() throws Exception {
        this.encryptor = this.mocker.getComponentUnderTest();
        this.keyParameters = ((AsymmetricKeyFactory) (this.mocker.getInstance(AsymmetricKeyFactory.class))).fromPKCS8(DefaultPrivateKeyPasswordBasedEncryptorTest.RSAKEY);
    }

    private void runTestPBES2Conformance(String hint, String iv, int keySize, String salt, byte[] data) throws Exception {
        Assert.assertThat(this.encryptor.decrypt(DefaultPrivateKeyPasswordBasedEncryptorTest.PASSWORD, data).getEncoded(), CoreMatchers.equalTo(DefaultPrivateKeyPasswordBasedEncryptorTest.RSAKEY));
        if (!(DefaultPrivateKeyPasswordBasedEncryptorTest.IS_JRE_8)) {
            Assert.assertThat(this.encryptor.decrypt(DefaultPrivateKeyPasswordBasedEncryptorTest.PASSWORD, new EncryptedPrivateKeyInfo(data)).getEncoded(), CoreMatchers.equalTo(DefaultPrivateKeyPasswordBasedEncryptorTest.RSAKEY));
        }
        Assert.assertThat(this.encryptor.encrypt(hint, new KeyWithIVParameters(DefaultPrivateKeyPasswordBasedEncryptorTest.PASSWORD, Hex.decode(iv)), new PBKDF2Parameters(keySize, 2048, Hex.decode(salt)), this.keyParameters), CoreMatchers.equalTo(data));
    }

    @Test
    public void testPBES2ConformanceTestDes() throws Exception {
        byte[] data = Base64.decode(("MIIFCzA9BgkqhkiG9w0BBQ0wMDAbBgkqhkiG9w0BBQwwDgQIGBflqeZFz8sCAggA" + ((((((((((((((((((((((((("MBEGBSsOAwIHBAgLbTq8mvQ7QASCBMhUPEBJHO0Uvu4bW2bfb0NIvczMuPbFQDQC" + "GnmzPGsa6vLcE+z61rBmPLOT45ZWcbTf867wh0e0KKFERkDh70lgenwYACRcefoE") + "ktuvdjRBpMiSAqr+ucD3ZwyIVp1+I5xUJqLhqxV1Wd5pkwFaZsqxUCRd6DQmZvH4") + "kVw2ulaE1HfT0XTPGO/ewBQ72wZ/XiegYsP7yp4dNIfmwMk03A+V0K8PjQTY6Sui") + "IHeoe9YT0b2J3ocsf38pHAiTmsgnl0ZtedcjlOYJ8yVxXu6h8FO+Xu0MXYGN387J") + "m4OUqLFudtWt8oVTVQuevNO+EzP061gsZnTEUJNvQNwLajdQnmER5ht28snby3tM") + "f4pzwu6asM5RHDD2FBSp5sBD5G/ev0hM6R5MkTBAEcz0CB/TYSMKq1IfWCqHkY1z") + "bvd7Bm19vwoyszXBGEBmhaVC34kYXo3IoTw3ezvXPgSaNk6IUvFavZRvAuJLleWs") + "cpN13G7pbi6WeCYQzml3L2hLP62DP+VLwkYyxUW3CvwLhVP1h2w12tb+cKC+4uih") + "4Of7cjt0R99vNvyTuPJ4HDjcn22KT+NJwPDNviLcBrNs1XxCXFa211nZWDGDC2cf") + "6lCd1JVQczewMfQuFX8lUMuZOfLoAN+wq+ZWLIEtIMC+4bciZWYxzKFijOWKqnd8") + "JhnOTKZ3Ua1txrAYE4Z0jLYI4xXImnGoW42h882aEiWSzsGARD065zXiQr//b5ot") + "TtFXfJ3IiJMMTyss93mirPPzcua8uoGvwvjw3GoxLbNIttX0hmR1NBGyM3MUnghy") + "7lrQssx2FcENuI/zAq/6l3ZT2jGtixch+Eu8mrCBTthWRBap8KIcO428c38C/IJ3") + "bdWmWJw0r401gqbZS2ZoSi0ia+RFM/DByrQl1Cww8Z81v6S4tedxMbmSiI5/vpXt") + "TcM4xQctZr/shYU9CDpxLUznmaRXbnFb77S7ykrJdPgnk+Oq5GYIhrcrxXXwF7+S") + "wg+72F5MVkFhqhzsZ8VGbgpgSw+BFDJd9wHiLM87ywQW4eHYqJfQtO1lPfzAkXfz") + "oPDyGX/Q6Nisy7dVErZ4dTXlUKxXEXAfvZABA08/L+3w+p3HEWm1HJFpZitEKHas") + "dheCNwnwmmyzItSjXBE2kBg9ZtH6Zx9mQpU2ra75dl+X2SvV8096lh7Xt0uHgjgq") + "vtYl2Bc9yBnxcwf6ppI8+VzBTxT/Q3BBBTL5e8RuYlSB+9BTlsp/bgP2prMFL+Lr") + "DJUisjPHJn3gPeG09lcWnAzTdw07/JN83WV3HHRjJ/ot8TdoVix/qlrtK7IPkTH3") + "hyLhPA4V49aOz7f42Jg3Xb0/C3WUEaP3aJ6UEoCVd0856RN9CTOlG95SPH+IoDLP") + "33oFlrRMlqQ0K8Y/j40h/3VbBxaHeWCNiZr3sN5ybxNkT8TaXOr2kWfePsYdGf7c") + "Pbz3IEwUeOD3z/GzDdiYvOfEo4quECEEQj9dWedOVVxD2wtc5jbaaB+HEaxlPNg5") + "5Sqd3F7IPtpoBGl9OOgigBJIP6JQWctjYJYjLGnVn4GpXt8pWclmkQ+SsCSCeYnX") + "Hax2rVBqD3yMRpVw225Dzxb84R1hleqx/N6VJpjmk2agYCTwXKsMyd2tMROOJxo=")));
        runTestPBES2Conformance("PBES2-DES-Pad", "0b6d3abc9af43b40", (-1), "1817e5a9e645cfcb", data);
    }

    @Test
    public void testPBES2ConformanceTestDesEde3() throws Exception {
        byte[] data = Base64.decode(("MIIFDjBABgkqhkiG9w0BBQ0wMzAbBgkqhkiG9w0BBQwwDgQIqpcsbmHTx+gCAggA" + (((((((((((((((((((((((((("MBQGCCqGSIb3DQMHBAiEYtVFOafp9ASCBMhnk03sYcXPAU1eYthAr8vueotiNFFr" + "xpbIbhB2cjC/bXd39GxyH/8X36KjVMuBJxFknY630SOBsdTn/H7lN/G8c+fEYTcq") + "porajF/pxr7asdFl94xjnx/DGaQmUJooqqUp8p80On1Otj7xEZtTivlEISY5Pr6y") + "6ou+fKIFKK5QzDzD9C+vLzYJMqhk4YamjxvDOwzYUoDFl+enMHXcuZYpA1yEvqze") + "5lFk+9AxdTbHgOsPECqS3bkq64VGanrfFtqywqLLLhsakcnByjddcHdsFFvhu/dH") + "raFdV3vsHppedqxTHbfFpvVl2+9XTpeBzwvb9XcJ2WUi4JUMtcR1gZwOo8S6q8LL") + "UWzTbGjsZVG3ew4FZ5avAjUCGgiUR47LFleSJ34eWrllUptHzfVTpV5f787gfN1g") + "BRhAJ1YJTWqcalIhd9YEKFxI3sjfWAOLdUW4at4z4yuRZh/uUck4V3ken8/M4JCG") + "/Vy7B9Juf9uHRKFWtl3hYDY32UJoQt0cH7V76y/rjpbhvhVtKaAbcK4ccZ+4JuDb") + "9qbs81Joe8jW4OZtYL/L+g4WboW/FSGlJXxJIP674lnglXXB5C8HT/I/7CzrEEgv") + "wcKKAwZ25+aR7pCYqWdDLUaENQQ/Z1mARGDw9JGszonXJMdMWnQN89DXsmkp6qe/") + "YkmZ3Sm4rrvz9LKc7mW+v+d+WnPTeJ4FBHmnUhGkuZroDl6SrCPjm3qFqj3zvyyV") + "8Lk8xNMm6AEN8IOs7qeUAb811bdpfUzLebZkuNXDMl8KCoyt+nNF8UN7vpCXU3/c") + "PEJahN+XxmRftOR0KKBIKCMKgnR90JenNmSyW2BJbT9D++7ujYoDlL0gTfbYa34a") + "P4H3ChnU0s5KMA2h48UBkDUlwCOn4L860h4sZIDfRkWcptB3HFipeKP0npGAfWfb") + "sQhueC7Ue8XpZIq5QBDOa+Zle3l8KZdmC4+sZYTsDoYm6jKX+LPgUAvvwyCBEUS7") + "0zVrBgXTwFDFuGt5LYROcngfRggekAMa7gWTPbwb0mQgCIvKaVxlu3FO5cNi4ExX") + "tlUUJyNualG+8qsbihqhHQBPs6QYhQ95y4ZndDqMtoyPWLhcOMo/Z/CLMQNhpXRl") + "okJndM7TjzFW05Fqy+cQwl8LTdGVZKUOGW/RwYMD2TPxXEp/XGEDlnREHVjppToT") + "+SlUlc7Dh31PCz5PoRSTvpJrsV2LZAUO9hoGoDYjfBqfUbrd5mFIii/52eJva7o1") + "RcrsHEkLTvu4BOk3Ztp3Zi26atBraADZ2T6UqwrfzZZrD1gI4sORuKN4/jmqt0KQ") + "H4FMJkKZgvJ0Rfjpt6ZqRj99wSnwNfDvr7641WTpB07Ati2LI3Tr6Fx7f2Phfkg1") + "SbzEC+qt3bixORhzFp0PbcULwamSsNVODf/EQic56bKZjOFEC+DFw3LKpvvBG1Fj") + "kGWbfZhSA2GZFUghvhFbFOsuwKh/GDoetFwKXWcM8DM0+aHSPwL61Y5FQ0Kn4DnB") + "ci3lJnSctD0fN3ckDIcTU/Nnza/RMJn1jRwBZc2Ql7/lA98jCM8uKTMVJy76ABf9") + "8lQrLGp6tSMD6jo31DMLVmKA9qed7Mk4QeZiDTm0/6d2GZ6hO8xwvzFRQ6Qy1ETG") + "W5c=")));
        runTestPBES2Conformance("PBES2-DESede-CBC-Pad", "8462d54539a7e9f4", (-1), "aa972c6e61d3c7e8", data);
    }

    @Test
    public void testPBES2ConformanceTestRC2() throws Exception {
        byte[] data = Base64.decode(("MIIFFjBIBgkqhkiG9w0BBQ0wOzAeBgkqhkiG9w0BBQwwEQQI4aRQrNlj6ZECAggA" + (((((((((((((((((((((((((("AgEQMBkGCCqGSIb3DQMCMA0CAToECG8qyWz/E/DoBIIEyFBBZXtbGNaIuDvM/J1u" + "l8gKw+zfurof6G7BSxefE8zuVFVhRXc7MnLQml97awOeEzvnGC7y61JELsZ7ROqa") + "1JWjdfURTsxxE4DGyUe+jOu2A1YSsnADCWq2bmvAkbFbV9N3Z1LqIkJNPtfS9KJQ") + "ukDscB51M3m0Y8PaQDrGFBdsRK/lAErOxdLkfRYQItqUnzawF1FuysiYlcQiCC0e") + "JrwiN9B/wW4bvnhQXABlQeI02MsfMPX8GLrlRfoNojLKTMCL1d+WK6dKuIA0QVRq") + "bXzAkqWe2VjIaOHXcbzk9OcLmJAHkGX0pwkYpgSDyD2yqXB4thhkvCc9hlRQObMn") + "Qvj2k5wyc3FzExWRwflTDZqpW9dFGCzjyzvOzfyJ+MWgS4e4a76vPEa79CMTWZcn") + "UgNuSK65g7wRLFm6Ko15jxKAEP9zEGV+mKNBMmkRvL4aWWwbJOK48GYar9RaqC8u") + "qbMTeQB/nfk//2JdxDR5W51dCSk5z64v/1ZEiLz96Y8GV8cc7PwVVjotW/yJEQv1") + "mhWBqeiGLRQdymhU8AKwiNxhw2m1b/CW+pjOUpB21A7P8q3j2h5EqhD1VXneB6pH") + "+RTvFOUzYWp4mz21Ul8qXzc0CLsDm+Lywiqv9hDKMtaCe3cNrR/PFNoFuRYO6fZ7") + "OOK3R7DQ/Us8cMpUJBCuYmBBwQB81fDxiHJdvtq8BmToJ6EYh4KzyTg4SGC1CPlh") + "KjWkzIf0w7eZZj+hP4tKsrkeFsJ3/QSQW53bH7sNxp7uiSEwFpi3Sa/n3ABbOLit") + "HR+O3GSfQIQMeLdZ5kcG2ww1SFEpaYBryBJZPfF7xF4rl5fWkrLasAPgUpTxsZ52") + "UdD6bZb/8Ij3ZkjNJIRaGzCMlfWbUYpM4xBZ4bSQL2OGDYxC37T8TU4s6PIwGpB2") + "zux3razpSBMFM6cT6ROw0zTzQpbDNF3U/wjOoyZmqRNpyr9AfXlsnxjXYzevmBUU") + "IHEXUjEwhoGrVAv0U67YFgxLay9bWU76q6StODcz4flrcgf6Z1SK1J9WnX1FMYGK") + "5HK0krzesjdFSqsx7T4VNv1paf5ql8mvMrIMTT2envm2vwMVG6EkOhGLjVeF/wPA") + "0URcR8Fw9Wh9enObpocFnkqKiQfpyTOLBRIcYdJ07s/ER3HmqcnOPO4am5EqHeUu") + "+3YPVrNuV9E+BMNGKcMFzda5MIJi0rbYlF59Bz5xy8+nxiUqN2SvJYIMh/6egBue") + "MEq/6O6ex5ypPFMlXItmubd3cqW6WMMOGuAxj0ciFLzZTxOwGDqh4G8GvPTZ6OtL") + "fq2mitjPkLOKHplJ+Mjzd6qQIXxv5S7utPvpVnJPimD3jdwfWFXI5sO8pIjTVgbJ") + "ZzkDw8ilLa5dR4e72+KHSlygjy0w2cvDX8kDfZyiRE30gIGQiHH7l/0Sv1GtOxpd") + "2tmDTdA3zaI7W/gukmsMrpfBbGgHVC/YKlRVnfWFEh+a/4LLhc5gywqxyZzC59Dc") + "nDRVPwSIPwWsx74ViClmviq4j0QV+n94JaQ2exgVvddBjluR7+9F+6+BSbfrgCeT") + "nTAowzDF15LOg+/wXaAnSerzIwB1s9xfYyssGuKd31Rc6FBH+iZTZorVGS+8UARa") + "yLHeQoz3pbRtiA==")));
        runTestPBES2Conformance("PBES2-RC2-CBC-Pad", "6f2ac96cff13f0e8", 16, "e1a450acd963e991", data);
    }

    @Test
    public void testPBES2ConformanceTestBlowfish() throws Exception {
        byte[] data = Base64.decode(("MIIFDzBBBgkqhkiG9w0BBQ0wNDAbBgkqhkiG9w0BBQwwDgQI+SHyL0TmEd4CAggA" + (((((((((((((((((((((((((("MBUGCSsGAQQBl1UBAgQIe5OfjWHHpAMEggTIr/Ma8RAEsq65a1K/AooVkDgwtqRD" + "Q6A5Wx5LOvXRvQ4RLd11ham+GCWxHKWHeMTnLLrW2gQyDdEvMPtM0TRoGmm31npu") + "soEDFLIruE5XUmpzsKZkqztVhNl0pamzsqD6g7vSMlckFORsRInuWq3THVIDoHVi") + "m54JE5RCa/tZMVjmvvYOt1KHJhAqUeyb+CQYZsO6c+mjNBZrvdNFDz4bgutVKreL") + "FQMYJWr4sClAqnvHCvra2SV/mwIBZ1lYj920Qq885+HoSSQfgLOwar5XYCyEb7z1") + "Q+NYMjaDqhEIWvlXsXu7B2YIYoSC6vse4bfXvi93fJtb1CXVjWnDKC8xJs9pqVCx") + "t1P9JsztRHZ5g1daHwu6WQwD/7YRubi0y9pYjHB6H4M7KSWX3CEz/hDccUWoZHKH") + "D/R6cNe12RqVqRr0a5tteUCvFwbXCcwKbTG8n5zd3MS+2FF29S8jvhqNXJOPuykS") + "Sxq1wi73puQWCXAmw5aYy8RBlv9y3TlcaTDO37AkDdhJkWQLWbNy5MzLmh7dhNCQ") + "R2Qy4wz9Mw/1GZYhOYM0kSovMSHcN1jIvw94YPAfflmL+k6VtI2C1iyD4BG8li1h") + "ChCqL02fiLYjBsZquOdE5Fkg6tT6IucB0x35Qfjm8lTwcbVnjVRHnaQyPIMZeN9N") + "UdZqzyb7nf0zI3rbrCHFMPsGX5741VGt2Mz9t/rQEXjezgkEuxn54Z/Q39Rm0vmX") + "LfcKznYCVdMkomC0tIaYHBjVQWZerBRIHPGUhozdKwwASYco+FuJNNc9SZZnJ5AU") + "ux2yD3NTec6c/fgseJXi3UT/qDDmUQxX9hjwnUw8CPHUjXWGTmJ/ihfQVGo1ypwg") + "oRZWtF0AnxB7ZfdtnW3yq5/xCFzsIrKyFy4s/kdsylC8eGw4snGA19PN23eEyTZD") + "bSuW5KLjgScbR+ro+e3Y1F3OTI6+VF2oMLY31XVyt8S1N2Zz1lpoN0JfKaWTrTTJ") + "9Ic0oe2qtgqC42g11WHQizYAe83cZYNZgzU9mRa1FIqQD4kMQh+Vv9Cca6FpdPUv") + "D4GS7/fA5Ez5jFV7VghOCFfK2+1Q95b+2RnQEpmHk60+U7tZG4dACXLL7i1hbJH6") + "YuokBuw0Wjm5dicOSG2DptwzyqFfy7C2DYgB3Gi34fSNFxKis7CeKQLNMqppmBof") + "q379AD8hY9Bc8gUWAwMONs9AreDiRCGyR+IokQPTgKRuVzR7ISoxWkKvfW5XIdNf") + "Pd5kGLhX0HfGhikQCVP2XQMkOqsJw4ShV+FAcMfzaq54/PzXoemkRCOMsCzsDUde") + "C6XGF1wviq52P+DnAr1tDmYGOP+jP+O0shzyXF/res1CZ0PjiLIyUb1JM8m5eMRH") + "dEwzX/btO/A/OwNwy5FzS7VdFwaGUjFBXK3F/xyu8jl6ov02/ooddkpqNm5Cxko2") + "ZlJG4LXdDbO1y3rbdwSgukYS2SeUmGqLpONlGi6u8kGRrgetcCAzkyT+XQkV3ZWg") + "TFfGxr3q3NV0C35hIKBxLXr/+ZZHDP4Yx6/Ok6xYnUyJ7RoM6QE7Ppyo0hFPv0Q3") + "VknhyfXk/85k81dxWLWV3DiXZbW/9gGa8TGRuZxliqTr1YjTRGiUwn+fCVx7YLyw") + "PiNp")));
        runTestPBES2Conformance("PBES2-Blowfish-CBC-Pad", "7b939f8d61c7a403", (-1), "f921f22f44e611de", data);
    }

    @Test
    public void testPBES2ConformanceTestAES128() throws Exception {
        byte[] data = Base64.decode(("MIIFHzBJBgkqhkiG9w0BBQ0wPDAbBgkqhkiG9w0BBQwwDgQImXjLGxzpmkwCAggA" + (((((((((((((((((((((((((("MB0GCWCGSAFlAwQBAgQQf6Bn85WfZh3mHP1w0yubaQSCBNCS2Rvfoebwb7/sIbN4" + "uBS2v30Q/fOtUsqbo0JGjJEZ2Qe0kRDoXlDdf+tk2dQaI7tdjhxCcIeJOuiV0qJ6") + "g7y7tmcUhyFHJqm7L4ODpdH4jIGhKFod2szydrQ0lDQI7ZYjucRGd5zxb+wMphqV") + "dDcjEw1HPsVnG30WTjMSJ6lKs+PXLv+jHsf56p+QAxmiy+5eD7fF/C6vxCk0E0wf") + "63ZkSiprIYsmbM1kDBGnJwsH0fmTGi5XD3mXb6zpm3dc47VootC3jL6dG4259B/q") + "gqXZ810mBDPaupS7zc1D7MQvqHwSAhSDFylfVxpwbKx9Lke8e81AyfZsmuUe1QnM") + "fqqY0Ciu9LjxkE8CkitV9/2XwNkusyvQmTFALi735kO/l6bieShFl7m6DTK3R3E8") + "iSx+ZB4dO8tH+/9DbXI8un0DptXFKER2goXBDzv1MElmdBdAQ94j14yT5aTX0oTU") + "C7gaLgfzly70sEJAmrlbxFhgyrcdOZorFgga9qnri2w/0KoDjQGian+tH452pWZe") + "0XadQcrAaNviFJHw6/EmjDgHX970rWj2ZXrbWI4cm8scc3BcPaCwTDP8PZrxVhLG") + "0SJeAjEaME4n+Y7CT3cSdOJh6MiAzyqqTJxFMEovhDOTnyUKkJ56VONG12P9JLiT") + "eIpQlV1ywkH3hTXPMe4Dpbmvn6dhy5dRdOAtRFHOdno4Ri+0+Kne1VGhX1t3i8nP") + "HzRSLUg/tq3/hAwaMfHPtnE+3MXFteQgGd2eVzHiwMwcLYAoy9ewWW7+wvXjbDaS") + "gQ+Oz+gDCm/U1dOMRFp33lSN/eAKluVr9ZNewJ6r8WHg530CeSMG1rp4gq5LX2vk") + "SDQ0RPPAf++6G2tw79GWsCGNFIW/6xHIrBx37NT/zn/0P5/NMD4qZOrzRPdy2tBx") + "ggszbUK20sXAikibVJp4YWHAZMpdexKLWcktPE41FylFc/4XI7+ddRyvcW6re/FT") + "OCZFm0JZOmiopz9rOSGOgYklrUNWqAXWrkAiBo0mco6UdvBjGVFvk2Sw2b17S4Sr") + "9glXPFBNMHLy1daN5mvWq1uBob2us27MiSc4+4Biz3S9FMO02HhMKxC9cnFw5ZZc") + "aQHo1+USBQ1qJuvA0+od7JwCC5XEm+qunlnUDqDt8bC5WLXADDsVptV3IFIZ9ZB3") + "xM5y2K2TBpXzjR+fVg0M2qnbQYv6SVszuLlPArZL1mrmMUj1mmddPBJQk9Sl3lsx") + "ER2R5bDdLA9ct4mVLFjx2u7NNyYQqyvNOKGt1RD0PAlaP1nynVzuLEpnDAKrjCQI") + "IDivXTsjc3UyVx5C2sc+L7HuUibi8726sBYIrlG6eU0rf4wfgstGp9l0A4yBlbRB") + "cJRSBPdKN780IpEFx+SfzVeBvYUeVH0DFthaJfDOWAwD1XdQoxaPUhSel2iaaSCJ") + "WK0eaYETMc1z1P2Yzr2BCHTSxOrL7YJEMDYb1Ii6MvT/xaNSk/yuqhz+rS8zqH0E") + "qalCGoIi38YJy41a1Vau7MCjkxldexn62ZbI4J4dO0W2mX0Fe8aYxxGtL2EpCqnz") + "9c7BBsGqGC2agru0qTkvwCKtk8duMg5RWOXnW29tBYuAyT2bmwmco20XOdTgXIUJ") + "qsiX6xrG5S0T7vFExbxBIX2Jhg==")));
        runTestPBES2Conformance("PBES2-AES-CBC-Pad", "7fa067f3959f661de61cfd70d32b9b69", 16, "9978cb1b1ce99a4c", data);
    }

    @Test
    public void testEncryptDecryptPBES2AES() throws Exception {
        Assert.assertThat(this.encryptor.decrypt(DefaultPrivateKeyPasswordBasedEncryptorTest.PASSWORD, this.encryptor.encrypt("PBES2-AES-CBC-Pad", DefaultPrivateKeyPasswordBasedEncryptorTest.PASSWORD, new PBKDF2Parameters(), this.keyParameters)).getEncoded(), CoreMatchers.equalTo(DefaultPrivateKeyPasswordBasedEncryptorTest.RSAKEY));
    }

    @Test(timeout = 10000)
    public void testEncryptDecryptDefault() throws Exception {
        this.encryptor.decrypt(DefaultPrivateKeyPasswordBasedEncryptorTest.PASSWORD, this.encryptor.encrypt(DefaultPrivateKeyPasswordBasedEncryptorTest.PASSWORD, this.keyParameters)).getEncoded();
        Matcher<byte[]> o_testEncryptDecryptDefault__4 = CoreMatchers.equalTo(DefaultPrivateKeyPasswordBasedEncryptorTest.RSAKEY);
        Assert.assertEquals("[<48>, <-126>, <4>, <-66>, <2>, <1>, <0>, <48>, <13>, <6>, <9>, <42>, <-122>, <72>, <-122>, <-9>, <13>, <1>, <1>, <1>, <5>, <0>, <4>, <-126>, <4>, <-88>, <48>, <-126>, <4>, <-92>, <2>, <1>, <0>, <2>, <-126>, <1>, <1>, <0>, <-56>, <99>, <-81>, <-106>, <-126>, <62>, <-116>, <-87>, <-47>, <29>, <98>, <-82>, <-123>, <-128>, <126>, <113>, <50>, <4>, <-63>, <-104>, <90>, <-128>, <-94>, <116>, <127>, <122>, <-56>, <99>, <-59>, <-115>, <-126>, <-24>, <-63>, <-20>, <-7>, <105>, <-126>, <-104>, <-44>, <-125>, <-118>, <77>, <-115>, <-127>, <-107>, <-120>, <104>, <-32>, <-17>, <56>, <95>, <110>, <56>, <66>, <-74>, <83>, <70>, <95>, <36>, <65>, <-74>, <45>, <-58>, <113>, <-95>, <-30>, <4>, <-126>, <15>, <-26>, <124>, <-126>, <54>, <127>, <-128>, <-53>, <-53>, <82>, <88>, <106>, <57>, <-65>, <-106>, <92>, <-16>, <20>, <28>, <-64>, <119>, <-12>, <100>, <114>, <-51>, <-22>, <-64>, <-3>, <-101>, <107>, <-107>, <74>, <-97>, <-6>, <82>, <-88>, <-46>, <-27>, <-100>, <-95>, <-52>, <94>, <69>, <-50>, <-5>, <-44>, <-93>, <124>, <112>, <-15>, <-9>, <-100>, <118>, <116>, <-83>, <93>, <7>, <-57>, <-122>, <64>, <103>, <46>, <-108>, <-29>, <28>, <78>, <109>, <-18>, <43>, <-75>, <37>, <88>, <-45>, <-72>, <77>, <41>, <112>, <27>, <-38>, <-121>, <103>, <86>, <-88>, <51>, <113>, <-120>, <-125>, <-112>, <-75>, <124>, <-118>, <91>, <-60>, <-102>, <-125>, <86>, <49>, <106>, <-23>, <-15>, <64>, <106>, <-111>, <55>, <41>, <18>, <22>, <33>, <9>, <-118>, <119>, <113>, <57>, <32>, <39>, <3>, <18>, <-70>, <-85>, <-4>, <6>, <-87>, <-58>, <119>, <-50>, <-15>, <65>, <77>, <-59>, <85>, <-110>, <56>, <-75>, <-69>, <100>, <7>, <-30>, <-77>, <-116>, <63>, <115>, <-49>, <-60>, <2>, <12>, <-112>, <31>, <14>, <54>, <71>, <71>, <77>, <-54>, <53>, <14>, <102>, <-60>, <-24>, <23>, <-61>, <28>, <10>, <-61>, <-87>, <70>, <49>, <-88>, <-107>, <37>, <60>, <105>, <76>, <-86>, <-78>, <-101>, <-35>, <-16>, <-123>, <-119>, <61>, <-34>, <93>, <-24>, <112>, <71>, <-71>, <-27>, <-51>, <2>, <3>, <1>, <0>, <1>, <2>, <-126>, <1>, <0>, <87>, <122>, <-67>, <50>, <-107>, <85>, <61>, <14>, <-3>, <77>, <56>, <-63>, <59>, <98>, <-90>, <-48>, <63>, <-89>, <-73>, <-28>, <12>, <-50>, <79>, <29>, <80>, <113>, <-121>, <125>, <-106>, <-58>, <122>, <57>, <-90>, <63>, <15>, <122>, <-78>, <26>, <-119>, <-37>, <-118>, <-54>, <-28>, <85>, <-121>, <-77>, <-17>, <37>, <19>, <9>, <-89>, <15>, <116>, <-36>, <26>, <-64>, <43>, <-34>, <104>, <-13>, <-114>, <-42>, <88>, <-27>, <78>, <104>, <94>, <-45>, <112>, <-95>, <-116>, <5>, <68>, <73>, <81>, <46>, <-90>, <106>, <34>, <82>, <-19>, <54>, <-24>, <43>, <86>, <91>, <81>, <89>, <-20>, <-125>, <-14>, <61>, <-12>, <10>, <-31>, <-119>, <85>, <10>, <24>, <56>, <101>, <-78>, <95>, <-41>, <119>, <-119>, <-23>, <96>, <-16>, <-40>, <-50>, <-36>, <-41>, <47>, <50>, <-41>, <-90>, <110>, <-37>, <75>, <-96>, <-94>, <-70>, <-13>, <-5>, <-21>, <108>, <125>, <117>, <-11>, <110>, <-16>, <-81>, <-102>, <124>, <-1>, <28>, <-116>, <127>, <41>, <125>, <114>, <-22>, <-25>, <-104>, <33>, <100>, <-27>, <10>, <-119>, <-44>, <80>, <105>, <-116>, <-11>, <-104>, <-45>, <-109>, <67>, <32>, <16>, <-108>, <36>, <29>, <45>, <24>, <10>, <-107>, <-120>, <42>, <113>, <17>, <-27>, <-113>, <74>, <91>, <-37>, <-59>, <-63>, <37>, <-87>, <103>, <-35>, <110>, <-39>, <-20>, <97>, <76>, <88>, <83>, <-24>, <-114>, <76>, <113>, <-24>, <-74>, <-126>, <-89>, <-49>, <-119>, <-53>, <29>, <-126>, <-74>, <-2>, <120>, <-52>, <-122>, <80>, <-124>, <-56>, <-59>, <-33>, <-69>, <80>, <-55>, <57>, <-33>, <43>, <-125>, <-100>, <-105>, <123>, <2>, <69>, <-65>, <-93>, <97>, <94>, <5>, <-110>, <-75>, <39>, <-79>, <1>, <61>, <91>, <103>, <94>, <-53>, <68>, <-26>, <-77>, <85>, <-63>, <-33>, <88>, <31>, <80>, <-103>, <113>, <117>, <22>, <110>, <-17>, <57>, <2>, <-127>, <-127>, <0>, <-2>, <117>, <-100>, <79>, <12>, <-24>, <-73>, <99>, <-120>, <2>, <21>, <-24>, <39>, <103>, <-25>, <-87>, <55>, <41>, <118>, <104>, <-12>, <-28>, <-79>, <-31>, <25>, <-58>, <-78>, <42>, <60>, <-94>, <-57>, <-80>, <108>, <84>, <125>, <-120>, <-48>, <-86>, <69>, <-10>, <69>, <-41>, <-45>, <-82>, <-83>, <-81>, <127>, <-117>, <-59>, <-108>, <-34>, <-82>, <9>, <120>, <82>, <-107>, <-110>, <-105>, <124>, <-79>, <-1>, <-119>, <15>, <5>, <3>, <58>, <-98>, <-98>, <21>, <85>, <28>, <-83>, <-97>, <-65>, <-100>, <65>, <-47>, <33>, <57>, <-52>, <-39>, <-100>, <28>, <58>, <-57>, <-78>, <25>, <126>, <-1>, <53>, <13>, <35>, <107>, <-71>, <0>, <-63>, <68>, <9>, <83>, <-74>, <73>, <86>, <-32>, <-96>, <88>, <-17>, <-126>, <74>, <46>, <22>, <-119>, <74>, <-15>, <117>, <23>, <124>, <119>, <-37>, <-31>, <-2>, <-9>, <-40>, <-75>, <50>, <96>, <-115>, <37>, <19>, <2>, <-127>, <-127>, <0>, <-55>, <-102>, <69>, <-121>, <-121>, <55>, <-92>, <-49>, <115>, <-7>, <-119>, <102>, <-128>, <-73>, <84>, <-121>, <-15>, <-74>, <105>, <-73>, <104>, <106>, <107>, <-96>, <113>, <3>, <-123>, <111>, <49>, <-37>, <102>, <-116>, <44>, <68>, <12>, <68>, <-51>, <-47>, <22>, <-9>, <8>, <-10>, <49>, <-61>, <122>, <-102>, <-33>, <17>, <-97>, <91>, <92>, <-75>, <-113>, <-2>, <61>, <-58>, <46>, <32>, <-81>, <-81>, <114>, <105>, <61>, <-109>, <109>, <-58>, <-69>, <60>, <81>, <-108>, <-103>, <100>, <104>, <56>, <-100>, <31>, <9>, <64>, <121>, <-72>, <21>, <34>, <-23>, <69>, <114>, <-76>, <-83>, <125>, <57>, <82>, <-111>, <120>, <-23>, <-72>, <-21>, <-82>, <-79>, <-16>, <-3>, <-40>, <59>, <-121>, <49>, <-59>, <34>, <63>, <29>, <-22>, <18>, <83>, <65>, <-47>, <-42>, <73>, <23>, <-10>, <-79>, <-90>, <-82>, <-63>, <-115>, <50>, <5>, <16>, <-41>, <-97>, <-123>, <-97>, <2>, <-127>, <-128>, <2>, <-97>, <-21>, <-16>, <-44>, <-51>, <65>, <-73>, <1>, <28>, <36>, <101>, <-76>, <-94>, <89>, <-67>, <97>, <24>, <72>, <100>, <100>, <-62>, <71>, <35>, <111>, <68>, <-95>, <105>, <-42>, <30>, <71>, <-71>, <6>, <37>, <8>, <-10>, <116>, <80>, <-115>, <80>, <49>, <0>, <60>, <-22>, <-68>, <87>, <-25>, <20>, <-26>, <0>, <-41>, <27>, <44>, <117>, <-43>, <68>, <61>, <-78>, <-38>, <82>, <107>, <-76>, <90>, <55>, <79>, <5>, <55>, <-59>, <-95>, <-86>, <-77>, <21>, <7>, <100>, <-50>, <-109>, <-49>, <56>, <108>, <-124>, <52>, <106>, <107>, <-48>, <31>, <103>, <50>, <-28>, <32>, <117>, <-57>, <-96>, <-23>, <-25>, <-118>, <-98>, <115>, <-71>, <52>, <-25>, <-40>, <113>, <-48>, <-9>, <86>, <115>, <-126>, <0>, <-119>, <-31>, <41>, <-95>, <96>, <68>, <56>, <-19>, <-53>, <-66>, <-76>, <-30>, <16>, <100>, <103>, <-38>, <17>, <44>, <-29>, <-119>, <2>, <-127>, <-127>, <0>, <-126>, <126>, <118>, <101>, <12>, <-108>, <106>, <-4>, <-47>, <112>, <3>, <-115>, <50>, <-31>, <-8>, <56>, <106>, <-80>, <13>, <107>, <-25>, <-115>, <-125>, <14>, <-2>, <56>, <46>, <69>, <-44>, <122>, <-44>, <-67>, <4>, <-26>, <35>, <30>, <-30>, <46>, <102>, <116>, <14>, <-5>, <-11>, <40>, <56>, <19>, <73>, <50>, <-55>, <-8>, <-60>, <96>, <-51>, <-52>, <-34>, <-59>, <-118>, <20>, <36>, <68>, <39>, <-123>, <-111>, <-110>, <-3>, <106>, <-74>, <-59>, <-117>, <116>, <-23>, <121>, <65>, <-80>, <-22>, <-11>, <119>, <-14>, <-95>, <23>, <19>, <-81>, <94>, <89>, <82>, <-81>, <58>, <-31>, <36>, <-102>, <-102>, <-119>, <46>, <-104>, <65>, <13>, <-6>, <38>, <40>, <-39>, <-81>, <102>, <-118>, <67>, <-75>, <48>, <47>, <-73>, <-44>, <-106>, <-55>, <-78>, <-2>, <-58>, <-97>, <89>, <82>, <-110>, <-74>, <-23>, <-105>, <-16>, <121>, <-80>, <-10>, <49>, <78>, <-73>, <2>, <-127>, <-127>, <0>, <-26>, <-74>, <42>, <-35>, <53>, <15>, <26>, <42>, <-119>, <104>, <-112>, <63>, <-9>, <108>, <49>, <-49>, <112>, <59>, <13>, <115>, <38>, <-60>, <-90>, <32>, <-82>, <-16>, <18>, <37>, <-73>, <22>, <64>, <-77>, <-14>, <-20>, <55>, <82>, <8>, <-59>, <-9>, <41>, <-104>, <99>, <-10>, <0>, <91>, <119>, <-103>, <-74>, <-27>, <41>, <-69>, <17>, <51>, <-56>, <67>, <91>, <-11>, <-3>, <-75>, <-89>, <-122>, <-10>, <-51>, <-118>, <25>, <-18>, <112>, <-108>, <-93>, <-124>, <-26>, <85>, <124>, <96>, <10>, <56>, <-124>, <90>, <9>, <96>, <-35>, <-65>, <-47>, <-33>, <24>, <-48>, <-81>, <87>, <64>, <0>, <24>, <83>, <120>, <-113>, <27>, <92>, <-53>, <-7>, <-81>, <-5>, <76>, <82>, <-55>, <-46>, <-17>, <-37>, <-118>, <-85>, <1>, <-125>, <-40>, <103>, <53>, <-77>, <39>, <55>, <-5>, <78>, <121>, <43>, <-118>, <-100>, <125>, <-111>, <-57>, <-47>, <117>, <-82>]", ((IsEqual) (o_testEncryptDecryptDefault__4)).toString());
    }
}

