package org.sat4j;


import java.util.HashSet;
import java.util.Set;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;
import org.sat4j.core.VecInt;
import org.sat4j.minisat.SolverFactory;
import org.sat4j.minisat.constraints.cnf.OriginalBinaryClause;
import org.sat4j.minisat.constraints.cnf.OriginalWLClause;
import org.sat4j.minisat.constraints.cnf.UnitClause;
import org.sat4j.specs.ContradictionException;
import org.sat4j.specs.IConstr;
import org.sat4j.specs.IVecInt;
import org.sat4j.specs.TimeoutException;
import org.sat4j.tools.GateTranslator;


public class AmplBugSAT81 {
    private GateTranslator solver;

    @Before
    public void setUp() throws Exception {
        solver = new GateTranslator(SolverFactory.newDefault());
    }

    @Test(timeout = 30000)
    public void testSimplePhoneSATSmall() throws Exception, ContradictionException, TimeoutException {
        VecInt clause0 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause0)).toString());
        Assert.assertTrue(((VecInt) (clause0)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall__4 = clause0.push(1);
        Assert.assertEquals("1", ((VecInt) (o_testSimplePhoneSATSmall__4)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (o_testSimplePhoneSATSmall__4)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall__4)).isEmpty());
        IConstr o_testSimplePhoneSATSmall__5 = solver.addClause(clause0);
        Assert.assertTrue(((UnitClause) (o_testSimplePhoneSATSmall__5)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((UnitClause) (o_testSimplePhoneSATSmall__5)).getActivity())), 0.1);
        Assert.assertEquals("1", ((UnitClause) (o_testSimplePhoneSATSmall__5)).toString());
        VecInt clause1 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause1)).toString());
        Assert.assertTrue(((VecInt) (clause1)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall__9 = clause1.push(1);
        Assert.assertEquals("1", ((VecInt) (o_testSimplePhoneSATSmall__9)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (o_testSimplePhoneSATSmall__9)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall__9)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall__10 = clause1.push((-2));
        Assert.assertEquals("1,-2", ((VecInt) (o_testSimplePhoneSATSmall__10)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall__10)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall__10)).isEmpty());
        IConstr o_testSimplePhoneSATSmall__12 = solver.addClause(clause1);
        Assert.assertNull(o_testSimplePhoneSATSmall__12);
        VecInt clause2 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause2)).toString());
        Assert.assertTrue(((VecInt) (clause2)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall__15 = clause2.push(2);
        Assert.assertEquals("2", ((VecInt) (o_testSimplePhoneSATSmall__15)).toString());
        Assert.assertEquals(2, ((int) (((VecInt) (o_testSimplePhoneSATSmall__15)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall__15)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall__16 = clause2.push((-1));
        Assert.assertEquals("2,-1", ((VecInt) (o_testSimplePhoneSATSmall__16)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall__16)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall__16)).isEmpty());
        IConstr o_testSimplePhoneSATSmall__18 = solver.addClause(clause2);
        Assert.assertTrue(((UnitClause) (o_testSimplePhoneSATSmall__18)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((UnitClause) (o_testSimplePhoneSATSmall__18)).getActivity())), 0.1);
        Assert.assertEquals("2", ((UnitClause) (o_testSimplePhoneSATSmall__18)).toString());
        VecInt clause3 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause3)).toString());
        Assert.assertTrue(((VecInt) (clause3)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall__22 = clause3.push(3);
        Assert.assertEquals("3", ((VecInt) (o_testSimplePhoneSATSmall__22)).toString());
        Assert.assertEquals(3, ((int) (((VecInt) (o_testSimplePhoneSATSmall__22)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall__22)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall__23 = clause3.push((-2));
        Assert.assertEquals("3,-2", ((VecInt) (o_testSimplePhoneSATSmall__23)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall__23)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall__23)).isEmpty());
        IConstr o_testSimplePhoneSATSmall__25 = solver.addClause(clause3);
        Assert.assertTrue(((UnitClause) (o_testSimplePhoneSATSmall__25)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((UnitClause) (o_testSimplePhoneSATSmall__25)).getActivity())), 0.1);
        Assert.assertEquals("3", ((UnitClause) (o_testSimplePhoneSATSmall__25)).toString());
        VecInt clause8 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause8)).toString());
        Assert.assertTrue(((VecInt) (clause8)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall__28 = clause8.push(2);
        Assert.assertEquals("2", ((VecInt) (o_testSimplePhoneSATSmall__28)).toString());
        Assert.assertEquals(2, ((int) (((VecInt) (o_testSimplePhoneSATSmall__28)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall__28)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall__29 = clause8.push((-3));
        Assert.assertEquals("2,-3", ((VecInt) (o_testSimplePhoneSATSmall__29)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall__29)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall__29)).isEmpty());
        IConstr o_testSimplePhoneSATSmall__31 = solver.addClause(clause8);
        Assert.assertNull(o_testSimplePhoneSATSmall__31);
        VecInt clause4 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause4)).toString());
        Assert.assertTrue(((VecInt) (clause4)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall__35 = clause4.push((-4));
        Assert.assertEquals("-4", ((VecInt) (o_testSimplePhoneSATSmall__35)).toString());
        Assert.assertEquals(-4, ((int) (((VecInt) (o_testSimplePhoneSATSmall__35)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall__35)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall__37 = clause4.push(1);
        Assert.assertEquals("-4,1", ((VecInt) (o_testSimplePhoneSATSmall__37)).toString());
        Assert.assertEquals(-1, ((int) (((VecInt) (o_testSimplePhoneSATSmall__37)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall__37)).isEmpty());
        IConstr o_testSimplePhoneSATSmall__38 = solver.addClause(clause4);
        Assert.assertNull(o_testSimplePhoneSATSmall__38);
        VecInt clause5 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause5)).toString());
        Assert.assertTrue(((VecInt) (clause5)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall__42 = clause5.push((-5));
        Assert.assertEquals("-5", ((VecInt) (o_testSimplePhoneSATSmall__42)).toString());
        Assert.assertEquals(-5, ((int) (((VecInt) (o_testSimplePhoneSATSmall__42)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall__42)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall__44 = clause5.push(4);
        Assert.assertEquals("-5,4", ((VecInt) (o_testSimplePhoneSATSmall__44)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall__44)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall__44)).isEmpty());
        IConstr o_testSimplePhoneSATSmall__45 = solver.addClause(clause5);
        int[] array_1213887554 = new int[]{8,11};
        	int[] array_1981039630 = (int[])((org.sat4j.minisat.constraints.cnf.OriginalBinaryClause)o_testSimplePhoneSATSmall__45).getLits();
        	for(int ii = 0; ii <array_1213887554.length; ii++) {
        		org.junit.Assert.assertEquals(array_1213887554[ii], array_1981039630[ii]);
        	};
        Assert.assertFalse(((OriginalBinaryClause) (o_testSimplePhoneSATSmall__45)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((OriginalBinaryClause) (o_testSimplePhoneSATSmall__45)).getActivity())), 0.1);
        Assert.assertEquals("4[?] -5[?]", ((OriginalBinaryClause) (o_testSimplePhoneSATSmall__45)).toString());
        Assert.assertEquals(9, ((int) (((OriginalBinaryClause) (o_testSimplePhoneSATSmall__45)).hashCode())));
        VecInt clause6 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause6)).toString());
        Assert.assertTrue(((VecInt) (clause6)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall__48 = clause6.push((-6));
        Assert.assertEquals("-6", ((VecInt) (o_testSimplePhoneSATSmall__48)).toString());
        Assert.assertEquals(-6, ((int) (((VecInt) (o_testSimplePhoneSATSmall__48)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall__48)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall__50 = clause6.push(4);
        Assert.assertEquals("-6,4", ((VecInt) (o_testSimplePhoneSATSmall__50)).toString());
        Assert.assertEquals(-1, ((int) (((VecInt) (o_testSimplePhoneSATSmall__50)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall__50)).isEmpty());
        IConstr o_testSimplePhoneSATSmall__51 = solver.addClause(clause6);
        int[] array_2135633507 = new int[]{8,13};
        	int[] array_613511947 = (int[])((org.sat4j.minisat.constraints.cnf.OriginalBinaryClause)o_testSimplePhoneSATSmall__51).getLits();
        	for(int ii = 0; ii <array_2135633507.length; ii++) {
        		org.junit.Assert.assertEquals(array_2135633507[ii], array_613511947[ii]);
        	};
        Assert.assertFalse(((OriginalBinaryClause) (o_testSimplePhoneSATSmall__51)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((OriginalBinaryClause) (o_testSimplePhoneSATSmall__51)).getActivity())), 0.1);
        Assert.assertEquals("4[?] -6[?]", ((OriginalBinaryClause) (o_testSimplePhoneSATSmall__51)).toString());
        Assert.assertEquals(10, ((int) (((OriginalBinaryClause) (o_testSimplePhoneSATSmall__51)).hashCode())));
        VecInt clause7 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause7)).toString());
        Assert.assertTrue(((VecInt) (clause7)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall__54 = clause7.push(5);
        Assert.assertEquals("5", ((VecInt) (o_testSimplePhoneSATSmall__54)).toString());
        Assert.assertEquals(5, ((int) (((VecInt) (o_testSimplePhoneSATSmall__54)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall__54)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall__55 = clause7.push(6);
        Assert.assertEquals("5,6", ((VecInt) (o_testSimplePhoneSATSmall__55)).toString());
        Assert.assertEquals(5, ((int) (((VecInt) (o_testSimplePhoneSATSmall__55)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall__55)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall__56 = clause7.push((-4));
        Assert.assertEquals("5,6,-4", ((VecInt) (o_testSimplePhoneSATSmall__56)).toString());
        Assert.assertEquals(2, ((int) (((VecInt) (o_testSimplePhoneSATSmall__56)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall__56)).isEmpty());
        IConstr o_testSimplePhoneSATSmall__58 = solver.addAtLeast(clause6, 1);
        int[] array_963073566 = new int[]{8,13};
        	int[] array_2100296864 = (int[])((org.sat4j.minisat.constraints.cnf.OriginalWLClause)o_testSimplePhoneSATSmall__58).getLits();
        	for(int ii = 0; ii <array_963073566.length; ii++) {
        		org.junit.Assert.assertEquals(array_963073566[ii], array_2100296864[ii]);
        	};
        Assert.assertFalse(((OriginalWLClause) (o_testSimplePhoneSATSmall__58)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((OriginalWLClause) (o_testSimplePhoneSATSmall__58)).getActivity())), 0.1);
        Assert.assertEquals("4[?] -6[?] ", ((OriginalWLClause) (o_testSimplePhoneSATSmall__58)).toString());
        Assert.assertEquals(10, ((int) (((OriginalWLClause) (o_testSimplePhoneSATSmall__58)).hashCode())));
        solver.isSatisfiable();
        VecInt bound1 = new VecInt();
        Assert.assertEquals("", ((VecInt) (bound1)).toString());
        Assert.assertTrue(((VecInt) (bound1)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall__62 = bound1.push(3);
        Assert.assertEquals("3", ((VecInt) (o_testSimplePhoneSATSmall__62)).toString());
        Assert.assertEquals(3, ((int) (((VecInt) (o_testSimplePhoneSATSmall__62)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall__62)).isEmpty());
        int[] o_testSimplePhoneSATSmall__63 = solver.findModel(bound1);
        int[] array_1025472207 = new int[]{1,2,3,-4,-5,-6};
        	int[] array_1931980183 = (int[])o_testSimplePhoneSATSmall__63;
        	for(int ii = 0; ii <array_1025472207.length; ii++) {
        		org.junit.Assert.assertEquals(array_1025472207[ii], array_1931980183[ii]);
        	};
        VecInt bound2 = new VecInt();
        Assert.assertEquals("", ((VecInt) (bound2)).toString());
        Assert.assertTrue(((VecInt) (bound2)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall__66 = bound2.push((-3));
        Assert.assertEquals("-3", ((VecInt) (o_testSimplePhoneSATSmall__66)).toString());
        Assert.assertEquals(-3, ((int) (((VecInt) (o_testSimplePhoneSATSmall__66)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall__66)).isEmpty());
        int[] o_testSimplePhoneSATSmall__68 = solver.findModel(bound2);
        Assert.assertNull(o_testSimplePhoneSATSmall__68);
        VecInt bound3 = new VecInt();
        Assert.assertEquals("", ((VecInt) (bound3)).toString());
        Assert.assertTrue(((VecInt) (bound3)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall__71 = bound3.push(5);
        Assert.assertEquals("5", ((VecInt) (o_testSimplePhoneSATSmall__71)).toString());
        Assert.assertEquals(5, ((int) (((VecInt) (o_testSimplePhoneSATSmall__71)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall__71)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall__72 = bound3.push(3);
        Assert.assertEquals("5,3", ((VecInt) (o_testSimplePhoneSATSmall__72)).toString());
        Assert.assertEquals(4, ((int) (((VecInt) (o_testSimplePhoneSATSmall__72)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall__72)).isEmpty());
        int[] o_testSimplePhoneSATSmall__73 = solver.findModel(bound3);
        int[] array_994043809 = new int[]{1,2,3,4,5,-6};
        	int[] array_1629628817 = (int[])o_testSimplePhoneSATSmall__73;
        	for(int ii = 0; ii <array_994043809.length; ii++) {
        		org.junit.Assert.assertEquals(array_994043809[ii], array_1629628817[ii]);
        	};
        VecInt bound4 = new VecInt();
        Assert.assertEquals("", ((VecInt) (bound4)).toString());
        Assert.assertTrue(((VecInt) (bound4)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall__76 = bound4.push(5);
        Assert.assertEquals("5", ((VecInt) (o_testSimplePhoneSATSmall__76)).toString());
        Assert.assertEquals(5, ((int) (((VecInt) (o_testSimplePhoneSATSmall__76)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall__76)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall__77 = bound4.push((-3));
        Assert.assertEquals("5,-3", ((VecInt) (o_testSimplePhoneSATSmall__77)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (o_testSimplePhoneSATSmall__77)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall__77)).isEmpty());
        int[] o_testSimplePhoneSATSmall__79 = solver.findModel(bound4);
        Assert.assertNull(o_testSimplePhoneSATSmall__79);
        VecInt bound5 = new VecInt();
        Assert.assertEquals("", ((VecInt) (bound5)).toString());
        Assert.assertTrue(((VecInt) (bound5)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall__82 = bound5.push(4);
        Assert.assertEquals("4", ((VecInt) (o_testSimplePhoneSATSmall__82)).toString());
        Assert.assertEquals(4, ((int) (((VecInt) (o_testSimplePhoneSATSmall__82)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall__82)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall__83 = bound5.push((-3));
        Assert.assertEquals("4,-3", ((VecInt) (o_testSimplePhoneSATSmall__83)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall__83)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall__83)).isEmpty());
        int[] o_testSimplePhoneSATSmall__85 = solver.findModel(bound5);
        Assert.assertNull(o_testSimplePhoneSATSmall__85);
        VecInt bound6 = new VecInt();
        Assert.assertEquals("", ((VecInt) (bound6)).toString());
        Assert.assertTrue(((VecInt) (bound6)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall__88 = bound6.push(4);
        Assert.assertEquals("4", ((VecInt) (o_testSimplePhoneSATSmall__88)).toString());
        Assert.assertEquals(4, ((int) (((VecInt) (o_testSimplePhoneSATSmall__88)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall__88)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall__89 = bound6.push(3);
        Assert.assertEquals("4,3", ((VecInt) (o_testSimplePhoneSATSmall__89)).toString());
        Assert.assertEquals(3, ((int) (((VecInt) (o_testSimplePhoneSATSmall__89)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall__89)).isEmpty());
        int[] o_testSimplePhoneSATSmall__90 = solver.findModel(bound6);
        int[] array_1800424535 = new int[]{1,2,3,4,-5,-6};
        	int[] array_273016939 = (int[])o_testSimplePhoneSATSmall__90;
        	for(int ii = 0; ii <array_1800424535.length; ii++) {
        		org.junit.Assert.assertEquals(array_1800424535[ii], array_273016939[ii]);
        	};
        VecInt bound7 = new VecInt();
        Assert.assertEquals("", ((VecInt) (bound7)).toString());
        Assert.assertTrue(((VecInt) (bound7)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall__93 = bound7.push(4);
        Assert.assertEquals("4", ((VecInt) (o_testSimplePhoneSATSmall__93)).toString());
        Assert.assertEquals(4, ((int) (((VecInt) (o_testSimplePhoneSATSmall__93)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall__93)).isEmpty());
        int[] model = solver.findModel(bound7);
        int[] array_1548647315 = new int[]{1,2,3,4,-5,-6};
        	int[] array_1710076909 = (int[])model;
        	for(int ii = 0; ii <array_1548647315.length; ii++) {
        		org.junit.Assert.assertEquals(array_1548647315[ii], array_1710076909[ii]);
        	};
        Set<Integer> satisfiedModel = new HashSet<Integer>();
        for (int i : model) {
            satisfiedModel.add(new Integer(i));
        }
        boolean o_testSimplePhoneSATSmall__103 = satisfiedModel.contains(new Integer(4));
        Assert.assertTrue(o_testSimplePhoneSATSmall__103);
        boolean o_testSimplePhoneSATSmall__105 = satisfiedModel.contains(new Integer(1));
        Assert.assertTrue(o_testSimplePhoneSATSmall__105);
        boolean o_testSimplePhoneSATSmall__107 = satisfiedModel.contains(new Integer(2));
        Assert.assertTrue(o_testSimplePhoneSATSmall__107);
        Assert.assertEquals("1", ((VecInt) (clause0)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (clause0)).hashCode())));
        Assert.assertFalse(((VecInt) (clause0)).isEmpty());
        Assert.assertEquals("1", ((VecInt) (o_testSimplePhoneSATSmall__4)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (o_testSimplePhoneSATSmall__4)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall__4)).isEmpty());
        Assert.assertTrue(((UnitClause) (o_testSimplePhoneSATSmall__5)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((UnitClause) (o_testSimplePhoneSATSmall__5)).getActivity())), 0.1);
        Assert.assertEquals("1", ((UnitClause) (o_testSimplePhoneSATSmall__5)).toString());
        Assert.assertEquals("1,-2", ((VecInt) (clause1)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (clause1)).hashCode())));
        Assert.assertFalse(((VecInt) (clause1)).isEmpty());
        Assert.assertEquals("1,-2", ((VecInt) (o_testSimplePhoneSATSmall__9)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall__9)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall__9)).isEmpty());
        Assert.assertEquals("1,-2", ((VecInt) (o_testSimplePhoneSATSmall__10)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall__10)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall__10)).isEmpty());
        Assert.assertNull(o_testSimplePhoneSATSmall__12);
        Assert.assertEquals("2,-1", ((VecInt) (clause2)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (clause2)).hashCode())));
        Assert.assertFalse(((VecInt) (clause2)).isEmpty());
        Assert.assertEquals("2,-1", ((VecInt) (o_testSimplePhoneSATSmall__15)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall__15)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall__15)).isEmpty());
        Assert.assertEquals("2,-1", ((VecInt) (o_testSimplePhoneSATSmall__16)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall__16)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall__16)).isEmpty());
        Assert.assertTrue(((UnitClause) (o_testSimplePhoneSATSmall__18)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((UnitClause) (o_testSimplePhoneSATSmall__18)).getActivity())), 0.1);
        Assert.assertEquals("2", ((UnitClause) (o_testSimplePhoneSATSmall__18)).toString());
        Assert.assertEquals("3,-2", ((VecInt) (clause3)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (clause3)).hashCode())));
        Assert.assertFalse(((VecInt) (clause3)).isEmpty());
        Assert.assertEquals("3,-2", ((VecInt) (o_testSimplePhoneSATSmall__22)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall__22)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall__22)).isEmpty());
        Assert.assertEquals("3,-2", ((VecInt) (o_testSimplePhoneSATSmall__23)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall__23)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall__23)).isEmpty());
        Assert.assertTrue(((UnitClause) (o_testSimplePhoneSATSmall__25)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((UnitClause) (o_testSimplePhoneSATSmall__25)).getActivity())), 0.1);
        Assert.assertEquals("3", ((UnitClause) (o_testSimplePhoneSATSmall__25)).toString());
        Assert.assertEquals("2,-3", ((VecInt) (clause8)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (clause8)).hashCode())));
        Assert.assertFalse(((VecInt) (clause8)).isEmpty());
        Assert.assertEquals("2,-3", ((VecInt) (o_testSimplePhoneSATSmall__28)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall__28)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall__28)).isEmpty());
        Assert.assertEquals("2,-3", ((VecInt) (o_testSimplePhoneSATSmall__29)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall__29)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall__29)).isEmpty());
        Assert.assertNull(o_testSimplePhoneSATSmall__31);
        Assert.assertEquals("-4,1", ((VecInt) (clause4)).toString());
        Assert.assertEquals(-1, ((int) (((VecInt) (clause4)).hashCode())));
        Assert.assertFalse(((VecInt) (clause4)).isEmpty());
        Assert.assertEquals("-4,1", ((VecInt) (o_testSimplePhoneSATSmall__35)).toString());
        Assert.assertEquals(-1, ((int) (((VecInt) (o_testSimplePhoneSATSmall__35)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall__35)).isEmpty());
        Assert.assertEquals("-4,1", ((VecInt) (o_testSimplePhoneSATSmall__37)).toString());
        Assert.assertEquals(-1, ((int) (((VecInt) (o_testSimplePhoneSATSmall__37)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall__37)).isEmpty());
        Assert.assertNull(o_testSimplePhoneSATSmall__38);
        Assert.assertEquals("-5,4", ((VecInt) (clause5)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (clause5)).hashCode())));
        Assert.assertFalse(((VecInt) (clause5)).isEmpty());
        Assert.assertEquals("-5,4", ((VecInt) (o_testSimplePhoneSATSmall__42)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall__42)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall__42)).isEmpty());
        Assert.assertEquals("-5,4", ((VecInt) (o_testSimplePhoneSATSmall__44)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall__44)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall__44)).isEmpty());
        int[] array_821234175 = new int[]{8,11};
        	int[] array_811262187 = (int[])((org.sat4j.minisat.constraints.cnf.OriginalBinaryClause)o_testSimplePhoneSATSmall__45).getLits();
        	for(int ii = 0; ii <array_821234175.length; ii++) {
        		org.junit.Assert.assertEquals(array_821234175[ii], array_811262187[ii]);
        	};
        Assert.assertFalse(((OriginalBinaryClause) (o_testSimplePhoneSATSmall__45)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((OriginalBinaryClause) (o_testSimplePhoneSATSmall__45)).getActivity())), 0.1);
        Assert.assertEquals("4[?] -5[?]", ((OriginalBinaryClause) (o_testSimplePhoneSATSmall__45)).toString());
        Assert.assertEquals(9, ((int) (((OriginalBinaryClause) (o_testSimplePhoneSATSmall__45)).hashCode())));
        Assert.assertEquals("-6,4", ((VecInt) (clause6)).toString());
        Assert.assertEquals(-1, ((int) (((VecInt) (clause6)).hashCode())));
        Assert.assertFalse(((VecInt) (clause6)).isEmpty());
        Assert.assertEquals("-6,4", ((VecInt) (o_testSimplePhoneSATSmall__48)).toString());
        Assert.assertEquals(-1, ((int) (((VecInt) (o_testSimplePhoneSATSmall__48)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall__48)).isEmpty());
        Assert.assertEquals("-6,4", ((VecInt) (o_testSimplePhoneSATSmall__50)).toString());
        Assert.assertEquals(-1, ((int) (((VecInt) (o_testSimplePhoneSATSmall__50)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall__50)).isEmpty());
        int[] array_1098966944 = new int[]{8,13};
        	int[] array_1577838887 = (int[])((org.sat4j.minisat.constraints.cnf.OriginalBinaryClause)o_testSimplePhoneSATSmall__51).getLits();
        	for(int ii = 0; ii <array_1098966944.length; ii++) {
        		org.junit.Assert.assertEquals(array_1098966944[ii], array_1577838887[ii]);
        	};
        Assert.assertFalse(((OriginalBinaryClause) (o_testSimplePhoneSATSmall__51)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((OriginalBinaryClause) (o_testSimplePhoneSATSmall__51)).getActivity())), 0.1);
        Assert.assertEquals("4[?] -6[?]", ((OriginalBinaryClause) (o_testSimplePhoneSATSmall__51)).toString());
        Assert.assertEquals(10, ((int) (((OriginalBinaryClause) (o_testSimplePhoneSATSmall__51)).hashCode())));
        Assert.assertEquals("5,6,-4", ((VecInt) (clause7)).toString());
        Assert.assertEquals(2, ((int) (((VecInt) (clause7)).hashCode())));
        Assert.assertFalse(((VecInt) (clause7)).isEmpty());
        Assert.assertEquals("5,6,-4", ((VecInt) (o_testSimplePhoneSATSmall__54)).toString());
        Assert.assertEquals(2, ((int) (((VecInt) (o_testSimplePhoneSATSmall__54)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall__54)).isEmpty());
        Assert.assertEquals("5,6,-4", ((VecInt) (o_testSimplePhoneSATSmall__55)).toString());
        Assert.assertEquals(2, ((int) (((VecInt) (o_testSimplePhoneSATSmall__55)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall__55)).isEmpty());
        Assert.assertEquals("5,6,-4", ((VecInt) (o_testSimplePhoneSATSmall__56)).toString());
        Assert.assertEquals(2, ((int) (((VecInt) (o_testSimplePhoneSATSmall__56)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall__56)).isEmpty());
        int[] array_306257734 = new int[]{13,8};
        	int[] array_1709229574 = (int[])((org.sat4j.minisat.constraints.cnf.OriginalWLClause)o_testSimplePhoneSATSmall__58).getLits();
        	for(int ii = 0; ii <array_306257734.length; ii++) {
        		org.junit.Assert.assertEquals(array_306257734[ii], array_1709229574[ii]);
        	};
        Assert.assertFalse(((OriginalWLClause) (o_testSimplePhoneSATSmall__58)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((OriginalWLClause) (o_testSimplePhoneSATSmall__58)).getActivity())), 0.1);
        Assert.assertEquals("-6[?] 4[?] ", ((OriginalWLClause) (o_testSimplePhoneSATSmall__58)).toString());
        Assert.assertEquals(10, ((int) (((OriginalWLClause) (o_testSimplePhoneSATSmall__58)).hashCode())));
        Assert.assertEquals("3", ((VecInt) (bound1)).toString());
        Assert.assertEquals(3, ((int) (((VecInt) (bound1)).hashCode())));
        Assert.assertFalse(((VecInt) (bound1)).isEmpty());
        Assert.assertEquals("3", ((VecInt) (o_testSimplePhoneSATSmall__62)).toString());
        Assert.assertEquals(3, ((int) (((VecInt) (o_testSimplePhoneSATSmall__62)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall__62)).isEmpty());
        int[] array_1499926403 = new int[]{1,2,3,-4,-5,-6};
        	int[] array_661689706 = (int[])o_testSimplePhoneSATSmall__63;
        	for(int ii = 0; ii <array_1499926403.length; ii++) {
        		org.junit.Assert.assertEquals(array_1499926403[ii], array_661689706[ii]);
        	};
        Assert.assertEquals("-3", ((VecInt) (bound2)).toString());
        Assert.assertEquals(-3, ((int) (((VecInt) (bound2)).hashCode())));
        Assert.assertFalse(((VecInt) (bound2)).isEmpty());
        Assert.assertEquals("-3", ((VecInt) (o_testSimplePhoneSATSmall__66)).toString());
        Assert.assertEquals(-3, ((int) (((VecInt) (o_testSimplePhoneSATSmall__66)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall__66)).isEmpty());
        Assert.assertNull(o_testSimplePhoneSATSmall__68);
        Assert.assertEquals("5,3", ((VecInt) (bound3)).toString());
        Assert.assertEquals(4, ((int) (((VecInt) (bound3)).hashCode())));
        Assert.assertFalse(((VecInt) (bound3)).isEmpty());
        Assert.assertEquals("5,3", ((VecInt) (o_testSimplePhoneSATSmall__71)).toString());
        Assert.assertEquals(4, ((int) (((VecInt) (o_testSimplePhoneSATSmall__71)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall__71)).isEmpty());
        Assert.assertEquals("5,3", ((VecInt) (o_testSimplePhoneSATSmall__72)).toString());
        Assert.assertEquals(4, ((int) (((VecInt) (o_testSimplePhoneSATSmall__72)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall__72)).isEmpty());
        int[] array_247042739 = new int[]{1,2,3,4,5,-6};
        	int[] array_1567167673 = (int[])o_testSimplePhoneSATSmall__73;
        	for(int ii = 0; ii <array_247042739.length; ii++) {
        		org.junit.Assert.assertEquals(array_247042739[ii], array_1567167673[ii]);
        	};
        Assert.assertEquals("5,-3", ((VecInt) (bound4)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (bound4)).hashCode())));
        Assert.assertFalse(((VecInt) (bound4)).isEmpty());
        Assert.assertEquals("5,-3", ((VecInt) (o_testSimplePhoneSATSmall__76)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (o_testSimplePhoneSATSmall__76)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall__76)).isEmpty());
        Assert.assertEquals("5,-3", ((VecInt) (o_testSimplePhoneSATSmall__77)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (o_testSimplePhoneSATSmall__77)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall__77)).isEmpty());
        Assert.assertNull(o_testSimplePhoneSATSmall__79);
        Assert.assertEquals("4,-3", ((VecInt) (bound5)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (bound5)).hashCode())));
        Assert.assertFalse(((VecInt) (bound5)).isEmpty());
        Assert.assertEquals("4,-3", ((VecInt) (o_testSimplePhoneSATSmall__82)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall__82)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall__82)).isEmpty());
        Assert.assertEquals("4,-3", ((VecInt) (o_testSimplePhoneSATSmall__83)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall__83)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall__83)).isEmpty());
        Assert.assertNull(o_testSimplePhoneSATSmall__85);
        Assert.assertEquals("4,3", ((VecInt) (bound6)).toString());
        Assert.assertEquals(3, ((int) (((VecInt) (bound6)).hashCode())));
        Assert.assertFalse(((VecInt) (bound6)).isEmpty());
        Assert.assertEquals("4,3", ((VecInt) (o_testSimplePhoneSATSmall__88)).toString());
        Assert.assertEquals(3, ((int) (((VecInt) (o_testSimplePhoneSATSmall__88)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall__88)).isEmpty());
        Assert.assertEquals("4,3", ((VecInt) (o_testSimplePhoneSATSmall__89)).toString());
        Assert.assertEquals(3, ((int) (((VecInt) (o_testSimplePhoneSATSmall__89)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall__89)).isEmpty());
        int[] array_99167899 = new int[]{1,2,3,4,-5,-6};
        	int[] array_1475731910 = (int[])o_testSimplePhoneSATSmall__90;
        	for(int ii = 0; ii <array_99167899.length; ii++) {
        		org.junit.Assert.assertEquals(array_99167899[ii], array_1475731910[ii]);
        	};
        Assert.assertEquals("4", ((VecInt) (bound7)).toString());
        Assert.assertEquals(4, ((int) (((VecInt) (bound7)).hashCode())));
        Assert.assertFalse(((VecInt) (bound7)).isEmpty());
        Assert.assertEquals("4", ((VecInt) (o_testSimplePhoneSATSmall__93)).toString());
        Assert.assertEquals(4, ((int) (((VecInt) (o_testSimplePhoneSATSmall__93)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall__93)).isEmpty());
        int[] array_1676125145 = new int[]{1,2,3,4,-5,-6};
        	int[] array_1834201035 = (int[])model;
        	for(int ii = 0; ii <array_1676125145.length; ii++) {
        		org.junit.Assert.assertEquals(array_1676125145[ii], array_1834201035[ii]);
        	};
        Assert.assertTrue(o_testSimplePhoneSATSmall__103);
        Assert.assertTrue(o_testSimplePhoneSATSmall__105);
    }
}

