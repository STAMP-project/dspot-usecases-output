package org.sat4j;


import java.util.HashSet;
import java.util.Set;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;
import org.sat4j.core.VecInt;
import org.sat4j.minisat.SolverFactory;
import org.sat4j.minisat.constraints.cnf.OriginalBinaryClause;
import org.sat4j.minisat.constraints.cnf.OriginalWLClause;
import org.sat4j.minisat.constraints.cnf.UnitClause;
import org.sat4j.specs.ContradictionException;
import org.sat4j.specs.IConstr;
import org.sat4j.specs.IVecInt;
import org.sat4j.specs.TimeoutException;
import org.sat4j.tools.GateTranslator;


public class AmplBugSAT81 {
    private GateTranslator solver;

    @Before
    public void setUp() throws Exception {
        solver = new GateTranslator(SolverFactory.newDefault());
    }

    @Test(timeout = 30000)
    public void testSimplePhoneSATSmall() throws Exception, ContradictionException, TimeoutException {
        VecInt clause0 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause0)).toString());
        Assert.assertTrue(((VecInt) (clause0)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall__4 = clause0.push(1);
        Assert.assertEquals("1", ((VecInt) (o_testSimplePhoneSATSmall__4)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (o_testSimplePhoneSATSmall__4)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall__4)).isEmpty());
        IConstr o_testSimplePhoneSATSmall__5 = solver.addClause(clause0);
        Assert.assertTrue(((UnitClause) (o_testSimplePhoneSATSmall__5)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((UnitClause) (o_testSimplePhoneSATSmall__5)).getActivity())), 0.1);
        Assert.assertEquals("1", ((UnitClause) (o_testSimplePhoneSATSmall__5)).toString());
        VecInt clause1 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause1)).toString());
        Assert.assertTrue(((VecInt) (clause1)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall__9 = clause1.push(1);
        Assert.assertEquals("1", ((VecInt) (o_testSimplePhoneSATSmall__9)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (o_testSimplePhoneSATSmall__9)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall__9)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall__10 = clause1.push((-2));
        Assert.assertEquals("1,-2", ((VecInt) (o_testSimplePhoneSATSmall__10)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall__10)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall__10)).isEmpty());
        solver.addClause(clause1);
        VecInt clause2 = new VecInt();
        clause2.push(2);
        clause2.push((-1));
        solver.addClause(clause2);
        VecInt clause3 = new VecInt();
        clause3.push(3);
        clause3.push((-2));
        solver.addClause(clause3);
        VecInt clause8 = new VecInt();
        clause8.push(2);
        clause8.push((-3));
        solver.addClause(clause8);
        VecInt clause4 = new VecInt();
        clause4.push((-4));
        clause4.push(1);
        solver.addClause(clause4);
        VecInt clause5 = new VecInt();
        clause5.push((-5));
        clause5.push(4);
        solver.addClause(clause5);
        VecInt clause6 = new VecInt();
        clause6.push((-6));
        clause6.push(4);
        solver.addClause(clause6);
        VecInt clause7 = new VecInt();
        clause7.push(5);
        clause7.push(6);
        clause7.push((-4));
        solver.addAtLeast(clause6, 1);
        solver.isSatisfiable();
        VecInt bound1 = new VecInt();
        bound1.push(3);
        solver.findModel(bound1);
        VecInt bound2 = new VecInt();
        bound2.push((-3));
        solver.findModel(bound2);
        VecInt bound3 = new VecInt();
        bound3.push(5);
        bound3.push(3);
        solver.findModel(bound3);
        VecInt bound4 = new VecInt();
        bound4.push(5);
        bound4.push((-3));
        solver.findModel(bound4);
        VecInt bound5 = new VecInt();
        bound5.push(4);
        bound5.push((-3));
        solver.findModel(bound5);
        VecInt bound6 = new VecInt();
        bound6.push(4);
        bound6.push(3);
        solver.findModel(bound6);
        VecInt bound7 = new VecInt();
        bound7.push(4);
        int[] model = solver.findModel(bound7);
        Set<Integer> satisfiedModel = new HashSet<Integer>();
        for (int i : model) {
            satisfiedModel.add(new Integer(i));
        }
        satisfiedModel.contains(new Integer(4));
        satisfiedModel.contains(new Integer(1));
        satisfiedModel.contains(new Integer(2));
    }

    @Test(timeout = 30000)
    public void testSimplePhoneSATSmall_remove2() throws Exception, ContradictionException, TimeoutException {
        VecInt clause0 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause0)).toString());
        Assert.assertTrue(((VecInt) (clause0)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove2__4 = clause0.push(1);
        Assert.assertEquals("1", ((VecInt) (o_testSimplePhoneSATSmall_remove2__4)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove2__4)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove2__4)).isEmpty());
        VecInt clause1 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause1)).toString());
        Assert.assertTrue(((VecInt) (clause1)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove2__8 = clause1.push(1);
        Assert.assertEquals("1", ((VecInt) (o_testSimplePhoneSATSmall_remove2__8)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove2__8)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove2__8)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove2__9 = clause1.push((-2));
        Assert.assertEquals("1,-2", ((VecInt) (o_testSimplePhoneSATSmall_remove2__9)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove2__9)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove2__9)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove2__11 = solver.addClause(clause1);
        int[] array_1890173107 = new int[]{2,5};
        	int[] array_11404287 = (int[])((org.sat4j.minisat.constraints.cnf.OriginalBinaryClause)o_testSimplePhoneSATSmall_remove2__11).getLits();
        	for(int ii = 0; ii <array_1890173107.length; ii++) {
        		org.junit.Assert.assertEquals(array_1890173107[ii], array_11404287[ii]);
        	};
        Assert.assertEquals("1[?] -2[?]", ((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove2__11)).toString());
        Assert.assertEquals(3, ((int) (((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove2__11)).hashCode())));
        Assert.assertEquals(0.0, ((double) (((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove2__11)).getActivity())), 0.1);
        Assert.assertFalse(((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove2__11)).isSatisfied());
        VecInt clause2 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause2)).toString());
        Assert.assertTrue(((VecInt) (clause2)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove2__14 = clause2.push(2);
        Assert.assertEquals("2", ((VecInt) (o_testSimplePhoneSATSmall_remove2__14)).toString());
        Assert.assertEquals(2, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove2__14)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove2__14)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove2__15 = clause2.push((-1));
        Assert.assertEquals("2,-1", ((VecInt) (o_testSimplePhoneSATSmall_remove2__15)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove2__15)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove2__15)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove2__17 = solver.addClause(clause2);
        int[] array_1916443389 = new int[]{3,4};
        	int[] array_116830369 = (int[])((org.sat4j.minisat.constraints.cnf.OriginalBinaryClause)o_testSimplePhoneSATSmall_remove2__17).getLits();
        	for(int ii = 0; ii <array_1916443389.length; ii++) {
        		org.junit.Assert.assertEquals(array_1916443389[ii], array_116830369[ii]);
        	};
        Assert.assertEquals("-1[?] 2[?]", ((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove2__17)).toString());
        Assert.assertEquals(3, ((int) (((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove2__17)).hashCode())));
        Assert.assertEquals(0.0, ((double) (((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove2__17)).getActivity())), 0.1);
        Assert.assertFalse(((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove2__17)).isSatisfied());
        VecInt clause3 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause3)).toString());
        Assert.assertTrue(((VecInt) (clause3)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove2__21 = clause3.push(3);
        Assert.assertEquals("3", ((VecInt) (o_testSimplePhoneSATSmall_remove2__21)).toString());
        Assert.assertEquals(3, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove2__21)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove2__21)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove2__22 = clause3.push((-2));
        Assert.assertEquals("3,-2", ((VecInt) (o_testSimplePhoneSATSmall_remove2__22)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove2__22)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove2__22)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove2__24 = solver.addClause(clause3);
        int[] array_215630225 = new int[]{5,6};
        	int[] array_1507503842 = (int[])((org.sat4j.minisat.constraints.cnf.OriginalBinaryClause)o_testSimplePhoneSATSmall_remove2__24).getLits();
        	for(int ii = 0; ii <array_215630225.length; ii++) {
        		org.junit.Assert.assertEquals(array_215630225[ii], array_1507503842[ii]);
        	};
        Assert.assertEquals("-2[?] 3[?]", ((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove2__24)).toString());
        Assert.assertEquals(5, ((int) (((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove2__24)).hashCode())));
        Assert.assertEquals(0.0, ((double) (((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove2__24)).getActivity())), 0.1);
        Assert.assertFalse(((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove2__24)).isSatisfied());
        VecInt clause8 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause8)).toString());
        Assert.assertTrue(((VecInt) (clause8)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove2__27 = clause8.push(2);
        Assert.assertEquals("2", ((VecInt) (o_testSimplePhoneSATSmall_remove2__27)).toString());
        Assert.assertEquals(2, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove2__27)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove2__27)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove2__28 = clause8.push((-3));
        Assert.assertEquals("2,-3", ((VecInt) (o_testSimplePhoneSATSmall_remove2__28)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove2__28)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove2__28)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove2__30 = solver.addClause(clause8);
        int[] array_399465337 = new int[]{4,7};
        	int[] array_429322718 = (int[])((org.sat4j.minisat.constraints.cnf.OriginalBinaryClause)o_testSimplePhoneSATSmall_remove2__30).getLits();
        	for(int ii = 0; ii <array_399465337.length; ii++) {
        		org.junit.Assert.assertEquals(array_399465337[ii], array_429322718[ii]);
        	};
        Assert.assertEquals("2[?] -3[?]", ((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove2__30)).toString());
        Assert.assertEquals(5, ((int) (((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove2__30)).hashCode())));
        Assert.assertEquals(0.0, ((double) (((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove2__30)).getActivity())), 0.1);
        Assert.assertFalse(((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove2__30)).isSatisfied());
        VecInt clause4 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause4)).toString());
        Assert.assertTrue(((VecInt) (clause4)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove2__34 = clause4.push((-4));
        Assert.assertEquals("-4", ((VecInt) (o_testSimplePhoneSATSmall_remove2__34)).toString());
        Assert.assertEquals(-4, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove2__34)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove2__34)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove2__36 = clause4.push(1);
        Assert.assertEquals("-4,1", ((VecInt) (o_testSimplePhoneSATSmall_remove2__36)).toString());
        Assert.assertEquals(-1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove2__36)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove2__36)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove2__37 = solver.addClause(clause4);
        int[] array_123192235 = new int[]{2,9};
        	int[] array_528171170 = (int[])((org.sat4j.minisat.constraints.cnf.OriginalBinaryClause)o_testSimplePhoneSATSmall_remove2__37).getLits();
        	for(int ii = 0; ii <array_123192235.length; ii++) {
        		org.junit.Assert.assertEquals(array_123192235[ii], array_528171170[ii]);
        	};
        Assert.assertEquals("1[?] -4[?]", ((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove2__37)).toString());
        Assert.assertEquals(5, ((int) (((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove2__37)).hashCode())));
        Assert.assertEquals(0.0, ((double) (((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove2__37)).getActivity())), 0.1);
        Assert.assertFalse(((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove2__37)).isSatisfied());
        VecInt clause5 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause5)).toString());
        Assert.assertTrue(((VecInt) (clause5)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove2__41 = clause5.push((-5));
        Assert.assertEquals("-5", ((VecInt) (o_testSimplePhoneSATSmall_remove2__41)).toString());
        Assert.assertEquals(-5, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove2__41)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove2__41)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove2__43 = clause5.push(4);
        Assert.assertEquals("-5,4", ((VecInt) (o_testSimplePhoneSATSmall_remove2__43)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove2__43)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove2__43)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove2__44 = solver.addClause(clause5);
        int[] array_2007119514 = new int[]{8,11};
        	int[] array_1743183821 = (int[])((org.sat4j.minisat.constraints.cnf.OriginalBinaryClause)o_testSimplePhoneSATSmall_remove2__44).getLits();
        	for(int ii = 0; ii <array_2007119514.length; ii++) {
        		org.junit.Assert.assertEquals(array_2007119514[ii], array_1743183821[ii]);
        	};
        Assert.assertEquals("4[?] -5[?]", ((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove2__44)).toString());
        Assert.assertEquals(9, ((int) (((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove2__44)).hashCode())));
        Assert.assertEquals(0.0, ((double) (((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove2__44)).getActivity())), 0.1);
        Assert.assertFalse(((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove2__44)).isSatisfied());
        VecInt clause6 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause6)).toString());
        Assert.assertTrue(((VecInt) (clause6)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove2__47 = clause6.push((-6));
        Assert.assertEquals("-6", ((VecInt) (o_testSimplePhoneSATSmall_remove2__47)).toString());
        Assert.assertEquals(-6, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove2__47)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove2__47)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove2__49 = clause6.push(4);
        Assert.assertEquals("-6,4", ((VecInt) (o_testSimplePhoneSATSmall_remove2__49)).toString());
        Assert.assertEquals(-1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove2__49)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove2__49)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove2__50 = solver.addClause(clause6);
        int[] array_1503854603 = new int[]{8,13};
        	int[] array_1866619758 = (int[])((org.sat4j.minisat.constraints.cnf.OriginalBinaryClause)o_testSimplePhoneSATSmall_remove2__50).getLits();
        	for(int ii = 0; ii <array_1503854603.length; ii++) {
        		org.junit.Assert.assertEquals(array_1503854603[ii], array_1866619758[ii]);
        	};
        Assert.assertEquals("4[?] -6[?]", ((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove2__50)).toString());
        Assert.assertEquals(10, ((int) (((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove2__50)).hashCode())));
        Assert.assertEquals(0.0, ((double) (((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove2__50)).getActivity())), 0.1);
        Assert.assertFalse(((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove2__50)).isSatisfied());
        VecInt clause7 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause7)).toString());
        Assert.assertTrue(((VecInt) (clause7)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove2__53 = clause7.push(5);
        Assert.assertEquals("5", ((VecInt) (o_testSimplePhoneSATSmall_remove2__53)).toString());
        Assert.assertEquals(5, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove2__53)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove2__53)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove2__54 = clause7.push(6);
        Assert.assertEquals("5,6", ((VecInt) (o_testSimplePhoneSATSmall_remove2__54)).toString());
        Assert.assertEquals(5, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove2__54)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove2__54)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove2__55 = clause7.push((-4));
        Assert.assertEquals("5,6,-4", ((VecInt) (o_testSimplePhoneSATSmall_remove2__55)).toString());
        Assert.assertEquals(2, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove2__55)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove2__55)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove2__57 = solver.addAtLeast(clause6, 1);
        int[] array_1043498900 = new int[]{8,13};
        	int[] array_1706630214 = (int[])((org.sat4j.minisat.constraints.cnf.OriginalWLClause)o_testSimplePhoneSATSmall_remove2__57).getLits();
        	for(int ii = 0; ii <array_1043498900.length; ii++) {
        		org.junit.Assert.assertEquals(array_1043498900[ii], array_1706630214[ii]);
        	};
        Assert.assertEquals("4[?] -6[?] ", ((OriginalWLClause) (o_testSimplePhoneSATSmall_remove2__57)).toString());
        Assert.assertEquals(10, ((int) (((OriginalWLClause) (o_testSimplePhoneSATSmall_remove2__57)).hashCode())));
        Assert.assertEquals(0.0, ((double) (((OriginalWLClause) (o_testSimplePhoneSATSmall_remove2__57)).getActivity())), 0.1);
        Assert.assertFalse(((OriginalWLClause) (o_testSimplePhoneSATSmall_remove2__57)).isSatisfied());
        solver.isSatisfiable();
        VecInt bound1 = new VecInt();
        Assert.assertEquals("", ((VecInt) (bound1)).toString());
        Assert.assertTrue(((VecInt) (bound1)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove2__61 = bound1.push(3);
        Assert.assertEquals("3", ((VecInt) (o_testSimplePhoneSATSmall_remove2__61)).toString());
        Assert.assertEquals(3, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove2__61)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove2__61)).isEmpty());
        int[] o_testSimplePhoneSATSmall_remove2__62 = solver.findModel(bound1);
        int[] array_1576904691 = new int[]{1,2,3,-4,-5,-6};
        	int[] array_1362946453 = (int[])o_testSimplePhoneSATSmall_remove2__62;
        	for(int ii = 0; ii <array_1576904691.length; ii++) {
        		org.junit.Assert.assertEquals(array_1576904691[ii], array_1362946453[ii]);
        	};
        VecInt bound2 = new VecInt();
        Assert.assertEquals("", ((VecInt) (bound2)).toString());
        Assert.assertTrue(((VecInt) (bound2)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove2__65 = bound2.push((-3));
        Assert.assertEquals("-3", ((VecInt) (o_testSimplePhoneSATSmall_remove2__65)).toString());
        Assert.assertEquals(-3, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove2__65)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove2__65)).isEmpty());
        int[] o_testSimplePhoneSATSmall_remove2__67 = solver.findModel(bound2);
        int[] array_668687851 = new int[]{-1,-2,-3,-4,-5,-6};
        	int[] array_1038895465 = (int[])o_testSimplePhoneSATSmall_remove2__67;
        	for(int ii = 0; ii <array_668687851.length; ii++) {
        		org.junit.Assert.assertEquals(array_668687851[ii], array_1038895465[ii]);
        	};
        VecInt bound3 = new VecInt();
        Assert.assertEquals("", ((VecInt) (bound3)).toString());
        Assert.assertTrue(((VecInt) (bound3)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove2__70 = bound3.push(5);
        Assert.assertEquals("5", ((VecInt) (o_testSimplePhoneSATSmall_remove2__70)).toString());
        Assert.assertEquals(5, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove2__70)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove2__70)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove2__71 = bound3.push(3);
        Assert.assertEquals("5,3", ((VecInt) (o_testSimplePhoneSATSmall_remove2__71)).toString());
        Assert.assertEquals(4, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove2__71)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove2__71)).isEmpty());
        int[] o_testSimplePhoneSATSmall_remove2__72 = solver.findModel(bound3);
        int[] array_1275732480 = new int[]{1,2,3,4,5,-6};
        	int[] array_1197870923 = (int[])o_testSimplePhoneSATSmall_remove2__72;
        	for(int ii = 0; ii <array_1275732480.length; ii++) {
        		org.junit.Assert.assertEquals(array_1275732480[ii], array_1197870923[ii]);
        	};
        VecInt bound4 = new VecInt();
        Assert.assertEquals("", ((VecInt) (bound4)).toString());
        Assert.assertTrue(((VecInt) (bound4)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove2__75 = bound4.push(5);
        Assert.assertEquals("5", ((VecInt) (o_testSimplePhoneSATSmall_remove2__75)).toString());
        Assert.assertEquals(5, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove2__75)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove2__75)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove2__76 = bound4.push((-3));
        Assert.assertEquals("5,-3", ((VecInt) (o_testSimplePhoneSATSmall_remove2__76)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove2__76)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove2__76)).isEmpty());
        solver.findModel(bound4);
        VecInt bound5 = new VecInt();
        bound5.push(4);
        bound5.push((-3));
        solver.findModel(bound5);
        VecInt bound6 = new VecInt();
        bound6.push(4);
        bound6.push(3);
        solver.findModel(bound6);
        VecInt bound7 = new VecInt();
        bound7.push(4);
        int[] model = solver.findModel(bound7);
        Set<Integer> satisfiedModel = new HashSet<Integer>();
        for (int i : model) {
            satisfiedModel.add(new Integer(i));
        }
        satisfiedModel.contains(new Integer(4));
        satisfiedModel.contains(new Integer(1));
        satisfiedModel.contains(new Integer(2));
    }

    @Test(timeout = 30000)
    public void testSimplePhoneSATSmall_remove4() throws Exception, ContradictionException, TimeoutException {
        VecInt clause0 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause0)).toString());
        Assert.assertTrue(((VecInt) (clause0)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove4__4 = clause0.push(1);
        Assert.assertEquals("1", ((VecInt) (o_testSimplePhoneSATSmall_remove4__4)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove4__4)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove4__4)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove4__5 = solver.addClause(clause0);
        Assert.assertEquals("1", ((UnitClause) (o_testSimplePhoneSATSmall_remove4__5)).toString());
        Assert.assertEquals(0.0, ((double) (((UnitClause) (o_testSimplePhoneSATSmall_remove4__5)).getActivity())), 0.1);
        Assert.assertTrue(((UnitClause) (o_testSimplePhoneSATSmall_remove4__5)).isSatisfied());
        VecInt clause1 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause1)).toString());
        Assert.assertTrue(((VecInt) (clause1)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove4__9 = clause1.push(1);
        Assert.assertEquals("1", ((VecInt) (o_testSimplePhoneSATSmall_remove4__9)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove4__9)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove4__9)).isEmpty());
        solver.addClause(clause1);
        VecInt clause2 = new VecInt();
        clause2.push(2);
        clause2.push((-1));
        solver.addClause(clause2);
        VecInt clause3 = new VecInt();
        clause3.push(3);
        clause3.push((-2));
        solver.addClause(clause3);
        VecInt clause8 = new VecInt();
        clause8.push(2);
        clause8.push((-3));
        solver.addClause(clause8);
        VecInt clause4 = new VecInt();
        clause4.push((-4));
        clause4.push(1);
        solver.addClause(clause4);
        VecInt clause5 = new VecInt();
        clause5.push((-5));
        clause5.push(4);
        solver.addClause(clause5);
        VecInt clause6 = new VecInt();
        clause6.push((-6));
        clause6.push(4);
        solver.addClause(clause6);
        VecInt clause7 = new VecInt();
        clause7.push(5);
        clause7.push(6);
        clause7.push((-4));
        solver.addAtLeast(clause6, 1);
        solver.isSatisfiable();
        VecInt bound1 = new VecInt();
        bound1.push(3);
        solver.findModel(bound1);
        VecInt bound2 = new VecInt();
        bound2.push((-3));
        solver.findModel(bound2);
        VecInt bound3 = new VecInt();
        bound3.push(5);
        bound3.push(3);
        solver.findModel(bound3);
        VecInt bound4 = new VecInt();
        bound4.push(5);
        bound4.push((-3));
        solver.findModel(bound4);
        VecInt bound5 = new VecInt();
        bound5.push(4);
        bound5.push((-3));
        solver.findModel(bound5);
        VecInt bound6 = new VecInt();
        bound6.push(4);
        bound6.push(3);
        solver.findModel(bound6);
        VecInt bound7 = new VecInt();
        bound7.push(4);
        int[] model = solver.findModel(bound7);
        Set<Integer> satisfiedModel = new HashSet<Integer>();
        for (int i : model) {
            satisfiedModel.add(new Integer(i));
        }
        satisfiedModel.contains(new Integer(4));
        satisfiedModel.contains(new Integer(1));
        satisfiedModel.contains(new Integer(2));
    }

    @Test(timeout = 30000)
    public void testSimplePhoneSATSmall_remove5() throws Exception, ContradictionException, TimeoutException {
        VecInt clause0 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause0)).toString());
        Assert.assertTrue(((VecInt) (clause0)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__4 = clause0.push(1);
        Assert.assertEquals("1", ((VecInt) (o_testSimplePhoneSATSmall_remove5__4)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__4)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__4)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove5__5 = solver.addClause(clause0);
        Assert.assertEquals("1", ((UnitClause) (o_testSimplePhoneSATSmall_remove5__5)).toString());
        Assert.assertEquals(0.0, ((double) (((UnitClause) (o_testSimplePhoneSATSmall_remove5__5)).getActivity())), 0.1);
        Assert.assertTrue(((UnitClause) (o_testSimplePhoneSATSmall_remove5__5)).isSatisfied());
        VecInt clause1 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause1)).toString());
        Assert.assertTrue(((VecInt) (clause1)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__9 = clause1.push(1);
        Assert.assertEquals("1", ((VecInt) (o_testSimplePhoneSATSmall_remove5__9)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__9)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__9)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__10 = clause1.push((-2));
        Assert.assertEquals("1,-2", ((VecInt) (o_testSimplePhoneSATSmall_remove5__10)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__10)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__10)).isEmpty());
        VecInt clause2 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause2)).toString());
        Assert.assertTrue(((VecInt) (clause2)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__14 = clause2.push(2);
        Assert.assertEquals("2", ((VecInt) (o_testSimplePhoneSATSmall_remove5__14)).toString());
        Assert.assertEquals(2, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__14)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__14)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__15 = clause2.push((-1));
        Assert.assertEquals("2,-1", ((VecInt) (o_testSimplePhoneSATSmall_remove5__15)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__15)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__15)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove5__17 = solver.addClause(clause2);
        Assert.assertEquals("2", ((UnitClause) (o_testSimplePhoneSATSmall_remove5__17)).toString());
        Assert.assertEquals(0.0, ((double) (((UnitClause) (o_testSimplePhoneSATSmall_remove5__17)).getActivity())), 0.1);
        Assert.assertTrue(((UnitClause) (o_testSimplePhoneSATSmall_remove5__17)).isSatisfied());
        VecInt clause3 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause3)).toString());
        Assert.assertTrue(((VecInt) (clause3)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__21 = clause3.push(3);
        Assert.assertEquals("3", ((VecInt) (o_testSimplePhoneSATSmall_remove5__21)).toString());
        Assert.assertEquals(3, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__21)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__21)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__22 = clause3.push((-2));
        Assert.assertEquals("3,-2", ((VecInt) (o_testSimplePhoneSATSmall_remove5__22)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__22)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__22)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove5__24 = solver.addClause(clause3);
        Assert.assertEquals("3", ((UnitClause) (o_testSimplePhoneSATSmall_remove5__24)).toString());
        Assert.assertEquals(0.0, ((double) (((UnitClause) (o_testSimplePhoneSATSmall_remove5__24)).getActivity())), 0.1);
        Assert.assertTrue(((UnitClause) (o_testSimplePhoneSATSmall_remove5__24)).isSatisfied());
        VecInt clause8 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause8)).toString());
        Assert.assertTrue(((VecInt) (clause8)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__27 = clause8.push(2);
        Assert.assertEquals("2", ((VecInt) (o_testSimplePhoneSATSmall_remove5__27)).toString());
        Assert.assertEquals(2, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__27)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__27)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__28 = clause8.push((-3));
        Assert.assertEquals("2,-3", ((VecInt) (o_testSimplePhoneSATSmall_remove5__28)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__28)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__28)).isEmpty());
        solver.addClause(clause8);
        VecInt clause4 = new VecInt();
        clause4.push((-4));
        clause4.push(1);
        solver.addClause(clause4);
        VecInt clause5 = new VecInt();
        clause5.push((-5));
        clause5.push(4);
        solver.addClause(clause5);
        VecInt clause6 = new VecInt();
        clause6.push((-6));
        clause6.push(4);
        solver.addClause(clause6);
        VecInt clause7 = new VecInt();
        clause7.push(5);
        clause7.push(6);
        clause7.push((-4));
        solver.addAtLeast(clause6, 1);
        solver.isSatisfiable();
        VecInt bound1 = new VecInt();
        bound1.push(3);
        solver.findModel(bound1);
        VecInt bound2 = new VecInt();
        bound2.push((-3));
        solver.findModel(bound2);
        VecInt bound3 = new VecInt();
        bound3.push(5);
        bound3.push(3);
        solver.findModel(bound3);
        VecInt bound4 = new VecInt();
        bound4.push(5);
        bound4.push((-3));
        solver.findModel(bound4);
        VecInt bound5 = new VecInt();
        bound5.push(4);
        bound5.push((-3));
        solver.findModel(bound5);
        VecInt bound6 = new VecInt();
        bound6.push(4);
        bound6.push(3);
        solver.findModel(bound6);
        VecInt bound7 = new VecInt();
        bound7.push(4);
        int[] model = solver.findModel(bound7);
        Set<Integer> satisfiedModel = new HashSet<Integer>();
        for (int i : model) {
            satisfiedModel.add(new Integer(i));
        }
        satisfiedModel.contains(new Integer(4));
        satisfiedModel.contains(new Integer(1));
        satisfiedModel.contains(new Integer(2));
    }

    @Test(timeout = 30000)
    public void testSimplePhoneSATSmall_remove8() throws Exception, ContradictionException, TimeoutException {
        VecInt clause0 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause0)).toString());
        Assert.assertTrue(((VecInt) (clause0)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove8__4 = clause0.push(1);
        Assert.assertEquals("1", ((VecInt) (o_testSimplePhoneSATSmall_remove8__4)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove8__4)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove8__4)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove8__5 = solver.addClause(clause0);
        Assert.assertEquals("1", ((UnitClause) (o_testSimplePhoneSATSmall_remove8__5)).toString());
        Assert.assertEquals(0.0, ((double) (((UnitClause) (o_testSimplePhoneSATSmall_remove8__5)).getActivity())), 0.1);
        Assert.assertTrue(((UnitClause) (o_testSimplePhoneSATSmall_remove8__5)).isSatisfied());
        VecInt clause1 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause1)).toString());
        Assert.assertTrue(((VecInt) (clause1)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove8__9 = clause1.push(1);
        Assert.assertEquals("1", ((VecInt) (o_testSimplePhoneSATSmall_remove8__9)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove8__9)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove8__9)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove8__10 = clause1.push((-2));
        Assert.assertEquals("1,-2", ((VecInt) (o_testSimplePhoneSATSmall_remove8__10)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove8__10)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove8__10)).isEmpty());
        solver.addClause(clause1);
        VecInt clause2 = new VecInt();
        clause2.push(2);
        clause2.push((-1));
        VecInt clause3 = new VecInt();
        clause3.push(3);
        clause3.push((-2));
        solver.addClause(clause3);
        VecInt clause8 = new VecInt();
        clause8.push(2);
        clause8.push((-3));
        solver.addClause(clause8);
        VecInt clause4 = new VecInt();
        clause4.push((-4));
        clause4.push(1);
        solver.addClause(clause4);
        VecInt clause5 = new VecInt();
        clause5.push((-5));
        clause5.push(4);
        solver.addClause(clause5);
        VecInt clause6 = new VecInt();
        clause6.push((-6));
        clause6.push(4);
        solver.addClause(clause6);
        VecInt clause7 = new VecInt();
        clause7.push(5);
        clause7.push(6);
        clause7.push((-4));
        solver.addAtLeast(clause6, 1);
        solver.isSatisfiable();
        VecInt bound1 = new VecInt();
        bound1.push(3);
        solver.findModel(bound1);
        VecInt bound2 = new VecInt();
        bound2.push((-3));
        solver.findModel(bound2);
        VecInt bound3 = new VecInt();
        bound3.push(5);
        bound3.push(3);
        solver.findModel(bound3);
        VecInt bound4 = new VecInt();
        bound4.push(5);
        bound4.push((-3));
        solver.findModel(bound4);
        VecInt bound5 = new VecInt();
        bound5.push(4);
        bound5.push((-3));
        solver.findModel(bound5);
        VecInt bound6 = new VecInt();
        bound6.push(4);
        bound6.push(3);
        solver.findModel(bound6);
        VecInt bound7 = new VecInt();
        bound7.push(4);
        int[] model = solver.findModel(bound7);
        Set<Integer> satisfiedModel = new HashSet<Integer>();
        for (int i : model) {
            satisfiedModel.add(new Integer(i));
        }
        satisfiedModel.contains(new Integer(4));
        satisfiedModel.contains(new Integer(1));
        satisfiedModel.contains(new Integer(2));
    }

    @Test(timeout = 30000)
    public void testSimplePhoneSATSmall_remove11() throws Exception, ContradictionException, TimeoutException {
        VecInt clause0 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause0)).toString());
        Assert.assertTrue(((VecInt) (clause0)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove11__4 = clause0.push(1);
        Assert.assertEquals("1", ((VecInt) (o_testSimplePhoneSATSmall_remove11__4)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove11__4)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove11__4)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove11__5 = solver.addClause(clause0);
        Assert.assertEquals("1", ((UnitClause) (o_testSimplePhoneSATSmall_remove11__5)).toString());
        Assert.assertEquals(0.0, ((double) (((UnitClause) (o_testSimplePhoneSATSmall_remove11__5)).getActivity())), 0.1);
        Assert.assertTrue(((UnitClause) (o_testSimplePhoneSATSmall_remove11__5)).isSatisfied());
        VecInt clause1 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause1)).toString());
        Assert.assertTrue(((VecInt) (clause1)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove11__9 = clause1.push(1);
        Assert.assertEquals("1", ((VecInt) (o_testSimplePhoneSATSmall_remove11__9)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove11__9)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove11__9)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove11__10 = clause1.push((-2));
        Assert.assertEquals("1,-2", ((VecInt) (o_testSimplePhoneSATSmall_remove11__10)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove11__10)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove11__10)).isEmpty());
        solver.addClause(clause1);
        VecInt clause2 = new VecInt();
        clause2.push(2);
        clause2.push((-1));
        solver.addClause(clause2);
        VecInt clause3 = new VecInt();
        clause3.push(3);
        clause3.push((-2));
        VecInt clause8 = new VecInt();
        clause8.push(2);
        clause8.push((-3));
        solver.addClause(clause8);
        VecInt clause4 = new VecInt();
        clause4.push((-4));
        clause4.push(1);
        solver.addClause(clause4);
        VecInt clause5 = new VecInt();
        clause5.push((-5));
        clause5.push(4);
        solver.addClause(clause5);
        VecInt clause6 = new VecInt();
        clause6.push((-6));
        clause6.push(4);
        solver.addClause(clause6);
        VecInt clause7 = new VecInt();
        clause7.push(5);
        clause7.push(6);
        clause7.push((-4));
        solver.addAtLeast(clause6, 1);
        solver.isSatisfiable();
        VecInt bound1 = new VecInt();
        bound1.push(3);
        solver.findModel(bound1);
        VecInt bound2 = new VecInt();
        bound2.push((-3));
        solver.findModel(bound2);
        VecInt bound3 = new VecInt();
        bound3.push(5);
        bound3.push(3);
        solver.findModel(bound3);
        VecInt bound4 = new VecInt();
        bound4.push(5);
        bound4.push((-3));
        solver.findModel(bound4);
        VecInt bound5 = new VecInt();
        bound5.push(4);
        bound5.push((-3));
        solver.findModel(bound5);
        VecInt bound6 = new VecInt();
        bound6.push(4);
        bound6.push(3);
        solver.findModel(bound6);
        VecInt bound7 = new VecInt();
        bound7.push(4);
        int[] model = solver.findModel(bound7);
        Set<Integer> satisfiedModel = new HashSet<Integer>();
        for (int i : model) {
            satisfiedModel.add(new Integer(i));
        }
        satisfiedModel.contains(new Integer(4));
        satisfiedModel.contains(new Integer(1));
        satisfiedModel.contains(new Integer(2));
    }

    @Test(timeout = 30000)
    public void testSimplePhoneSATSmall_remove18() throws Exception, ContradictionException, TimeoutException {
        VecInt clause0 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause0)).toString());
        Assert.assertTrue(((VecInt) (clause0)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove18__4 = clause0.push(1);
        Assert.assertEquals("1", ((VecInt) (o_testSimplePhoneSATSmall_remove18__4)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove18__4)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove18__4)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove18__5 = solver.addClause(clause0);
        Assert.assertEquals("1", ((UnitClause) (o_testSimplePhoneSATSmall_remove18__5)).toString());
        Assert.assertEquals(0.0, ((double) (((UnitClause) (o_testSimplePhoneSATSmall_remove18__5)).getActivity())), 0.1);
        Assert.assertTrue(((UnitClause) (o_testSimplePhoneSATSmall_remove18__5)).isSatisfied());
        VecInt clause1 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause1)).toString());
        Assert.assertTrue(((VecInt) (clause1)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove18__9 = clause1.push(1);
        Assert.assertEquals("1", ((VecInt) (o_testSimplePhoneSATSmall_remove18__9)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove18__9)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove18__9)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove18__10 = clause1.push((-2));
        Assert.assertEquals("1,-2", ((VecInt) (o_testSimplePhoneSATSmall_remove18__10)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove18__10)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove18__10)).isEmpty());
        solver.addClause(clause1);
        VecInt clause2 = new VecInt();
        clause2.push(2);
        clause2.push((-1));
        solver.addClause(clause2);
        VecInt clause3 = new VecInt();
        clause3.push(3);
        clause3.push((-2));
        solver.addClause(clause3);
        VecInt clause8 = new VecInt();
        clause8.push(2);
        clause8.push((-3));
        solver.addClause(clause8);
        VecInt clause4 = new VecInt();
        clause4.push((-4));
        clause4.push(1);
        solver.addClause(clause4);
        VecInt clause5 = new VecInt();
        clause5.push(4);
        solver.addClause(clause5);
        VecInt clause6 = new VecInt();
        clause6.push((-6));
        clause6.push(4);
        solver.addClause(clause6);
        VecInt clause7 = new VecInt();
        clause7.push(5);
        clause7.push(6);
        clause7.push((-4));
        solver.addAtLeast(clause6, 1);
        solver.isSatisfiable();
        VecInt bound1 = new VecInt();
        bound1.push(3);
        solver.findModel(bound1);
        VecInt bound2 = new VecInt();
        bound2.push((-3));
        solver.findModel(bound2);
        VecInt bound3 = new VecInt();
        bound3.push(5);
        bound3.push(3);
        solver.findModel(bound3);
        VecInt bound4 = new VecInt();
        bound4.push(5);
        bound4.push((-3));
        solver.findModel(bound4);
        VecInt bound5 = new VecInt();
        bound5.push(4);
        bound5.push((-3));
        solver.findModel(bound5);
        VecInt bound6 = new VecInt();
        bound6.push(4);
        bound6.push(3);
        solver.findModel(bound6);
        VecInt bound7 = new VecInt();
        bound7.push(4);
        int[] model = solver.findModel(bound7);
        Set<Integer> satisfiedModel = new HashSet<Integer>();
        for (int i : model) {
            satisfiedModel.add(new Integer(i));
        }
        satisfiedModel.contains(new Integer(4));
        satisfiedModel.contains(new Integer(1));
        satisfiedModel.contains(new Integer(2));
    }

    @Test(timeout = 30000)
    public void testSimplePhoneSATSmall_remove19() throws Exception, ContradictionException, TimeoutException {
        VecInt clause0 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause0)).toString());
        Assert.assertTrue(((VecInt) (clause0)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove19__4 = clause0.push(1);
        Assert.assertEquals("1", ((VecInt) (o_testSimplePhoneSATSmall_remove19__4)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove19__4)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove19__4)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove19__5 = solver.addClause(clause0);
        Assert.assertEquals("1", ((UnitClause) (o_testSimplePhoneSATSmall_remove19__5)).toString());
        Assert.assertEquals(0.0, ((double) (((UnitClause) (o_testSimplePhoneSATSmall_remove19__5)).getActivity())), 0.1);
        Assert.assertTrue(((UnitClause) (o_testSimplePhoneSATSmall_remove19__5)).isSatisfied());
        VecInt clause1 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause1)).toString());
        Assert.assertTrue(((VecInt) (clause1)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove19__9 = clause1.push(1);
        Assert.assertEquals("1", ((VecInt) (o_testSimplePhoneSATSmall_remove19__9)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove19__9)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove19__9)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove19__10 = clause1.push((-2));
        Assert.assertEquals("1,-2", ((VecInt) (o_testSimplePhoneSATSmall_remove19__10)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove19__10)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove19__10)).isEmpty());
        solver.addClause(clause1);
        VecInt clause2 = new VecInt();
        clause2.push(2);
        clause2.push((-1));
        solver.addClause(clause2);
        VecInt clause3 = new VecInt();
        clause3.push(3);
        clause3.push((-2));
        solver.addClause(clause3);
        VecInt clause8 = new VecInt();
        clause8.push(2);
        clause8.push((-3));
        solver.addClause(clause8);
        VecInt clause4 = new VecInt();
        clause4.push((-4));
        clause4.push(1);
        solver.addClause(clause4);
        VecInt clause5 = new VecInt();
        clause5.push((-5));
        solver.addClause(clause5);
        VecInt clause6 = new VecInt();
        clause6.push((-6));
        clause6.push(4);
        solver.addClause(clause6);
        VecInt clause7 = new VecInt();
        clause7.push(5);
        clause7.push(6);
        clause7.push((-4));
        solver.addAtLeast(clause6, 1);
        solver.isSatisfiable();
        VecInt bound1 = new VecInt();
        bound1.push(3);
        solver.findModel(bound1);
        VecInt bound2 = new VecInt();
        bound2.push((-3));
        solver.findModel(bound2);
        VecInt bound3 = new VecInt();
        bound3.push(5);
        bound3.push(3);
        solver.findModel(bound3);
        VecInt bound4 = new VecInt();
        bound4.push(5);
        bound4.push((-3));
        solver.findModel(bound4);
        VecInt bound5 = new VecInt();
        bound5.push(4);
        bound5.push((-3));
        solver.findModel(bound5);
        VecInt bound6 = new VecInt();
        bound6.push(4);
        bound6.push(3);
        solver.findModel(bound6);
        VecInt bound7 = new VecInt();
        bound7.push(4);
        int[] model = solver.findModel(bound7);
        Set<Integer> satisfiedModel = new HashSet<Integer>();
        for (int i : model) {
            satisfiedModel.add(new Integer(i));
        }
        satisfiedModel.contains(new Integer(4));
        satisfiedModel.contains(new Integer(1));
        satisfiedModel.contains(new Integer(2));
    }

    @Test(timeout = 30000)
    public void testSimplePhoneSATSmall_remove21() throws Exception, ContradictionException, TimeoutException {
        VecInt clause0 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause0)).toString());
        Assert.assertTrue(((VecInt) (clause0)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove21__4 = clause0.push(1);
        Assert.assertEquals("1", ((VecInt) (o_testSimplePhoneSATSmall_remove21__4)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove21__4)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove21__4)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove21__5 = solver.addClause(clause0);
        Assert.assertEquals("1", ((UnitClause) (o_testSimplePhoneSATSmall_remove21__5)).toString());
        Assert.assertEquals(0.0, ((double) (((UnitClause) (o_testSimplePhoneSATSmall_remove21__5)).getActivity())), 0.1);
        Assert.assertTrue(((UnitClause) (o_testSimplePhoneSATSmall_remove21__5)).isSatisfied());
        VecInt clause1 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause1)).toString());
        Assert.assertTrue(((VecInt) (clause1)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove21__9 = clause1.push(1);
        Assert.assertEquals("1", ((VecInt) (o_testSimplePhoneSATSmall_remove21__9)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove21__9)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove21__9)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove21__10 = clause1.push((-2));
        Assert.assertEquals("1,-2", ((VecInt) (o_testSimplePhoneSATSmall_remove21__10)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove21__10)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove21__10)).isEmpty());
        solver.addClause(clause1);
        VecInt clause2 = new VecInt();
        clause2.push(2);
        clause2.push((-1));
        solver.addClause(clause2);
        VecInt clause3 = new VecInt();
        clause3.push(3);
        clause3.push((-2));
        solver.addClause(clause3);
        VecInt clause8 = new VecInt();
        clause8.push(2);
        clause8.push((-3));
        solver.addClause(clause8);
        VecInt clause4 = new VecInt();
        clause4.push((-4));
        clause4.push(1);
        solver.addClause(clause4);
        VecInt clause5 = new VecInt();
        clause5.push((-5));
        clause5.push(4);
        solver.addClause(clause5);
        VecInt clause6 = new VecInt();
        clause6.push(4);
        solver.addClause(clause6);
        VecInt clause7 = new VecInt();
        clause7.push(5);
        clause7.push(6);
        clause7.push((-4));
        solver.addAtLeast(clause6, 1);
        solver.isSatisfiable();
        VecInt bound1 = new VecInt();
        bound1.push(3);
        solver.findModel(bound1);
        VecInt bound2 = new VecInt();
        bound2.push((-3));
        solver.findModel(bound2);
        VecInt bound3 = new VecInt();
        bound3.push(5);
        bound3.push(3);
        solver.findModel(bound3);
        VecInt bound4 = new VecInt();
        bound4.push(5);
        bound4.push((-3));
        solver.findModel(bound4);
        VecInt bound5 = new VecInt();
        bound5.push(4);
        bound5.push((-3));
        solver.findModel(bound5);
        VecInt bound6 = new VecInt();
        bound6.push(4);
        bound6.push(3);
        solver.findModel(bound6);
        VecInt bound7 = new VecInt();
        bound7.push(4);
        int[] model = solver.findModel(bound7);
        Set<Integer> satisfiedModel = new HashSet<Integer>();
        for (int i : model) {
            satisfiedModel.add(new Integer(i));
        }
        satisfiedModel.contains(new Integer(4));
        satisfiedModel.contains(new Integer(1));
        satisfiedModel.contains(new Integer(2));
    }

    @Test(timeout = 30000)
    public void testSimplePhoneSATSmall_remove22() throws Exception, ContradictionException, TimeoutException {
        VecInt clause0 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause0)).toString());
        Assert.assertTrue(((VecInt) (clause0)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove22__4 = clause0.push(1);
        Assert.assertEquals("1", ((VecInt) (o_testSimplePhoneSATSmall_remove22__4)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove22__4)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove22__4)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove22__5 = solver.addClause(clause0);
        Assert.assertEquals("1", ((UnitClause) (o_testSimplePhoneSATSmall_remove22__5)).toString());
        Assert.assertEquals(0.0, ((double) (((UnitClause) (o_testSimplePhoneSATSmall_remove22__5)).getActivity())), 0.1);
        Assert.assertTrue(((UnitClause) (o_testSimplePhoneSATSmall_remove22__5)).isSatisfied());
        VecInt clause1 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause1)).toString());
        Assert.assertTrue(((VecInt) (clause1)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove22__9 = clause1.push(1);
        Assert.assertEquals("1", ((VecInt) (o_testSimplePhoneSATSmall_remove22__9)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove22__9)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove22__9)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove22__10 = clause1.push((-2));
        Assert.assertEquals("1,-2", ((VecInt) (o_testSimplePhoneSATSmall_remove22__10)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove22__10)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove22__10)).isEmpty());
        solver.addClause(clause1);
        VecInt clause2 = new VecInt();
        clause2.push(2);
        clause2.push((-1));
        solver.addClause(clause2);
        VecInt clause3 = new VecInt();
        clause3.push(3);
        clause3.push((-2));
        solver.addClause(clause3);
        VecInt clause8 = new VecInt();
        clause8.push(2);
        clause8.push((-3));
        solver.addClause(clause8);
        VecInt clause4 = new VecInt();
        clause4.push((-4));
        clause4.push(1);
        solver.addClause(clause4);
        VecInt clause5 = new VecInt();
        clause5.push((-5));
        clause5.push(4);
        solver.addClause(clause5);
        VecInt clause6 = new VecInt();
        clause6.push((-6));
        solver.addClause(clause6);
        VecInt clause7 = new VecInt();
        clause7.push(5);
        clause7.push(6);
        clause7.push((-4));
        solver.addAtLeast(clause6, 1);
        solver.isSatisfiable();
        VecInt bound1 = new VecInt();
        bound1.push(3);
        solver.findModel(bound1);
        VecInt bound2 = new VecInt();
        bound2.push((-3));
        solver.findModel(bound2);
        VecInt bound3 = new VecInt();
        bound3.push(5);
        bound3.push(3);
        solver.findModel(bound3);
        VecInt bound4 = new VecInt();
        bound4.push(5);
        bound4.push((-3));
        solver.findModel(bound4);
        VecInt bound5 = new VecInt();
        bound5.push(4);
        bound5.push((-3));
        solver.findModel(bound5);
        VecInt bound6 = new VecInt();
        bound6.push(4);
        bound6.push(3);
        solver.findModel(bound6);
        VecInt bound7 = new VecInt();
        bound7.push(4);
        int[] model = solver.findModel(bound7);
        Set<Integer> satisfiedModel = new HashSet<Integer>();
        for (int i : model) {
            satisfiedModel.add(new Integer(i));
        }
        satisfiedModel.contains(new Integer(4));
        satisfiedModel.contains(new Integer(1));
        satisfiedModel.contains(new Integer(2));
    }

    @Test(timeout = 30000)
    public void testSimplePhoneSATSmall_remove27() throws Exception, ContradictionException, TimeoutException {
        VecInt clause0 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause0)).toString());
        Assert.assertTrue(((VecInt) (clause0)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove27__4 = clause0.push(1);
        Assert.assertEquals("1", ((VecInt) (o_testSimplePhoneSATSmall_remove27__4)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove27__4)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove27__4)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove27__5 = solver.addClause(clause0);
        Assert.assertEquals("1", ((UnitClause) (o_testSimplePhoneSATSmall_remove27__5)).toString());
        Assert.assertEquals(0.0, ((double) (((UnitClause) (o_testSimplePhoneSATSmall_remove27__5)).getActivity())), 0.1);
        Assert.assertTrue(((UnitClause) (o_testSimplePhoneSATSmall_remove27__5)).isSatisfied());
        VecInt clause1 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause1)).toString());
        Assert.assertTrue(((VecInt) (clause1)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove27__9 = clause1.push(1);
        Assert.assertEquals("1", ((VecInt) (o_testSimplePhoneSATSmall_remove27__9)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove27__9)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove27__9)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove27__10 = clause1.push((-2));
        Assert.assertEquals("1,-2", ((VecInt) (o_testSimplePhoneSATSmall_remove27__10)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove27__10)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove27__10)).isEmpty());
        solver.addClause(clause1);
        VecInt clause2 = new VecInt();
        clause2.push(2);
        clause2.push((-1));
        solver.addClause(clause2);
        VecInt clause3 = new VecInt();
        clause3.push(3);
        clause3.push((-2));
        solver.addClause(clause3);
        VecInt clause8 = new VecInt();
        clause8.push(2);
        clause8.push((-3));
        solver.addClause(clause8);
        VecInt clause4 = new VecInt();
        clause4.push((-4));
        clause4.push(1);
        solver.addClause(clause4);
        VecInt clause5 = new VecInt();
        clause5.push((-5));
        clause5.push(4);
        solver.addClause(clause5);
        VecInt clause6 = new VecInt();
        clause6.push((-6));
        clause6.push(4);
        solver.addClause(clause6);
        VecInt clause7 = new VecInt();
        clause7.push(5);
        clause7.push(6);
        clause7.push((-4));
        solver.isSatisfiable();
        VecInt bound1 = new VecInt();
        bound1.push(3);
        solver.findModel(bound1);
        VecInt bound2 = new VecInt();
        bound2.push((-3));
        solver.findModel(bound2);
        VecInt bound3 = new VecInt();
        bound3.push(5);
        bound3.push(3);
        solver.findModel(bound3);
        VecInt bound4 = new VecInt();
        bound4.push(5);
        bound4.push((-3));
        solver.findModel(bound4);
        VecInt bound5 = new VecInt();
        bound5.push(4);
        bound5.push((-3));
        solver.findModel(bound5);
        VecInt bound6 = new VecInt();
        bound6.push(4);
        bound6.push(3);
        solver.findModel(bound6);
        VecInt bound7 = new VecInt();
        bound7.push(4);
        int[] model = solver.findModel(bound7);
        Set<Integer> satisfiedModel = new HashSet<Integer>();
        for (int i : model) {
            satisfiedModel.add(new Integer(i));
        }
        satisfiedModel.contains(new Integer(4));
        satisfiedModel.contains(new Integer(1));
        satisfiedModel.contains(new Integer(2));
    }

    @Test(timeout = 30000)
    public void testSimplePhoneSATSmall_remove29() throws Exception, ContradictionException, TimeoutException {
        VecInt clause0 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause0)).toString());
        Assert.assertTrue(((VecInt) (clause0)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove29__4 = clause0.push(1);
        Assert.assertEquals("1", ((VecInt) (o_testSimplePhoneSATSmall_remove29__4)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove29__4)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove29__4)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove29__5 = solver.addClause(clause0);
        Assert.assertEquals("1", ((UnitClause) (o_testSimplePhoneSATSmall_remove29__5)).toString());
        Assert.assertEquals(0.0, ((double) (((UnitClause) (o_testSimplePhoneSATSmall_remove29__5)).getActivity())), 0.1);
        Assert.assertTrue(((UnitClause) (o_testSimplePhoneSATSmall_remove29__5)).isSatisfied());
        VecInt clause1 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause1)).toString());
        Assert.assertTrue(((VecInt) (clause1)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove29__9 = clause1.push(1);
        Assert.assertEquals("1", ((VecInt) (o_testSimplePhoneSATSmall_remove29__9)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove29__9)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove29__9)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove29__10 = clause1.push((-2));
        Assert.assertEquals("1,-2", ((VecInt) (o_testSimplePhoneSATSmall_remove29__10)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove29__10)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove29__10)).isEmpty());
        solver.addClause(clause1);
        VecInt clause2 = new VecInt();
        clause2.push(2);
        clause2.push((-1));
        solver.addClause(clause2);
        VecInt clause3 = new VecInt();
        clause3.push(3);
        clause3.push((-2));
        solver.addClause(clause3);
        VecInt clause8 = new VecInt();
        clause8.push(2);
        clause8.push((-3));
        solver.addClause(clause8);
        VecInt clause4 = new VecInt();
        clause4.push((-4));
        clause4.push(1);
        solver.addClause(clause4);
        VecInt clause5 = new VecInt();
        clause5.push((-5));
        clause5.push(4);
        solver.addClause(clause5);
        VecInt clause6 = new VecInt();
        clause6.push((-6));
        clause6.push(4);
        solver.addClause(clause6);
        VecInt clause7 = new VecInt();
        clause7.push(5);
        clause7.push(6);
        clause7.push((-4));
        solver.addAtLeast(clause6, 1);
        solver.isSatisfiable();
        VecInt bound1 = new VecInt();
        bound1.push(3);
        solver.findModel(bound1);
        VecInt bound2 = new VecInt();
        solver.findModel(bound2);
        VecInt bound3 = new VecInt();
        bound3.push(5);
        bound3.push(3);
        solver.findModel(bound3);
        VecInt bound4 = new VecInt();
        bound4.push(5);
        bound4.push((-3));
        solver.findModel(bound4);
        VecInt bound5 = new VecInt();
        bound5.push(4);
        bound5.push((-3));
        solver.findModel(bound5);
        VecInt bound6 = new VecInt();
        bound6.push(4);
        bound6.push(3);
        solver.findModel(bound6);
        VecInt bound7 = new VecInt();
        bound7.push(4);
        int[] model = solver.findModel(bound7);
        Set<Integer> satisfiedModel = new HashSet<Integer>();
        for (int i : model) {
            satisfiedModel.add(new Integer(i));
        }
        satisfiedModel.contains(new Integer(4));
        satisfiedModel.contains(new Integer(1));
        satisfiedModel.contains(new Integer(2));
    }

    @Test(timeout = 30000)
    public void testSimplePhoneSATSmall_remove30() throws Exception, ContradictionException, TimeoutException {
        VecInt clause0 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause0)).toString());
        Assert.assertTrue(((VecInt) (clause0)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove30__4 = clause0.push(1);
        Assert.assertEquals("1", ((VecInt) (o_testSimplePhoneSATSmall_remove30__4)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove30__4)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove30__4)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove30__5 = solver.addClause(clause0);
        Assert.assertEquals("1", ((UnitClause) (o_testSimplePhoneSATSmall_remove30__5)).toString());
        Assert.assertEquals(0.0, ((double) (((UnitClause) (o_testSimplePhoneSATSmall_remove30__5)).getActivity())), 0.1);
        Assert.assertTrue(((UnitClause) (o_testSimplePhoneSATSmall_remove30__5)).isSatisfied());
        VecInt clause1 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause1)).toString());
        Assert.assertTrue(((VecInt) (clause1)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove30__9 = clause1.push(1);
        Assert.assertEquals("1", ((VecInt) (o_testSimplePhoneSATSmall_remove30__9)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove30__9)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove30__9)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove30__10 = clause1.push((-2));
        Assert.assertEquals("1,-2", ((VecInt) (o_testSimplePhoneSATSmall_remove30__10)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove30__10)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove30__10)).isEmpty());
        solver.addClause(clause1);
        VecInt clause2 = new VecInt();
        clause2.push(2);
        clause2.push((-1));
        solver.addClause(clause2);
        VecInt clause3 = new VecInt();
        clause3.push(3);
        clause3.push((-2));
        solver.addClause(clause3);
        VecInt clause8 = new VecInt();
        clause8.push(2);
        clause8.push((-3));
        solver.addClause(clause8);
        VecInt clause4 = new VecInt();
        clause4.push((-4));
        clause4.push(1);
        solver.addClause(clause4);
        VecInt clause5 = new VecInt();
        clause5.push((-5));
        clause5.push(4);
        solver.addClause(clause5);
        VecInt clause6 = new VecInt();
        clause6.push((-6));
        clause6.push(4);
        solver.addClause(clause6);
        VecInt clause7 = new VecInt();
        clause7.push(5);
        clause7.push(6);
        clause7.push((-4));
        solver.addAtLeast(clause6, 1);
        solver.isSatisfiable();
        VecInt bound1 = new VecInt();
        bound1.push(3);
        solver.findModel(bound1);
        VecInt bound2 = new VecInt();
        bound2.push((-3));
        solver.findModel(bound2);
        VecInt bound3 = new VecInt();
        bound3.push(3);
        solver.findModel(bound3);
        VecInt bound4 = new VecInt();
        bound4.push(5);
        bound4.push((-3));
        solver.findModel(bound4);
        VecInt bound5 = new VecInt();
        bound5.push(4);
        bound5.push((-3));
        solver.findModel(bound5);
        VecInt bound6 = new VecInt();
        bound6.push(4);
        bound6.push(3);
        solver.findModel(bound6);
        VecInt bound7 = new VecInt();
        bound7.push(4);
        int[] model = solver.findModel(bound7);
        Set<Integer> satisfiedModel = new HashSet<Integer>();
        for (int i : model) {
            satisfiedModel.add(new Integer(i));
        }
        satisfiedModel.contains(new Integer(4));
        satisfiedModel.contains(new Integer(1));
        satisfiedModel.contains(new Integer(2));
    }

    @Test(timeout = 30000)
    public void testSimplePhoneSATSmall_remove32() throws Exception, ContradictionException, TimeoutException {
        VecInt clause0 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause0)).toString());
        Assert.assertTrue(((VecInt) (clause0)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove32__4 = clause0.push(1);
        Assert.assertEquals("1", ((VecInt) (o_testSimplePhoneSATSmall_remove32__4)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove32__4)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove32__4)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove32__5 = solver.addClause(clause0);
        Assert.assertEquals("1", ((UnitClause) (o_testSimplePhoneSATSmall_remove32__5)).toString());
        Assert.assertEquals(0.0, ((double) (((UnitClause) (o_testSimplePhoneSATSmall_remove32__5)).getActivity())), 0.1);
        Assert.assertTrue(((UnitClause) (o_testSimplePhoneSATSmall_remove32__5)).isSatisfied());
        VecInt clause1 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause1)).toString());
        Assert.assertTrue(((VecInt) (clause1)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove32__9 = clause1.push(1);
        Assert.assertEquals("1", ((VecInt) (o_testSimplePhoneSATSmall_remove32__9)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove32__9)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove32__9)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove32__10 = clause1.push((-2));
        Assert.assertEquals("1,-2", ((VecInt) (o_testSimplePhoneSATSmall_remove32__10)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove32__10)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove32__10)).isEmpty());
        solver.addClause(clause1);
        VecInt clause2 = new VecInt();
        clause2.push(2);
        clause2.push((-1));
        solver.addClause(clause2);
        VecInt clause3 = new VecInt();
        clause3.push(3);
        clause3.push((-2));
        solver.addClause(clause3);
        VecInt clause8 = new VecInt();
        clause8.push(2);
        clause8.push((-3));
        solver.addClause(clause8);
        VecInt clause4 = new VecInt();
        clause4.push((-4));
        clause4.push(1);
        solver.addClause(clause4);
        VecInt clause5 = new VecInt();
        clause5.push((-5));
        clause5.push(4);
        solver.addClause(clause5);
        VecInt clause6 = new VecInt();
        clause6.push((-6));
        clause6.push(4);
        solver.addClause(clause6);
        VecInt clause7 = new VecInt();
        clause7.push(5);
        clause7.push(6);
        clause7.push((-4));
        solver.addAtLeast(clause6, 1);
        solver.isSatisfiable();
        VecInt bound1 = new VecInt();
        bound1.push(3);
        solver.findModel(bound1);
        VecInt bound2 = new VecInt();
        bound2.push((-3));
        solver.findModel(bound2);
        VecInt bound3 = new VecInt();
        bound3.push(5);
        bound3.push(3);
        solver.findModel(bound3);
        VecInt bound4 = new VecInt();
        bound4.push((-3));
        solver.findModel(bound4);
        VecInt bound5 = new VecInt();
        bound5.push(4);
        bound5.push((-3));
        solver.findModel(bound5);
        VecInt bound6 = new VecInt();
        bound6.push(4);
        bound6.push(3);
        solver.findModel(bound6);
        VecInt bound7 = new VecInt();
        bound7.push(4);
        int[] model = solver.findModel(bound7);
        Set<Integer> satisfiedModel = new HashSet<Integer>();
        for (int i : model) {
            satisfiedModel.add(new Integer(i));
        }
        satisfiedModel.contains(new Integer(4));
        satisfiedModel.contains(new Integer(1));
        satisfiedModel.contains(new Integer(2));
    }

    @Test(timeout = 30000)
    public void testSimplePhoneSATSmall_remove34() throws Exception, ContradictionException, TimeoutException {
        VecInt clause0 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause0)).toString());
        Assert.assertTrue(((VecInt) (clause0)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove34__4 = clause0.push(1);
        Assert.assertEquals("1", ((VecInt) (o_testSimplePhoneSATSmall_remove34__4)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove34__4)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove34__4)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove34__5 = solver.addClause(clause0);
        Assert.assertEquals("1", ((UnitClause) (o_testSimplePhoneSATSmall_remove34__5)).toString());
        Assert.assertEquals(0.0, ((double) (((UnitClause) (o_testSimplePhoneSATSmall_remove34__5)).getActivity())), 0.1);
        Assert.assertTrue(((UnitClause) (o_testSimplePhoneSATSmall_remove34__5)).isSatisfied());
        VecInt clause1 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause1)).toString());
        Assert.assertTrue(((VecInt) (clause1)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove34__9 = clause1.push(1);
        Assert.assertEquals("1", ((VecInt) (o_testSimplePhoneSATSmall_remove34__9)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove34__9)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove34__9)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove34__10 = clause1.push((-2));
        Assert.assertEquals("1,-2", ((VecInt) (o_testSimplePhoneSATSmall_remove34__10)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove34__10)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove34__10)).isEmpty());
        solver.addClause(clause1);
        VecInt clause2 = new VecInt();
        clause2.push(2);
        clause2.push((-1));
        solver.addClause(clause2);
        VecInt clause3 = new VecInt();
        clause3.push(3);
        clause3.push((-2));
        solver.addClause(clause3);
        VecInt clause8 = new VecInt();
        clause8.push(2);
        clause8.push((-3));
        solver.addClause(clause8);
        VecInt clause4 = new VecInt();
        clause4.push((-4));
        clause4.push(1);
        solver.addClause(clause4);
        VecInt clause5 = new VecInt();
        clause5.push((-5));
        clause5.push(4);
        solver.addClause(clause5);
        VecInt clause6 = new VecInt();
        clause6.push((-6));
        clause6.push(4);
        solver.addClause(clause6);
        VecInt clause7 = new VecInt();
        clause7.push(5);
        clause7.push(6);
        clause7.push((-4));
        solver.addAtLeast(clause6, 1);
        solver.isSatisfiable();
        VecInt bound1 = new VecInt();
        bound1.push(3);
        solver.findModel(bound1);
        VecInt bound2 = new VecInt();
        bound2.push((-3));
        solver.findModel(bound2);
        VecInt bound3 = new VecInt();
        bound3.push(5);
        bound3.push(3);
        solver.findModel(bound3);
        VecInt bound4 = new VecInt();
        bound4.push(5);
        bound4.push((-3));
        solver.findModel(bound4);
        VecInt bound5 = new VecInt();
        bound5.push((-3));
        solver.findModel(bound5);
        VecInt bound6 = new VecInt();
        bound6.push(4);
        bound6.push(3);
        solver.findModel(bound6);
        VecInt bound7 = new VecInt();
        bound7.push(4);
        int[] model = solver.findModel(bound7);
        Set<Integer> satisfiedModel = new HashSet<Integer>();
        for (int i : model) {
            satisfiedModel.add(new Integer(i));
        }
        satisfiedModel.contains(new Integer(4));
        satisfiedModel.contains(new Integer(1));
        satisfiedModel.contains(new Integer(2));
    }

    @Test(timeout = 30000)
    public void testSimplePhoneSATSmall_remove1_failAssert0() throws Exception, ContradictionException, TimeoutException {
        try {
            VecInt clause0 = new VecInt();
            solver.addClause(clause0);
            VecInt clause1 = new VecInt();
            clause1.push(1);
            clause1.push((-2));
            solver.addClause(clause1);
            VecInt clause2 = new VecInt();
            clause2.push(2);
            clause2.push((-1));
            solver.addClause(clause2);
            VecInt clause3 = new VecInt();
            clause3.push(3);
            clause3.push((-2));
            solver.addClause(clause3);
            VecInt clause8 = new VecInt();
            clause8.push(2);
            clause8.push((-3));
            solver.addClause(clause8);
            VecInt clause4 = new VecInt();
            clause4.push((-4));
            clause4.push(1);
            solver.addClause(clause4);
            VecInt clause5 = new VecInt();
            clause5.push((-5));
            clause5.push(4);
            solver.addClause(clause5);
            VecInt clause6 = new VecInt();
            clause6.push((-6));
            clause6.push(4);
            solver.addClause(clause6);
            VecInt clause7 = new VecInt();
            clause7.push(5);
            clause7.push(6);
            clause7.push((-4));
            solver.addAtLeast(clause6, 1);
            solver.isSatisfiable();
            VecInt bound1 = new VecInt();
            bound1.push(3);
            solver.findModel(bound1);
            VecInt bound2 = new VecInt();
            bound2.push((-3));
            solver.findModel(bound2);
            VecInt bound3 = new VecInt();
            bound3.push(5);
            bound3.push(3);
            solver.findModel(bound3);
            VecInt bound4 = new VecInt();
            bound4.push(5);
            bound4.push((-3));
            solver.findModel(bound4);
            VecInt bound5 = new VecInt();
            bound5.push(4);
            bound5.push((-3));
            solver.findModel(bound5);
            VecInt bound6 = new VecInt();
            bound6.push(4);
            bound6.push(3);
            solver.findModel(bound6);
            VecInt bound7 = new VecInt();
            bound7.push(4);
            int[] model = solver.findModel(bound7);
            Set<Integer> satisfiedModel = new HashSet<Integer>();
            for (int i : model) {
                satisfiedModel.add(new Integer(i));
            }
            satisfiedModel.contains(new Integer(4));
            satisfiedModel.contains(new Integer(1));
            satisfiedModel.contains(new Integer(2));
            org.junit.Assert.fail("testSimplePhoneSATSmall_remove1 should have thrown ContradictionException");
        } catch (ContradictionException expected) {
            Assert.assertEquals("Creating Empty clause ?", expected.getMessage());
        }
    }

    @Test(timeout = 30000)
    public void testSimplePhoneSATSmall_remove3_failAssert1() throws Exception, ContradictionException, TimeoutException {
        try {
            VecInt clause0 = new VecInt();
            clause0.push(1);
            solver.addClause(clause0);
            VecInt clause1 = new VecInt();
            clause1.push((-2));
            solver.addClause(clause1);
            VecInt clause2 = new VecInt();
            clause2.push(2);
            clause2.push((-1));
            solver.addClause(clause2);
            VecInt clause3 = new VecInt();
            clause3.push(3);
            clause3.push((-2));
            solver.addClause(clause3);
            VecInt clause8 = new VecInt();
            clause8.push(2);
            clause8.push((-3));
            solver.addClause(clause8);
            VecInt clause4 = new VecInt();
            clause4.push((-4));
            clause4.push(1);
            solver.addClause(clause4);
            VecInt clause5 = new VecInt();
            clause5.push((-5));
            clause5.push(4);
            solver.addClause(clause5);
            VecInt clause6 = new VecInt();
            clause6.push((-6));
            clause6.push(4);
            solver.addClause(clause6);
            VecInt clause7 = new VecInt();
            clause7.push(5);
            clause7.push(6);
            clause7.push((-4));
            solver.addAtLeast(clause6, 1);
            solver.isSatisfiable();
            VecInt bound1 = new VecInt();
            bound1.push(3);
            solver.findModel(bound1);
            VecInt bound2 = new VecInt();
            bound2.push((-3));
            solver.findModel(bound2);
            VecInt bound3 = new VecInt();
            bound3.push(5);
            bound3.push(3);
            solver.findModel(bound3);
            VecInt bound4 = new VecInt();
            bound4.push(5);
            bound4.push((-3));
            solver.findModel(bound4);
            VecInt bound5 = new VecInt();
            bound5.push(4);
            bound5.push((-3));
            solver.findModel(bound5);
            VecInt bound6 = new VecInt();
            bound6.push(4);
            bound6.push(3);
            solver.findModel(bound6);
            VecInt bound7 = new VecInt();
            bound7.push(4);
            int[] model = solver.findModel(bound7);
            Set<Integer> satisfiedModel = new HashSet<Integer>();
            for (int i : model) {
                satisfiedModel.add(new Integer(i));
            }
            satisfiedModel.contains(new Integer(4));
            satisfiedModel.contains(new Integer(1));
            satisfiedModel.contains(new Integer(2));
            org.junit.Assert.fail("testSimplePhoneSATSmall_remove3 should have thrown ContradictionException");
        } catch (ContradictionException expected) {
            Assert.assertEquals("Creating Empty clause ?", expected.getMessage());
        }
    }

    @Test(timeout = 30000)
    public void testSimplePhoneSATSmall_remove6_failAssert2() throws Exception, ContradictionException, TimeoutException {
        try {
            VecInt clause0 = new VecInt();
            clause0.push(1);
            solver.addClause(clause0);
            VecInt clause1 = new VecInt();
            clause1.push(1);
            clause1.push((-2));
            solver.addClause(clause1);
            VecInt clause2 = new VecInt();
            clause2.push((-1));
            solver.addClause(clause2);
            VecInt clause3 = new VecInt();
            clause3.push(3);
            clause3.push((-2));
            solver.addClause(clause3);
            VecInt clause8 = new VecInt();
            clause8.push(2);
            clause8.push((-3));
            solver.addClause(clause8);
            VecInt clause4 = new VecInt();
            clause4.push((-4));
            clause4.push(1);
            solver.addClause(clause4);
            VecInt clause5 = new VecInt();
            clause5.push((-5));
            clause5.push(4);
            solver.addClause(clause5);
            VecInt clause6 = new VecInt();
            clause6.push((-6));
            clause6.push(4);
            solver.addClause(clause6);
            VecInt clause7 = new VecInt();
            clause7.push(5);
            clause7.push(6);
            clause7.push((-4));
            solver.addAtLeast(clause6, 1);
            solver.isSatisfiable();
            VecInt bound1 = new VecInt();
            bound1.push(3);
            solver.findModel(bound1);
            VecInt bound2 = new VecInt();
            bound2.push((-3));
            solver.findModel(bound2);
            VecInt bound3 = new VecInt();
            bound3.push(5);
            bound3.push(3);
            solver.findModel(bound3);
            VecInt bound4 = new VecInt();
            bound4.push(5);
            bound4.push((-3));
            solver.findModel(bound4);
            VecInt bound5 = new VecInt();
            bound5.push(4);
            bound5.push((-3));
            solver.findModel(bound5);
            VecInt bound6 = new VecInt();
            bound6.push(4);
            bound6.push(3);
            solver.findModel(bound6);
            VecInt bound7 = new VecInt();
            bound7.push(4);
            int[] model = solver.findModel(bound7);
            Set<Integer> satisfiedModel = new HashSet<Integer>();
            for (int i : model) {
                satisfiedModel.add(new Integer(i));
            }
            satisfiedModel.contains(new Integer(4));
            satisfiedModel.contains(new Integer(1));
            satisfiedModel.contains(new Integer(2));
            org.junit.Assert.fail("testSimplePhoneSATSmall_remove6 should have thrown ContradictionException");
        } catch (ContradictionException expected) {
            Assert.assertEquals("Creating Empty clause ?", expected.getMessage());
        }
    }

    @Test(timeout = 30000)
    public void testSimplePhoneSATSmall_remove9_failAssert3() throws Exception, ContradictionException, TimeoutException {
        try {
            VecInt clause0 = new VecInt();
            clause0.push(1);
            solver.addClause(clause0);
            VecInt clause1 = new VecInt();
            clause1.push(1);
            clause1.push((-2));
            solver.addClause(clause1);
            VecInt clause2 = new VecInt();
            clause2.push(2);
            clause2.push((-1));
            solver.addClause(clause2);
            VecInt clause3 = new VecInt();
            clause3.push((-2));
            solver.addClause(clause3);
            VecInt clause8 = new VecInt();
            clause8.push(2);
            clause8.push((-3));
            solver.addClause(clause8);
            VecInt clause4 = new VecInt();
            clause4.push((-4));
            clause4.push(1);
            solver.addClause(clause4);
            VecInt clause5 = new VecInt();
            clause5.push((-5));
            clause5.push(4);
            solver.addClause(clause5);
            VecInt clause6 = new VecInt();
            clause6.push((-6));
            clause6.push(4);
            solver.addClause(clause6);
            VecInt clause7 = new VecInt();
            clause7.push(5);
            clause7.push(6);
            clause7.push((-4));
            solver.addAtLeast(clause6, 1);
            solver.isSatisfiable();
            VecInt bound1 = new VecInt();
            bound1.push(3);
            solver.findModel(bound1);
            VecInt bound2 = new VecInt();
            bound2.push((-3));
            solver.findModel(bound2);
            VecInt bound3 = new VecInt();
            bound3.push(5);
            bound3.push(3);
            solver.findModel(bound3);
            VecInt bound4 = new VecInt();
            bound4.push(5);
            bound4.push((-3));
            solver.findModel(bound4);
            VecInt bound5 = new VecInt();
            bound5.push(4);
            bound5.push((-3));
            solver.findModel(bound5);
            VecInt bound6 = new VecInt();
            bound6.push(4);
            bound6.push(3);
            solver.findModel(bound6);
            VecInt bound7 = new VecInt();
            bound7.push(4);
            int[] model = solver.findModel(bound7);
            Set<Integer> satisfiedModel = new HashSet<Integer>();
            for (int i : model) {
                satisfiedModel.add(new Integer(i));
            }
            satisfiedModel.contains(new Integer(4));
            satisfiedModel.contains(new Integer(1));
            satisfiedModel.contains(new Integer(2));
            org.junit.Assert.fail("testSimplePhoneSATSmall_remove9 should have thrown ContradictionException");
        } catch (ContradictionException expected) {
            Assert.assertEquals("Creating Empty clause ?", expected.getMessage());
        }
    }

    @Test(timeout = 30000)
    public void testSimplePhoneSATSmall_remove12_failAssert4() throws Exception, ContradictionException, TimeoutException {
        try {
            VecInt clause0 = new VecInt();
            clause0.push(1);
            solver.addClause(clause0);
            VecInt clause1 = new VecInt();
            clause1.push(1);
            clause1.push((-2));
            solver.addClause(clause1);
            VecInt clause2 = new VecInt();
            clause2.push(2);
            clause2.push((-1));
            solver.addClause(clause2);
            VecInt clause3 = new VecInt();
            clause3.push(3);
            clause3.push((-2));
            solver.addClause(clause3);
            VecInt clause8 = new VecInt();
            clause8.push((-3));
            solver.addClause(clause8);
            VecInt clause4 = new VecInt();
            clause4.push((-4));
            clause4.push(1);
            solver.addClause(clause4);
            VecInt clause5 = new VecInt();
            clause5.push((-5));
            clause5.push(4);
            solver.addClause(clause5);
            VecInt clause6 = new VecInt();
            clause6.push((-6));
            clause6.push(4);
            solver.addClause(clause6);
            VecInt clause7 = new VecInt();
            clause7.push(5);
            clause7.push(6);
            clause7.push((-4));
            solver.addAtLeast(clause6, 1);
            solver.isSatisfiable();
            VecInt bound1 = new VecInt();
            bound1.push(3);
            solver.findModel(bound1);
            VecInt bound2 = new VecInt();
            bound2.push((-3));
            solver.findModel(bound2);
            VecInt bound3 = new VecInt();
            bound3.push(5);
            bound3.push(3);
            solver.findModel(bound3);
            VecInt bound4 = new VecInt();
            bound4.push(5);
            bound4.push((-3));
            solver.findModel(bound4);
            VecInt bound5 = new VecInt();
            bound5.push(4);
            bound5.push((-3));
            solver.findModel(bound5);
            VecInt bound6 = new VecInt();
            bound6.push(4);
            bound6.push(3);
            solver.findModel(bound6);
            VecInt bound7 = new VecInt();
            bound7.push(4);
            int[] model = solver.findModel(bound7);
            Set<Integer> satisfiedModel = new HashSet<Integer>();
            for (int i : model) {
                satisfiedModel.add(new Integer(i));
            }
            satisfiedModel.contains(new Integer(4));
            satisfiedModel.contains(new Integer(1));
            satisfiedModel.contains(new Integer(2));
            org.junit.Assert.fail("testSimplePhoneSATSmall_remove12 should have thrown ContradictionException");
        } catch (ContradictionException expected) {
            Assert.assertEquals("Creating Empty clause ?", expected.getMessage());
        }
    }

    @Test(timeout = 30000)
    public void testSimplePhoneSATSmall_remove16_failAssert5() throws Exception, ContradictionException, TimeoutException {
        try {
            VecInt clause0 = new VecInt();
            clause0.push(1);
            solver.addClause(clause0);
            VecInt clause1 = new VecInt();
            clause1.push(1);
            clause1.push((-2));
            solver.addClause(clause1);
            VecInt clause2 = new VecInt();
            clause2.push(2);
            clause2.push((-1));
            solver.addClause(clause2);
            VecInt clause3 = new VecInt();
            clause3.push(3);
            clause3.push((-2));
            solver.addClause(clause3);
            VecInt clause8 = new VecInt();
            clause8.push(2);
            clause8.push((-3));
            solver.addClause(clause8);
            VecInt clause4 = new VecInt();
            clause4.push((-4));
            solver.addClause(clause4);
            VecInt clause5 = new VecInt();
            clause5.push((-5));
            clause5.push(4);
            solver.addClause(clause5);
            VecInt clause6 = new VecInt();
            clause6.push((-6));
            clause6.push(4);
            solver.addClause(clause6);
            VecInt clause7 = new VecInt();
            clause7.push(5);
            clause7.push(6);
            clause7.push((-4));
            solver.addAtLeast(clause6, 1);
            solver.isSatisfiable();
            VecInt bound1 = new VecInt();
            bound1.push(3);
            solver.findModel(bound1);
            VecInt bound2 = new VecInt();
            bound2.push((-3));
            solver.findModel(bound2);
            VecInt bound3 = new VecInt();
            bound3.push(5);
            bound3.push(3);
            solver.findModel(bound3);
            VecInt bound4 = new VecInt();
            bound4.push(5);
            bound4.push((-3));
            solver.findModel(bound4);
            VecInt bound5 = new VecInt();
            bound5.push(4);
            bound5.push((-3));
            solver.findModel(bound5);
            VecInt bound6 = new VecInt();
            bound6.push(4);
            bound6.push(3);
            solver.findModel(bound6);
            VecInt bound7 = new VecInt();
            bound7.push(4);
            int[] model = solver.findModel(bound7);
            Set<Integer> satisfiedModel = new HashSet<Integer>();
            for (int i : model) {
                satisfiedModel.add(new Integer(i));
            }
            satisfiedModel.contains(new Integer(4));
            satisfiedModel.contains(new Integer(1));
            satisfiedModel.contains(new Integer(2));
            org.junit.Assert.fail("testSimplePhoneSATSmall_remove16 should have thrown NullPointerException");
        } catch (NullPointerException expected) {
            Assert.assertEquals(null, expected.getMessage());
        }
    }

    @Test(timeout = 30000)
    public void testSimplePhoneSATSmall_remove2_remove495() throws Exception, ContradictionException, TimeoutException {
        VecInt clause0 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause0)).toString());
        Assert.assertTrue(((VecInt) (clause0)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove2__4 = clause0.push(1);
        Assert.assertEquals("1", ((VecInt) (o_testSimplePhoneSATSmall_remove2__4)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove2__4)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove2__4)).isEmpty());
        VecInt clause1 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause1)).toString());
        Assert.assertTrue(((VecInt) (clause1)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove2__8 = clause1.push(1);
        Assert.assertEquals("1", ((VecInt) (o_testSimplePhoneSATSmall_remove2__8)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove2__8)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove2__8)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove2__9 = clause1.push((-2));
        Assert.assertEquals("1,-2", ((VecInt) (o_testSimplePhoneSATSmall_remove2__9)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove2__9)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove2__9)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove2__11 = this.solver.addClause(clause1);
        Assert.assertFalse(((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove2__11)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove2__11)).getActivity())), 0.1);
        int[] array_156732309 = new int[]{2,5};
        	int[] array_987012541 = (int[])((org.sat4j.minisat.constraints.cnf.OriginalBinaryClause)o_testSimplePhoneSATSmall_remove2__11).getLits();
        	for(int ii = 0; ii <array_156732309.length; ii++) {
        		org.junit.Assert.assertEquals(array_156732309[ii], array_987012541[ii]);
        	};
        Assert.assertEquals("1[?] -2[?]", ((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove2__11)).toString());
        Assert.assertEquals(3, ((int) (((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove2__11)).hashCode())));
        int[] array_1890173107 = new int[]{2,5};
        	int[] array_11404287 = (int[])((org.sat4j.minisat.constraints.cnf.OriginalBinaryClause)o_testSimplePhoneSATSmall_remove2__11).getLits();
        	for(int ii = 0; ii <array_1890173107.length; ii++) {
        		org.junit.Assert.assertEquals(array_1890173107[ii], array_11404287[ii]);
        	};
        VecInt clause2 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause2)).toString());
        Assert.assertTrue(((VecInt) (clause2)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove2__14 = clause2.push(2);
        Assert.assertEquals("2", ((VecInt) (o_testSimplePhoneSATSmall_remove2__14)).toString());
        Assert.assertEquals(2, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove2__14)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove2__14)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove2__15 = clause2.push((-1));
        Assert.assertEquals("2,-1", ((VecInt) (o_testSimplePhoneSATSmall_remove2__15)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove2__15)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove2__15)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove2__17 = this.solver.addClause(clause2);
        Assert.assertFalse(((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove2__17)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove2__17)).getActivity())), 0.1);
        int[] array_662312966 = new int[]{3,4};
        	int[] array_1358729053 = (int[])((org.sat4j.minisat.constraints.cnf.OriginalBinaryClause)o_testSimplePhoneSATSmall_remove2__17).getLits();
        	for(int ii = 0; ii <array_662312966.length; ii++) {
        		org.junit.Assert.assertEquals(array_662312966[ii], array_1358729053[ii]);
        	};
        Assert.assertEquals("-1[?] 2[?]", ((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove2__17)).toString());
        Assert.assertEquals(3, ((int) (((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove2__17)).hashCode())));
        int[] array_1916443389 = new int[]{3,4};
        	int[] array_116830369 = (int[])((org.sat4j.minisat.constraints.cnf.OriginalBinaryClause)o_testSimplePhoneSATSmall_remove2__17).getLits();
        	for(int ii = 0; ii <array_1916443389.length; ii++) {
        		org.junit.Assert.assertEquals(array_1916443389[ii], array_116830369[ii]);
        	};
        VecInt clause3 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause3)).toString());
        Assert.assertTrue(((VecInt) (clause3)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove2__21 = clause3.push(3);
        Assert.assertEquals("3", ((VecInt) (o_testSimplePhoneSATSmall_remove2__21)).toString());
        Assert.assertEquals(3, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove2__21)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove2__21)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove2__22 = clause3.push((-2));
        Assert.assertEquals("3,-2", ((VecInt) (o_testSimplePhoneSATSmall_remove2__22)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove2__22)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove2__22)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove2__24 = this.solver.addClause(clause3);
        Assert.assertFalse(((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove2__24)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove2__24)).getActivity())), 0.1);
        int[] array_620499818 = new int[]{5,6};
        	int[] array_1416786863 = (int[])((org.sat4j.minisat.constraints.cnf.OriginalBinaryClause)o_testSimplePhoneSATSmall_remove2__24).getLits();
        	for(int ii = 0; ii <array_620499818.length; ii++) {
        		org.junit.Assert.assertEquals(array_620499818[ii], array_1416786863[ii]);
        	};
        Assert.assertEquals("-2[?] 3[?]", ((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove2__24)).toString());
        Assert.assertEquals(5, ((int) (((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove2__24)).hashCode())));
        int[] array_215630225 = new int[]{5,6};
        	int[] array_1507503842 = (int[])((org.sat4j.minisat.constraints.cnf.OriginalBinaryClause)o_testSimplePhoneSATSmall_remove2__24).getLits();
        	for(int ii = 0; ii <array_215630225.length; ii++) {
        		org.junit.Assert.assertEquals(array_215630225[ii], array_1507503842[ii]);
        	};
        VecInt clause8 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause8)).toString());
        Assert.assertTrue(((VecInt) (clause8)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove2__27 = clause8.push(2);
        Assert.assertEquals("2", ((VecInt) (o_testSimplePhoneSATSmall_remove2__27)).toString());
        Assert.assertEquals(2, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove2__27)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove2__27)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove2__28 = clause8.push((-3));
        Assert.assertEquals("2,-3", ((VecInt) (o_testSimplePhoneSATSmall_remove2__28)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove2__28)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove2__28)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove2__30 = this.solver.addClause(clause8);
        Assert.assertFalse(((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove2__30)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove2__30)).getActivity())), 0.1);
        int[] array_1488859737 = new int[]{4,7};
        	int[] array_660147378 = (int[])((org.sat4j.minisat.constraints.cnf.OriginalBinaryClause)o_testSimplePhoneSATSmall_remove2__30).getLits();
        	for(int ii = 0; ii <array_1488859737.length; ii++) {
        		org.junit.Assert.assertEquals(array_1488859737[ii], array_660147378[ii]);
        	};
        Assert.assertEquals("2[?] -3[?]", ((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove2__30)).toString());
        Assert.assertEquals(5, ((int) (((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove2__30)).hashCode())));
        int[] array_399465337 = new int[]{4,7};
        	int[] array_429322718 = (int[])((org.sat4j.minisat.constraints.cnf.OriginalBinaryClause)o_testSimplePhoneSATSmall_remove2__30).getLits();
        	for(int ii = 0; ii <array_399465337.length; ii++) {
        		org.junit.Assert.assertEquals(array_399465337[ii], array_429322718[ii]);
        	};
        VecInt clause4 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause4)).toString());
        Assert.assertTrue(((VecInt) (clause4)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove2__34 = clause4.push((-4));
        Assert.assertEquals("-4", ((VecInt) (o_testSimplePhoneSATSmall_remove2__34)).toString());
        Assert.assertEquals(-4, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove2__34)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove2__34)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove2__36 = clause4.push(1);
        Assert.assertEquals("-4,1", ((VecInt) (o_testSimplePhoneSATSmall_remove2__36)).toString());
        Assert.assertEquals(-1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove2__36)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove2__36)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove2__37 = this.solver.addClause(clause4);
        Assert.assertFalse(((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove2__37)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove2__37)).getActivity())), 0.1);
        int[] array_253353865 = new int[]{2,9};
        	int[] array_369828323 = (int[])((org.sat4j.minisat.constraints.cnf.OriginalBinaryClause)o_testSimplePhoneSATSmall_remove2__37).getLits();
        	for(int ii = 0; ii <array_253353865.length; ii++) {
        		org.junit.Assert.assertEquals(array_253353865[ii], array_369828323[ii]);
        	};
        Assert.assertEquals("1[?] -4[?]", ((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove2__37)).toString());
        Assert.assertEquals(5, ((int) (((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove2__37)).hashCode())));
        int[] array_123192235 = new int[]{2,9};
        	int[] array_528171170 = (int[])((org.sat4j.minisat.constraints.cnf.OriginalBinaryClause)o_testSimplePhoneSATSmall_remove2__37).getLits();
        	for(int ii = 0; ii <array_123192235.length; ii++) {
        		org.junit.Assert.assertEquals(array_123192235[ii], array_528171170[ii]);
        	};
        VecInt clause5 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause5)).toString());
        Assert.assertTrue(((VecInt) (clause5)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove2__41 = clause5.push((-5));
        Assert.assertEquals("-5", ((VecInt) (o_testSimplePhoneSATSmall_remove2__41)).toString());
        Assert.assertEquals(-5, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove2__41)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove2__41)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove2__43 = clause5.push(4);
        Assert.assertEquals("-5,4", ((VecInt) (o_testSimplePhoneSATSmall_remove2__43)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove2__43)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove2__43)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove2__44 = this.solver.addClause(clause5);
        Assert.assertFalse(((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove2__44)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove2__44)).getActivity())), 0.1);
        int[] array_12042372 = new int[]{8,11};
        	int[] array_1816104876 = (int[])((org.sat4j.minisat.constraints.cnf.OriginalBinaryClause)o_testSimplePhoneSATSmall_remove2__44).getLits();
        	for(int ii = 0; ii <array_12042372.length; ii++) {
        		org.junit.Assert.assertEquals(array_12042372[ii], array_1816104876[ii]);
        	};
        Assert.assertEquals("4[?] -5[?]", ((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove2__44)).toString());
        Assert.assertEquals(9, ((int) (((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove2__44)).hashCode())));
        int[] array_2007119514 = new int[]{8,11};
        	int[] array_1743183821 = (int[])((org.sat4j.minisat.constraints.cnf.OriginalBinaryClause)o_testSimplePhoneSATSmall_remove2__44).getLits();
        	for(int ii = 0; ii <array_2007119514.length; ii++) {
        		org.junit.Assert.assertEquals(array_2007119514[ii], array_1743183821[ii]);
        	};
        VecInt clause6 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause6)).toString());
        Assert.assertTrue(((VecInt) (clause6)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove2__47 = clause6.push((-6));
        Assert.assertEquals("-6", ((VecInt) (o_testSimplePhoneSATSmall_remove2__47)).toString());
        Assert.assertEquals(-6, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove2__47)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove2__47)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove2__49 = clause6.push(4);
        Assert.assertEquals("-6,4", ((VecInt) (o_testSimplePhoneSATSmall_remove2__49)).toString());
        Assert.assertEquals(-1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove2__49)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove2__49)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove2__50 = this.solver.addClause(clause6);
        Assert.assertFalse(((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove2__50)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove2__50)).getActivity())), 0.1);
        int[] array_1120601571 = new int[]{8,13};
        	int[] array_1663853611 = (int[])((org.sat4j.minisat.constraints.cnf.OriginalBinaryClause)o_testSimplePhoneSATSmall_remove2__50).getLits();
        	for(int ii = 0; ii <array_1120601571.length; ii++) {
        		org.junit.Assert.assertEquals(array_1120601571[ii], array_1663853611[ii]);
        	};
        Assert.assertEquals("4[?] -6[?]", ((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove2__50)).toString());
        Assert.assertEquals(10, ((int) (((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove2__50)).hashCode())));
        int[] array_1503854603 = new int[]{8,13};
        	int[] array_1866619758 = (int[])((org.sat4j.minisat.constraints.cnf.OriginalBinaryClause)o_testSimplePhoneSATSmall_remove2__50).getLits();
        	for(int ii = 0; ii <array_1503854603.length; ii++) {
        		org.junit.Assert.assertEquals(array_1503854603[ii], array_1866619758[ii]);
        	};
        VecInt clause7 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause7)).toString());
        Assert.assertTrue(((VecInt) (clause7)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove2__53 = clause7.push(5);
        Assert.assertEquals("5", ((VecInt) (o_testSimplePhoneSATSmall_remove2__53)).toString());
        Assert.assertEquals(5, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove2__53)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove2__53)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove2__54 = clause7.push(6);
        Assert.assertEquals("5,6", ((VecInt) (o_testSimplePhoneSATSmall_remove2__54)).toString());
        Assert.assertEquals(5, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove2__54)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove2__54)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove2__55 = clause7.push((-4));
        Assert.assertEquals("5,6,-4", ((VecInt) (o_testSimplePhoneSATSmall_remove2__55)).toString());
        Assert.assertEquals(2, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove2__55)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove2__55)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove2__57 = this.solver.addAtLeast(clause6, 1);
        Assert.assertFalse(((OriginalWLClause) (o_testSimplePhoneSATSmall_remove2__57)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((OriginalWLClause) (o_testSimplePhoneSATSmall_remove2__57)).getActivity())), 0.1);
        int[] array_591417951 = new int[]{8,13};
        	int[] array_1120127527 = (int[])((org.sat4j.minisat.constraints.cnf.OriginalWLClause)o_testSimplePhoneSATSmall_remove2__57).getLits();
        	for(int ii = 0; ii <array_591417951.length; ii++) {
        		org.junit.Assert.assertEquals(array_591417951[ii], array_1120127527[ii]);
        	};
        Assert.assertEquals("4[?] -6[?] ", ((OriginalWLClause) (o_testSimplePhoneSATSmall_remove2__57)).toString());
        Assert.assertEquals(10, ((int) (((OriginalWLClause) (o_testSimplePhoneSATSmall_remove2__57)).hashCode())));
        int[] array_1043498900 = new int[]{8,13};
        	int[] array_1706630214 = (int[])((org.sat4j.minisat.constraints.cnf.OriginalWLClause)o_testSimplePhoneSATSmall_remove2__57).getLits();
        	for(int ii = 0; ii <array_1043498900.length; ii++) {
        		org.junit.Assert.assertEquals(array_1043498900[ii], array_1706630214[ii]);
        	};
        this.solver.isSatisfiable();
        VecInt bound1 = new VecInt();
        Assert.assertEquals("", ((VecInt) (bound1)).toString());
        Assert.assertTrue(((VecInt) (bound1)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove2__61 = bound1.push(3);
        Assert.assertEquals("3", ((VecInt) (o_testSimplePhoneSATSmall_remove2__61)).toString());
        Assert.assertEquals(3, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove2__61)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove2__61)).isEmpty());
        int[] o_testSimplePhoneSATSmall_remove2__62 = this.solver.findModel(bound1);
        int[] array_1576904691 = new int[]{1,2,3,-4,-5,-6};
        	int[] array_1362946453 = (int[])o_testSimplePhoneSATSmall_remove2__62;
        	for(int ii = 0; ii <array_1576904691.length; ii++) {
        		org.junit.Assert.assertEquals(array_1576904691[ii], array_1362946453[ii]);
        	};
        VecInt bound2 = new VecInt();
        Assert.assertEquals("", ((VecInt) (bound2)).toString());
        Assert.assertTrue(((VecInt) (bound2)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove2__65 = bound2.push((-3));
        Assert.assertEquals("-3", ((VecInt) (o_testSimplePhoneSATSmall_remove2__65)).toString());
        Assert.assertEquals(-3, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove2__65)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove2__65)).isEmpty());
        int[] o_testSimplePhoneSATSmall_remove2__67 = this.solver.findModel(bound2);
        int[] array_668687851 = new int[]{-1,-2,-3,-4,-5,-6};
        	int[] array_1038895465 = (int[])o_testSimplePhoneSATSmall_remove2__67;
        	for(int ii = 0; ii <array_668687851.length; ii++) {
        		org.junit.Assert.assertEquals(array_668687851[ii], array_1038895465[ii]);
        	};
        VecInt bound3 = new VecInt();
        Assert.assertEquals("", ((VecInt) (bound3)).toString());
        Assert.assertTrue(((VecInt) (bound3)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove2__70 = bound3.push(5);
        Assert.assertEquals("5", ((VecInt) (o_testSimplePhoneSATSmall_remove2__70)).toString());
        Assert.assertEquals(5, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove2__70)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove2__70)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove2__71 = bound3.push(3);
        Assert.assertEquals("5,3", ((VecInt) (o_testSimplePhoneSATSmall_remove2__71)).toString());
        Assert.assertEquals(4, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove2__71)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove2__71)).isEmpty());
        int[] o_testSimplePhoneSATSmall_remove2__72 = this.solver.findModel(bound3);
        int[] array_1275732480 = new int[]{1,2,3,4,5,-6};
        	int[] array_1197870923 = (int[])o_testSimplePhoneSATSmall_remove2__72;
        	for(int ii = 0; ii <array_1275732480.length; ii++) {
        		org.junit.Assert.assertEquals(array_1275732480[ii], array_1197870923[ii]);
        	};
        VecInt bound4 = new VecInt();
        Assert.assertEquals("", ((VecInt) (bound4)).toString());
        Assert.assertTrue(((VecInt) (bound4)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove2__75 = bound4.push(5);
        Assert.assertEquals("5", ((VecInt) (o_testSimplePhoneSATSmall_remove2__75)).toString());
        Assert.assertEquals(5, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove2__75)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove2__75)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove2__76 = bound4.push((-3));
        Assert.assertEquals("5,-3", ((VecInt) (o_testSimplePhoneSATSmall_remove2__76)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove2__76)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove2__76)).isEmpty());
        this.solver.findModel(bound4);
        VecInt bound5 = new VecInt();
        bound5.push(4);
        bound5.push((-3));
        this.solver.findModel(bound5);
        VecInt bound6 = new VecInt();
        bound6.push(4);
        this.solver.findModel(bound6);
        VecInt bound7 = new VecInt();
        bound7.push(4);
        int[] model = this.solver.findModel(bound7);
        Set<Integer> satisfiedModel = new HashSet<Integer>();
        for (int i : model) {
            satisfiedModel.add(new Integer(i));
        }
        satisfiedModel.contains(new Integer(4));
        satisfiedModel.contains(new Integer(1));
        satisfiedModel.contains(new Integer(2));
    }

    @Test(timeout = 30000)
    public void testSimplePhoneSATSmall_remove2_remove455() throws Exception, ContradictionException, TimeoutException {
        VecInt clause0 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause0)).toString());
        Assert.assertTrue(((VecInt) (clause0)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove2__4 = clause0.push(1);
        Assert.assertEquals("1", ((VecInt) (o_testSimplePhoneSATSmall_remove2__4)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove2__4)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove2__4)).isEmpty());
        VecInt clause1 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause1)).toString());
        Assert.assertTrue(((VecInt) (clause1)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove2__8 = clause1.push(1);
        Assert.assertEquals("1", ((VecInt) (o_testSimplePhoneSATSmall_remove2__8)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove2__8)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove2__8)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove2__9 = clause1.push((-2));
        Assert.assertEquals("1,-2", ((VecInt) (o_testSimplePhoneSATSmall_remove2__9)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove2__9)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove2__9)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove2__11 = this.solver.addClause(clause1);
        Assert.assertFalse(((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove2__11)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove2__11)).getActivity())), 0.1);
        int[] array_1281021855 = new int[]{2,5};
        	int[] array_55488140 = (int[])((org.sat4j.minisat.constraints.cnf.OriginalBinaryClause)o_testSimplePhoneSATSmall_remove2__11).getLits();
        	for(int ii = 0; ii <array_1281021855.length; ii++) {
        		org.junit.Assert.assertEquals(array_1281021855[ii], array_55488140[ii]);
        	};
        Assert.assertEquals("1[?] -2[?]", ((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove2__11)).toString());
        Assert.assertEquals(3, ((int) (((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove2__11)).hashCode())));
        int[] array_1890173107 = new int[]{2,5};
        	int[] array_11404287 = (int[])((org.sat4j.minisat.constraints.cnf.OriginalBinaryClause)o_testSimplePhoneSATSmall_remove2__11).getLits();
        	for(int ii = 0; ii <array_1890173107.length; ii++) {
        		org.junit.Assert.assertEquals(array_1890173107[ii], array_11404287[ii]);
        	};
        VecInt clause2 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause2)).toString());
        Assert.assertTrue(((VecInt) (clause2)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove2__14 = clause2.push(2);
        Assert.assertEquals("2", ((VecInt) (o_testSimplePhoneSATSmall_remove2__14)).toString());
        Assert.assertEquals(2, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove2__14)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove2__14)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove2__15 = clause2.push((-1));
        Assert.assertEquals("2,-1", ((VecInt) (o_testSimplePhoneSATSmall_remove2__15)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove2__15)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove2__15)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove2__17 = this.solver.addClause(clause2);
        Assert.assertFalse(((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove2__17)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove2__17)).getActivity())), 0.1);
        int[] array_626781088 = new int[]{3,4};
        	int[] array_278377876 = (int[])((org.sat4j.minisat.constraints.cnf.OriginalBinaryClause)o_testSimplePhoneSATSmall_remove2__17).getLits();
        	for(int ii = 0; ii <array_626781088.length; ii++) {
        		org.junit.Assert.assertEquals(array_626781088[ii], array_278377876[ii]);
        	};
        Assert.assertEquals("-1[?] 2[?]", ((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove2__17)).toString());
        Assert.assertEquals(3, ((int) (((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove2__17)).hashCode())));
        int[] array_1916443389 = new int[]{3,4};
        	int[] array_116830369 = (int[])((org.sat4j.minisat.constraints.cnf.OriginalBinaryClause)o_testSimplePhoneSATSmall_remove2__17).getLits();
        	for(int ii = 0; ii <array_1916443389.length; ii++) {
        		org.junit.Assert.assertEquals(array_1916443389[ii], array_116830369[ii]);
        	};
        VecInt clause3 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause3)).toString());
        Assert.assertTrue(((VecInt) (clause3)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove2__21 = clause3.push(3);
        Assert.assertEquals("3", ((VecInt) (o_testSimplePhoneSATSmall_remove2__21)).toString());
        Assert.assertEquals(3, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove2__21)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove2__21)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove2__22 = clause3.push((-2));
        Assert.assertEquals("3,-2", ((VecInt) (o_testSimplePhoneSATSmall_remove2__22)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove2__22)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove2__22)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove2__24 = this.solver.addClause(clause3);
        Assert.assertFalse(((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove2__24)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove2__24)).getActivity())), 0.1);
        int[] array_1974961709 = new int[]{5,6};
        	int[] array_384921724 = (int[])((org.sat4j.minisat.constraints.cnf.OriginalBinaryClause)o_testSimplePhoneSATSmall_remove2__24).getLits();
        	for(int ii = 0; ii <array_1974961709.length; ii++) {
        		org.junit.Assert.assertEquals(array_1974961709[ii], array_384921724[ii]);
        	};
        Assert.assertEquals("-2[?] 3[?]", ((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove2__24)).toString());
        Assert.assertEquals(5, ((int) (((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove2__24)).hashCode())));
        int[] array_215630225 = new int[]{5,6};
        	int[] array_1507503842 = (int[])((org.sat4j.minisat.constraints.cnf.OriginalBinaryClause)o_testSimplePhoneSATSmall_remove2__24).getLits();
        	for(int ii = 0; ii <array_215630225.length; ii++) {
        		org.junit.Assert.assertEquals(array_215630225[ii], array_1507503842[ii]);
        	};
        VecInt clause8 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause8)).toString());
        Assert.assertTrue(((VecInt) (clause8)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove2__27 = clause8.push(2);
        Assert.assertEquals("2", ((VecInt) (o_testSimplePhoneSATSmall_remove2__27)).toString());
        Assert.assertEquals(2, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove2__27)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove2__27)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove2__28 = clause8.push((-3));
        Assert.assertEquals("2,-3", ((VecInt) (o_testSimplePhoneSATSmall_remove2__28)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove2__28)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove2__28)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove2__30 = this.solver.addClause(clause8);
        Assert.assertFalse(((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove2__30)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove2__30)).getActivity())), 0.1);
        int[] array_1987896797 = new int[]{4,7};
        	int[] array_1662530941 = (int[])((org.sat4j.minisat.constraints.cnf.OriginalBinaryClause)o_testSimplePhoneSATSmall_remove2__30).getLits();
        	for(int ii = 0; ii <array_1987896797.length; ii++) {
        		org.junit.Assert.assertEquals(array_1987896797[ii], array_1662530941[ii]);
        	};
        Assert.assertEquals("2[?] -3[?]", ((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove2__30)).toString());
        Assert.assertEquals(5, ((int) (((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove2__30)).hashCode())));
        int[] array_399465337 = new int[]{4,7};
        	int[] array_429322718 = (int[])((org.sat4j.minisat.constraints.cnf.OriginalBinaryClause)o_testSimplePhoneSATSmall_remove2__30).getLits();
        	for(int ii = 0; ii <array_399465337.length; ii++) {
        		org.junit.Assert.assertEquals(array_399465337[ii], array_429322718[ii]);
        	};
        VecInt clause4 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause4)).toString());
        Assert.assertTrue(((VecInt) (clause4)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove2__34 = clause4.push((-4));
        Assert.assertEquals("-4", ((VecInt) (o_testSimplePhoneSATSmall_remove2__34)).toString());
        Assert.assertEquals(-4, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove2__34)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove2__34)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove2__36 = clause4.push(1);
        Assert.assertEquals("-4,1", ((VecInt) (o_testSimplePhoneSATSmall_remove2__36)).toString());
        Assert.assertEquals(-1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove2__36)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove2__36)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove2__37 = this.solver.addClause(clause4);
        Assert.assertFalse(((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove2__37)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove2__37)).getActivity())), 0.1);
        int[] array_972509826 = new int[]{2,9};
        	int[] array_643907857 = (int[])((org.sat4j.minisat.constraints.cnf.OriginalBinaryClause)o_testSimplePhoneSATSmall_remove2__37).getLits();
        	for(int ii = 0; ii <array_972509826.length; ii++) {
        		org.junit.Assert.assertEquals(array_972509826[ii], array_643907857[ii]);
        	};
        Assert.assertEquals("1[?] -4[?]", ((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove2__37)).toString());
        Assert.assertEquals(5, ((int) (((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove2__37)).hashCode())));
        int[] array_123192235 = new int[]{2,9};
        	int[] array_528171170 = (int[])((org.sat4j.minisat.constraints.cnf.OriginalBinaryClause)o_testSimplePhoneSATSmall_remove2__37).getLits();
        	for(int ii = 0; ii <array_123192235.length; ii++) {
        		org.junit.Assert.assertEquals(array_123192235[ii], array_528171170[ii]);
        	};
        VecInt clause5 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause5)).toString());
        Assert.assertTrue(((VecInt) (clause5)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove2__41 = clause5.push((-5));
        Assert.assertEquals("-5", ((VecInt) (o_testSimplePhoneSATSmall_remove2__41)).toString());
        Assert.assertEquals(-5, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove2__41)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove2__41)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove2__43 = clause5.push(4);
        Assert.assertEquals("-5,4", ((VecInt) (o_testSimplePhoneSATSmall_remove2__43)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove2__43)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove2__43)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove2__44 = this.solver.addClause(clause5);
        Assert.assertFalse(((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove2__44)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove2__44)).getActivity())), 0.1);
        int[] array_1345460158 = new int[]{8,11};
        	int[] array_387626152 = (int[])((org.sat4j.minisat.constraints.cnf.OriginalBinaryClause)o_testSimplePhoneSATSmall_remove2__44).getLits();
        	for(int ii = 0; ii <array_1345460158.length; ii++) {
        		org.junit.Assert.assertEquals(array_1345460158[ii], array_387626152[ii]);
        	};
        Assert.assertEquals("4[?] -5[?]", ((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove2__44)).toString());
        Assert.assertEquals(9, ((int) (((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove2__44)).hashCode())));
        int[] array_2007119514 = new int[]{8,11};
        	int[] array_1743183821 = (int[])((org.sat4j.minisat.constraints.cnf.OriginalBinaryClause)o_testSimplePhoneSATSmall_remove2__44).getLits();
        	for(int ii = 0; ii <array_2007119514.length; ii++) {
        		org.junit.Assert.assertEquals(array_2007119514[ii], array_1743183821[ii]);
        	};
        VecInt clause6 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause6)).toString());
        Assert.assertTrue(((VecInt) (clause6)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove2__47 = clause6.push((-6));
        Assert.assertEquals("-6", ((VecInt) (o_testSimplePhoneSATSmall_remove2__47)).toString());
        Assert.assertEquals(-6, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove2__47)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove2__47)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove2__49 = clause6.push(4);
        Assert.assertEquals("-6,4", ((VecInt) (o_testSimplePhoneSATSmall_remove2__49)).toString());
        Assert.assertEquals(-1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove2__49)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove2__49)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove2__50 = this.solver.addClause(clause6);
        Assert.assertFalse(((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove2__50)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove2__50)).getActivity())), 0.1);
        int[] array_885048381 = new int[]{8,13};
        	int[] array_1858485617 = (int[])((org.sat4j.minisat.constraints.cnf.OriginalBinaryClause)o_testSimplePhoneSATSmall_remove2__50).getLits();
        	for(int ii = 0; ii <array_885048381.length; ii++) {
        		org.junit.Assert.assertEquals(array_885048381[ii], array_1858485617[ii]);
        	};
        Assert.assertEquals("4[?] -6[?]", ((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove2__50)).toString());
        Assert.assertEquals(10, ((int) (((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove2__50)).hashCode())));
        int[] array_1503854603 = new int[]{8,13};
        	int[] array_1866619758 = (int[])((org.sat4j.minisat.constraints.cnf.OriginalBinaryClause)o_testSimplePhoneSATSmall_remove2__50).getLits();
        	for(int ii = 0; ii <array_1503854603.length; ii++) {
        		org.junit.Assert.assertEquals(array_1503854603[ii], array_1866619758[ii]);
        	};
        VecInt clause7 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause7)).toString());
        Assert.assertTrue(((VecInt) (clause7)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove2__53 = clause7.push(5);
        Assert.assertEquals("5", ((VecInt) (o_testSimplePhoneSATSmall_remove2__53)).toString());
        Assert.assertEquals(5, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove2__53)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove2__53)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove2__54 = clause7.push(6);
        Assert.assertEquals("5,6", ((VecInt) (o_testSimplePhoneSATSmall_remove2__54)).toString());
        Assert.assertEquals(5, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove2__54)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove2__54)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove2__55 = clause7.push((-4));
        Assert.assertEquals("5,6,-4", ((VecInt) (o_testSimplePhoneSATSmall_remove2__55)).toString());
        Assert.assertEquals(2, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove2__55)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove2__55)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove2__57 = this.solver.addAtLeast(clause6, 1);
        Assert.assertFalse(((OriginalWLClause) (o_testSimplePhoneSATSmall_remove2__57)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((OriginalWLClause) (o_testSimplePhoneSATSmall_remove2__57)).getActivity())), 0.1);
        int[] array_325140373 = new int[]{8,13};
        	int[] array_1177665243 = (int[])((org.sat4j.minisat.constraints.cnf.OriginalWLClause)o_testSimplePhoneSATSmall_remove2__57).getLits();
        	for(int ii = 0; ii <array_325140373.length; ii++) {
        		org.junit.Assert.assertEquals(array_325140373[ii], array_1177665243[ii]);
        	};
        Assert.assertEquals("4[?] -6[?] ", ((OriginalWLClause) (o_testSimplePhoneSATSmall_remove2__57)).toString());
        Assert.assertEquals(10, ((int) (((OriginalWLClause) (o_testSimplePhoneSATSmall_remove2__57)).hashCode())));
        int[] array_1043498900 = new int[]{8,13};
        	int[] array_1706630214 = (int[])((org.sat4j.minisat.constraints.cnf.OriginalWLClause)o_testSimplePhoneSATSmall_remove2__57).getLits();
        	for(int ii = 0; ii <array_1043498900.length; ii++) {
        		org.junit.Assert.assertEquals(array_1043498900[ii], array_1706630214[ii]);
        	};
        VecInt bound1 = new VecInt();
        Assert.assertEquals("", ((VecInt) (bound1)).toString());
        Assert.assertTrue(((VecInt) (bound1)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove2__61 = bound1.push(3);
        Assert.assertEquals("3", ((VecInt) (o_testSimplePhoneSATSmall_remove2__61)).toString());
        Assert.assertEquals(3, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove2__61)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove2__61)).isEmpty());
        int[] o_testSimplePhoneSATSmall_remove2__62 = this.solver.findModel(bound1);
        int[] array_1576904691 = new int[]{1,2,3,-4,-5,-6};
        	int[] array_1362946453 = (int[])o_testSimplePhoneSATSmall_remove2__62;
        	for(int ii = 0; ii <array_1576904691.length; ii++) {
        		org.junit.Assert.assertEquals(array_1576904691[ii], array_1362946453[ii]);
        	};
        VecInt bound2 = new VecInt();
        Assert.assertEquals("", ((VecInt) (bound2)).toString());
        Assert.assertTrue(((VecInt) (bound2)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove2__65 = bound2.push((-3));
        Assert.assertEquals("-3", ((VecInt) (o_testSimplePhoneSATSmall_remove2__65)).toString());
        Assert.assertEquals(-3, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove2__65)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove2__65)).isEmpty());
        int[] o_testSimplePhoneSATSmall_remove2__67 = this.solver.findModel(bound2);
        int[] array_668687851 = new int[]{-1,-2,-3,-4,-5,-6};
        	int[] array_1038895465 = (int[])o_testSimplePhoneSATSmall_remove2__67;
        	for(int ii = 0; ii <array_668687851.length; ii++) {
        		org.junit.Assert.assertEquals(array_668687851[ii], array_1038895465[ii]);
        	};
        VecInt bound3 = new VecInt();
        Assert.assertEquals("", ((VecInt) (bound3)).toString());
        Assert.assertTrue(((VecInt) (bound3)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove2__70 = bound3.push(5);
        Assert.assertEquals("5", ((VecInt) (o_testSimplePhoneSATSmall_remove2__70)).toString());
        Assert.assertEquals(5, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove2__70)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove2__70)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove2__71 = bound3.push(3);
        Assert.assertEquals("5,3", ((VecInt) (o_testSimplePhoneSATSmall_remove2__71)).toString());
        Assert.assertEquals(4, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove2__71)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove2__71)).isEmpty());
        int[] o_testSimplePhoneSATSmall_remove2__72 = this.solver.findModel(bound3);
        int[] array_1275732480 = new int[]{1,2,3,4,5,-6};
        	int[] array_1197870923 = (int[])o_testSimplePhoneSATSmall_remove2__72;
        	for(int ii = 0; ii <array_1275732480.length; ii++) {
        		org.junit.Assert.assertEquals(array_1275732480[ii], array_1197870923[ii]);
        	};
        VecInt bound4 = new VecInt();
        Assert.assertEquals("", ((VecInt) (bound4)).toString());
        Assert.assertTrue(((VecInt) (bound4)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove2__75 = bound4.push(5);
        Assert.assertEquals("5", ((VecInt) (o_testSimplePhoneSATSmall_remove2__75)).toString());
        Assert.assertEquals(5, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove2__75)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove2__75)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove2__76 = bound4.push((-3));
        Assert.assertEquals("5,-3", ((VecInt) (o_testSimplePhoneSATSmall_remove2__76)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove2__76)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove2__76)).isEmpty());
        this.solver.findModel(bound4);
        VecInt bound5 = new VecInt();
        bound5.push(4);
        bound5.push((-3));
        this.solver.findModel(bound5);
        VecInt bound6 = new VecInt();
        bound6.push(4);
        bound6.push(3);
        this.solver.findModel(bound6);
        VecInt bound7 = new VecInt();
        bound7.push(4);
        int[] model = this.solver.findModel(bound7);
        Set<Integer> satisfiedModel = new HashSet<Integer>();
        for (int i : model) {
            satisfiedModel.add(new Integer(i));
        }
        satisfiedModel.contains(new Integer(4));
        satisfiedModel.contains(new Integer(1));
        satisfiedModel.contains(new Integer(2));
    }

    @Test(timeout = 30000)
    public void testSimplePhoneSATSmall_remove5_remove378() throws Exception, ContradictionException, TimeoutException {
        VecInt clause0 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause0)).toString());
        Assert.assertTrue(((VecInt) (clause0)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__4 = clause0.push(1);
        Assert.assertEquals("1", ((VecInt) (o_testSimplePhoneSATSmall_remove5__4)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__4)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__4)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove5__5 = this.solver.addClause(clause0);
        Assert.assertTrue(((UnitClause) (o_testSimplePhoneSATSmall_remove5__5)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((UnitClause) (o_testSimplePhoneSATSmall_remove5__5)).getActivity())), 0.1);
        Assert.assertEquals("1", ((UnitClause) (o_testSimplePhoneSATSmall_remove5__5)).toString());
        VecInt clause1 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause1)).toString());
        Assert.assertTrue(((VecInt) (clause1)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__9 = clause1.push(1);
        Assert.assertEquals("1", ((VecInt) (o_testSimplePhoneSATSmall_remove5__9)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__9)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__9)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__10 = clause1.push((-2));
        Assert.assertEquals("1,-2", ((VecInt) (o_testSimplePhoneSATSmall_remove5__10)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__10)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__10)).isEmpty());
        VecInt clause2 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause2)).toString());
        Assert.assertTrue(((VecInt) (clause2)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__14 = clause2.push(2);
        Assert.assertEquals("2", ((VecInt) (o_testSimplePhoneSATSmall_remove5__14)).toString());
        Assert.assertEquals(2, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__14)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__14)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__15 = clause2.push((-1));
        Assert.assertEquals("2,-1", ((VecInt) (o_testSimplePhoneSATSmall_remove5__15)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__15)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__15)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove5__17 = this.solver.addClause(clause2);
        Assert.assertTrue(((UnitClause) (o_testSimplePhoneSATSmall_remove5__17)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((UnitClause) (o_testSimplePhoneSATSmall_remove5__17)).getActivity())), 0.1);
        Assert.assertEquals("2", ((UnitClause) (o_testSimplePhoneSATSmall_remove5__17)).toString());
        VecInt clause3 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause3)).toString());
        Assert.assertTrue(((VecInt) (clause3)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__21 = clause3.push(3);
        Assert.assertEquals("3", ((VecInt) (o_testSimplePhoneSATSmall_remove5__21)).toString());
        Assert.assertEquals(3, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__21)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__21)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__22 = clause3.push((-2));
        Assert.assertEquals("3,-2", ((VecInt) (o_testSimplePhoneSATSmall_remove5__22)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__22)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__22)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove5__24 = this.solver.addClause(clause3);
        Assert.assertTrue(((UnitClause) (o_testSimplePhoneSATSmall_remove5__24)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((UnitClause) (o_testSimplePhoneSATSmall_remove5__24)).getActivity())), 0.1);
        Assert.assertEquals("3", ((UnitClause) (o_testSimplePhoneSATSmall_remove5__24)).toString());
        VecInt clause8 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause8)).toString());
        Assert.assertTrue(((VecInt) (clause8)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__27 = clause8.push(2);
        Assert.assertEquals("2", ((VecInt) (o_testSimplePhoneSATSmall_remove5__27)).toString());
        Assert.assertEquals(2, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__27)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__27)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__28 = clause8.push((-3));
        Assert.assertEquals("2,-3", ((VecInt) (o_testSimplePhoneSATSmall_remove5__28)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__28)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__28)).isEmpty());
        this.solver.addClause(clause8);
        VecInt clause4 = new VecInt();
        clause4.push((-4));
        clause4.push(1);
        this.solver.addClause(clause4);
        VecInt clause5 = new VecInt();
        clause5.push((-5));
        clause5.push(4);
        this.solver.addClause(clause5);
        VecInt clause6 = new VecInt();
        clause6.push((-6));
        clause6.push(4);
        this.solver.addClause(clause6);
        VecInt clause7 = new VecInt();
        clause7.push(5);
        clause7.push(6);
        clause7.push((-4));
        this.solver.addAtLeast(clause6, 1);
        this.solver.isSatisfiable();
        VecInt bound1 = new VecInt();
        bound1.push(3);
        this.solver.findModel(bound1);
        VecInt bound2 = new VecInt();
        bound2.push((-3));
        this.solver.findModel(bound2);
        VecInt bound3 = new VecInt();
        bound3.push(5);
        this.solver.findModel(bound3);
        VecInt bound4 = new VecInt();
        bound4.push(5);
        bound4.push((-3));
        this.solver.findModel(bound4);
        VecInt bound5 = new VecInt();
        bound5.push(4);
        bound5.push((-3));
        this.solver.findModel(bound5);
        VecInt bound6 = new VecInt();
        bound6.push(4);
        bound6.push(3);
        this.solver.findModel(bound6);
        VecInt bound7 = new VecInt();
        bound7.push(4);
        int[] model = this.solver.findModel(bound7);
        Set<Integer> satisfiedModel = new HashSet<Integer>();
        for (int i : model) {
            satisfiedModel.add(new Integer(i));
        }
        satisfiedModel.contains(new Integer(4));
        satisfiedModel.contains(new Integer(1));
        satisfiedModel.contains(new Integer(2));
    }

    @Test(timeout = 30000)
    public void testSimplePhoneSATSmall_remove5_remove377() throws Exception, ContradictionException, TimeoutException {
        VecInt clause0 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause0)).toString());
        Assert.assertTrue(((VecInt) (clause0)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__4 = clause0.push(1);
        Assert.assertEquals("1", ((VecInt) (o_testSimplePhoneSATSmall_remove5__4)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__4)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__4)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove5__5 = this.solver.addClause(clause0);
        Assert.assertTrue(((UnitClause) (o_testSimplePhoneSATSmall_remove5__5)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((UnitClause) (o_testSimplePhoneSATSmall_remove5__5)).getActivity())), 0.1);
        Assert.assertEquals("1", ((UnitClause) (o_testSimplePhoneSATSmall_remove5__5)).toString());
        VecInt clause1 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause1)).toString());
        Assert.assertTrue(((VecInt) (clause1)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__9 = clause1.push(1);
        Assert.assertEquals("1", ((VecInt) (o_testSimplePhoneSATSmall_remove5__9)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__9)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__9)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__10 = clause1.push((-2));
        Assert.assertEquals("1,-2", ((VecInt) (o_testSimplePhoneSATSmall_remove5__10)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__10)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__10)).isEmpty());
        VecInt clause2 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause2)).toString());
        Assert.assertTrue(((VecInt) (clause2)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__14 = clause2.push(2);
        Assert.assertEquals("2", ((VecInt) (o_testSimplePhoneSATSmall_remove5__14)).toString());
        Assert.assertEquals(2, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__14)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__14)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__15 = clause2.push((-1));
        Assert.assertEquals("2,-1", ((VecInt) (o_testSimplePhoneSATSmall_remove5__15)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__15)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__15)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove5__17 = this.solver.addClause(clause2);
        Assert.assertTrue(((UnitClause) (o_testSimplePhoneSATSmall_remove5__17)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((UnitClause) (o_testSimplePhoneSATSmall_remove5__17)).getActivity())), 0.1);
        Assert.assertEquals("2", ((UnitClause) (o_testSimplePhoneSATSmall_remove5__17)).toString());
        VecInt clause3 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause3)).toString());
        Assert.assertTrue(((VecInt) (clause3)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__21 = clause3.push(3);
        Assert.assertEquals("3", ((VecInt) (o_testSimplePhoneSATSmall_remove5__21)).toString());
        Assert.assertEquals(3, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__21)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__21)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__22 = clause3.push((-2));
        Assert.assertEquals("3,-2", ((VecInt) (o_testSimplePhoneSATSmall_remove5__22)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__22)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__22)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove5__24 = this.solver.addClause(clause3);
        Assert.assertTrue(((UnitClause) (o_testSimplePhoneSATSmall_remove5__24)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((UnitClause) (o_testSimplePhoneSATSmall_remove5__24)).getActivity())), 0.1);
        Assert.assertEquals("3", ((UnitClause) (o_testSimplePhoneSATSmall_remove5__24)).toString());
        VecInt clause8 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause8)).toString());
        Assert.assertTrue(((VecInt) (clause8)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__27 = clause8.push(2);
        Assert.assertEquals("2", ((VecInt) (o_testSimplePhoneSATSmall_remove5__27)).toString());
        Assert.assertEquals(2, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__27)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__27)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__28 = clause8.push((-3));
        Assert.assertEquals("2,-3", ((VecInt) (o_testSimplePhoneSATSmall_remove5__28)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__28)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__28)).isEmpty());
        this.solver.addClause(clause8);
        VecInt clause4 = new VecInt();
        clause4.push((-4));
        clause4.push(1);
        this.solver.addClause(clause4);
        VecInt clause5 = new VecInt();
        clause5.push((-5));
        clause5.push(4);
        this.solver.addClause(clause5);
        VecInt clause6 = new VecInt();
        clause6.push((-6));
        clause6.push(4);
        this.solver.addClause(clause6);
        VecInt clause7 = new VecInt();
        clause7.push(5);
        clause7.push(6);
        clause7.push((-4));
        this.solver.addAtLeast(clause6, 1);
        this.solver.isSatisfiable();
        VecInt bound1 = new VecInt();
        bound1.push(3);
        this.solver.findModel(bound1);
        VecInt bound2 = new VecInt();
        bound2.push((-3));
        this.solver.findModel(bound2);
        VecInt bound3 = new VecInt();
        bound3.push(3);
        this.solver.findModel(bound3);
        VecInt bound4 = new VecInt();
        bound4.push(5);
        bound4.push((-3));
        this.solver.findModel(bound4);
        VecInt bound5 = new VecInt();
        bound5.push(4);
        bound5.push((-3));
        this.solver.findModel(bound5);
        VecInt bound6 = new VecInt();
        bound6.push(4);
        bound6.push(3);
        this.solver.findModel(bound6);
        VecInt bound7 = new VecInt();
        bound7.push(4);
        int[] model = this.solver.findModel(bound7);
        Set<Integer> satisfiedModel = new HashSet<Integer>();
        for (int i : model) {
            satisfiedModel.add(new Integer(i));
        }
        satisfiedModel.contains(new Integer(4));
        satisfiedModel.contains(new Integer(1));
        satisfiedModel.contains(new Integer(2));
    }

    @Test(timeout = 30000)
    public void testSimplePhoneSATSmall_remove5_remove386() throws Exception, ContradictionException, TimeoutException {
        VecInt clause0 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause0)).toString());
        Assert.assertTrue(((VecInt) (clause0)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__4 = clause0.push(1);
        Assert.assertEquals("1", ((VecInt) (o_testSimplePhoneSATSmall_remove5__4)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__4)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__4)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove5__5 = this.solver.addClause(clause0);
        Assert.assertTrue(((UnitClause) (o_testSimplePhoneSATSmall_remove5__5)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((UnitClause) (o_testSimplePhoneSATSmall_remove5__5)).getActivity())), 0.1);
        Assert.assertEquals("1", ((UnitClause) (o_testSimplePhoneSATSmall_remove5__5)).toString());
        VecInt clause1 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause1)).toString());
        Assert.assertTrue(((VecInt) (clause1)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__9 = clause1.push(1);
        Assert.assertEquals("1", ((VecInt) (o_testSimplePhoneSATSmall_remove5__9)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__9)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__9)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__10 = clause1.push((-2));
        Assert.assertEquals("1,-2", ((VecInt) (o_testSimplePhoneSATSmall_remove5__10)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__10)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__10)).isEmpty());
        VecInt clause2 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause2)).toString());
        Assert.assertTrue(((VecInt) (clause2)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__14 = clause2.push(2);
        Assert.assertEquals("2", ((VecInt) (o_testSimplePhoneSATSmall_remove5__14)).toString());
        Assert.assertEquals(2, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__14)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__14)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__15 = clause2.push((-1));
        Assert.assertEquals("2,-1", ((VecInt) (o_testSimplePhoneSATSmall_remove5__15)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__15)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__15)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove5__17 = this.solver.addClause(clause2);
        Assert.assertTrue(((UnitClause) (o_testSimplePhoneSATSmall_remove5__17)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((UnitClause) (o_testSimplePhoneSATSmall_remove5__17)).getActivity())), 0.1);
        Assert.assertEquals("2", ((UnitClause) (o_testSimplePhoneSATSmall_remove5__17)).toString());
        VecInt clause3 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause3)).toString());
        Assert.assertTrue(((VecInt) (clause3)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__21 = clause3.push(3);
        Assert.assertEquals("3", ((VecInt) (o_testSimplePhoneSATSmall_remove5__21)).toString());
        Assert.assertEquals(3, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__21)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__21)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__22 = clause3.push((-2));
        Assert.assertEquals("3,-2", ((VecInt) (o_testSimplePhoneSATSmall_remove5__22)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__22)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__22)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove5__24 = this.solver.addClause(clause3);
        Assert.assertTrue(((UnitClause) (o_testSimplePhoneSATSmall_remove5__24)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((UnitClause) (o_testSimplePhoneSATSmall_remove5__24)).getActivity())), 0.1);
        Assert.assertEquals("3", ((UnitClause) (o_testSimplePhoneSATSmall_remove5__24)).toString());
        VecInt clause8 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause8)).toString());
        Assert.assertTrue(((VecInt) (clause8)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__27 = clause8.push(2);
        Assert.assertEquals("2", ((VecInt) (o_testSimplePhoneSATSmall_remove5__27)).toString());
        Assert.assertEquals(2, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__27)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__27)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__28 = clause8.push((-3));
        Assert.assertEquals("2,-3", ((VecInt) (o_testSimplePhoneSATSmall_remove5__28)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__28)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__28)).isEmpty());
        this.solver.addClause(clause8);
        VecInt clause4 = new VecInt();
        clause4.push((-4));
        clause4.push(1);
        this.solver.addClause(clause4);
        VecInt clause5 = new VecInt();
        clause5.push((-5));
        clause5.push(4);
        this.solver.addClause(clause5);
        VecInt clause6 = new VecInt();
        clause6.push((-6));
        clause6.push(4);
        this.solver.addClause(clause6);
        VecInt clause7 = new VecInt();
        clause7.push(5);
        clause7.push(6);
        clause7.push((-4));
        this.solver.addAtLeast(clause6, 1);
        this.solver.isSatisfiable();
        VecInt bound1 = new VecInt();
        bound1.push(3);
        this.solver.findModel(bound1);
        VecInt bound2 = new VecInt();
        bound2.push((-3));
        this.solver.findModel(bound2);
        VecInt bound3 = new VecInt();
        bound3.push(5);
        bound3.push(3);
        this.solver.findModel(bound3);
        VecInt bound4 = new VecInt();
        bound4.push((-3));
        this.solver.findModel(bound4);
        VecInt bound5 = new VecInt();
        bound5.push(4);
        bound5.push((-3));
        this.solver.findModel(bound5);
        VecInt bound6 = new VecInt();
        bound6.push(4);
        bound6.push(3);
        this.solver.findModel(bound6);
        VecInt bound7 = new VecInt();
        bound7.push(4);
        int[] model = this.solver.findModel(bound7);
        Set<Integer> satisfiedModel = new HashSet<Integer>();
        for (int i : model) {
            satisfiedModel.add(new Integer(i));
        }
        satisfiedModel.contains(new Integer(4));
        satisfiedModel.contains(new Integer(1));
        satisfiedModel.contains(new Integer(2));
    }

    @Test(timeout = 30000)
    public void testSimplePhoneSATSmall_remove5_remove401() throws Exception, ContradictionException, TimeoutException {
        VecInt clause0 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause0)).toString());
        Assert.assertTrue(((VecInt) (clause0)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__4 = clause0.push(1);
        Assert.assertEquals("1", ((VecInt) (o_testSimplePhoneSATSmall_remove5__4)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__4)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__4)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove5__5 = this.solver.addClause(clause0);
        Assert.assertTrue(((UnitClause) (o_testSimplePhoneSATSmall_remove5__5)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((UnitClause) (o_testSimplePhoneSATSmall_remove5__5)).getActivity())), 0.1);
        Assert.assertEquals("1", ((UnitClause) (o_testSimplePhoneSATSmall_remove5__5)).toString());
        VecInt clause1 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause1)).toString());
        Assert.assertTrue(((VecInt) (clause1)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__9 = clause1.push(1);
        Assert.assertEquals("1", ((VecInt) (o_testSimplePhoneSATSmall_remove5__9)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__9)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__9)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__10 = clause1.push((-2));
        Assert.assertEquals("1,-2", ((VecInt) (o_testSimplePhoneSATSmall_remove5__10)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__10)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__10)).isEmpty());
        VecInt clause2 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause2)).toString());
        Assert.assertTrue(((VecInt) (clause2)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__14 = clause2.push(2);
        Assert.assertEquals("2", ((VecInt) (o_testSimplePhoneSATSmall_remove5__14)).toString());
        Assert.assertEquals(2, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__14)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__14)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__15 = clause2.push((-1));
        Assert.assertEquals("2,-1", ((VecInt) (o_testSimplePhoneSATSmall_remove5__15)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__15)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__15)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove5__17 = this.solver.addClause(clause2);
        Assert.assertTrue(((UnitClause) (o_testSimplePhoneSATSmall_remove5__17)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((UnitClause) (o_testSimplePhoneSATSmall_remove5__17)).getActivity())), 0.1);
        Assert.assertEquals("2", ((UnitClause) (o_testSimplePhoneSATSmall_remove5__17)).toString());
        VecInt clause3 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause3)).toString());
        Assert.assertTrue(((VecInt) (clause3)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__21 = clause3.push(3);
        Assert.assertEquals("3", ((VecInt) (o_testSimplePhoneSATSmall_remove5__21)).toString());
        Assert.assertEquals(3, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__21)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__21)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__22 = clause3.push((-2));
        Assert.assertEquals("3,-2", ((VecInt) (o_testSimplePhoneSATSmall_remove5__22)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__22)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__22)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove5__24 = this.solver.addClause(clause3);
        Assert.assertTrue(((UnitClause) (o_testSimplePhoneSATSmall_remove5__24)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((UnitClause) (o_testSimplePhoneSATSmall_remove5__24)).getActivity())), 0.1);
        Assert.assertEquals("3", ((UnitClause) (o_testSimplePhoneSATSmall_remove5__24)).toString());
        VecInt clause8 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause8)).toString());
        Assert.assertTrue(((VecInt) (clause8)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__27 = clause8.push(2);
        Assert.assertEquals("2", ((VecInt) (o_testSimplePhoneSATSmall_remove5__27)).toString());
        Assert.assertEquals(2, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__27)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__27)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__28 = clause8.push((-3));
        Assert.assertEquals("2,-3", ((VecInt) (o_testSimplePhoneSATSmall_remove5__28)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__28)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__28)).isEmpty());
        this.solver.addClause(clause8);
        VecInt clause4 = new VecInt();
        clause4.push((-4));
        clause4.push(1);
        this.solver.addClause(clause4);
        VecInt clause5 = new VecInt();
        clause5.push((-5));
        clause5.push(4);
        this.solver.addClause(clause5);
        VecInt clause6 = new VecInt();
        clause6.push((-6));
        clause6.push(4);
        this.solver.addClause(clause6);
        VecInt clause7 = new VecInt();
        clause7.push(5);
        clause7.push(6);
        clause7.push((-4));
        this.solver.addAtLeast(clause6, 1);
        this.solver.isSatisfiable();
        VecInt bound1 = new VecInt();
        bound1.push(3);
        this.solver.findModel(bound1);
        VecInt bound2 = new VecInt();
        bound2.push((-3));
        this.solver.findModel(bound2);
        VecInt bound3 = new VecInt();
        bound3.push(5);
        bound3.push(3);
        this.solver.findModel(bound3);
        VecInt bound4 = new VecInt();
        bound4.push(5);
        bound4.push((-3));
        this.solver.findModel(bound4);
        VecInt bound5 = new VecInt();
        bound5.push((-3));
        this.solver.findModel(bound5);
        VecInt bound6 = new VecInt();
        bound6.push(4);
        bound6.push(3);
        this.solver.findModel(bound6);
        VecInt bound7 = new VecInt();
        bound7.push(4);
        int[] model = this.solver.findModel(bound7);
        Set<Integer> satisfiedModel = new HashSet<Integer>();
        for (int i : model) {
            satisfiedModel.add(new Integer(i));
        }
        satisfiedModel.contains(new Integer(4));
        satisfiedModel.contains(new Integer(1));
        satisfiedModel.contains(new Integer(2));
    }

    @Test(timeout = 30000)
    public void testSimplePhoneSATSmall_remove5_remove334() throws Exception, ContradictionException, TimeoutException {
        VecInt clause0 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause0)).toString());
        Assert.assertTrue(((VecInt) (clause0)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__4 = clause0.push(1);
        Assert.assertEquals("1", ((VecInt) (o_testSimplePhoneSATSmall_remove5__4)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__4)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__4)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove5__5 = this.solver.addClause(clause0);
        Assert.assertTrue(((UnitClause) (o_testSimplePhoneSATSmall_remove5__5)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((UnitClause) (o_testSimplePhoneSATSmall_remove5__5)).getActivity())), 0.1);
        Assert.assertEquals("1", ((UnitClause) (o_testSimplePhoneSATSmall_remove5__5)).toString());
        VecInt clause1 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause1)).toString());
        Assert.assertTrue(((VecInt) (clause1)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__9 = clause1.push(1);
        Assert.assertEquals("1", ((VecInt) (o_testSimplePhoneSATSmall_remove5__9)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__9)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__9)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__10 = clause1.push((-2));
        Assert.assertEquals("1,-2", ((VecInt) (o_testSimplePhoneSATSmall_remove5__10)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__10)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__10)).isEmpty());
        VecInt clause2 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause2)).toString());
        Assert.assertTrue(((VecInt) (clause2)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__14 = clause2.push(2);
        Assert.assertEquals("2", ((VecInt) (o_testSimplePhoneSATSmall_remove5__14)).toString());
        Assert.assertEquals(2, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__14)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__14)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__15 = clause2.push((-1));
        Assert.assertEquals("2,-1", ((VecInt) (o_testSimplePhoneSATSmall_remove5__15)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__15)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__15)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove5__17 = this.solver.addClause(clause2);
        Assert.assertTrue(((UnitClause) (o_testSimplePhoneSATSmall_remove5__17)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((UnitClause) (o_testSimplePhoneSATSmall_remove5__17)).getActivity())), 0.1);
        Assert.assertEquals("2", ((UnitClause) (o_testSimplePhoneSATSmall_remove5__17)).toString());
        VecInt clause3 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause3)).toString());
        Assert.assertTrue(((VecInt) (clause3)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__21 = clause3.push(3);
        Assert.assertEquals("3", ((VecInt) (o_testSimplePhoneSATSmall_remove5__21)).toString());
        Assert.assertEquals(3, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__21)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__21)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__22 = clause3.push((-2));
        Assert.assertEquals("3,-2", ((VecInt) (o_testSimplePhoneSATSmall_remove5__22)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__22)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__22)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove5__24 = this.solver.addClause(clause3);
        Assert.assertTrue(((UnitClause) (o_testSimplePhoneSATSmall_remove5__24)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((UnitClause) (o_testSimplePhoneSATSmall_remove5__24)).getActivity())), 0.1);
        Assert.assertEquals("3", ((UnitClause) (o_testSimplePhoneSATSmall_remove5__24)).toString());
        VecInt clause8 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause8)).toString());
        Assert.assertTrue(((VecInt) (clause8)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__27 = clause8.push(2);
        Assert.assertEquals("2", ((VecInt) (o_testSimplePhoneSATSmall_remove5__27)).toString());
        Assert.assertEquals(2, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__27)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__27)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__28 = clause8.push((-3));
        Assert.assertEquals("2,-3", ((VecInt) (o_testSimplePhoneSATSmall_remove5__28)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__28)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__28)).isEmpty());
        this.solver.addClause(clause8);
        VecInt clause4 = new VecInt();
        clause4.push((-4));
        clause4.push(1);
        this.solver.addClause(clause4);
        VecInt clause5 = new VecInt();
        clause5.push((-5));
        clause5.push(4);
        this.solver.addClause(clause5);
        VecInt clause6 = new VecInt();
        clause6.push((-6));
        this.solver.addClause(clause6);
        VecInt clause7 = new VecInt();
        clause7.push(5);
        clause7.push(6);
        clause7.push((-4));
        this.solver.addAtLeast(clause6, 1);
        this.solver.isSatisfiable();
        VecInt bound1 = new VecInt();
        bound1.push(3);
        this.solver.findModel(bound1);
        VecInt bound2 = new VecInt();
        bound2.push((-3));
        this.solver.findModel(bound2);
        VecInt bound3 = new VecInt();
        bound3.push(5);
        bound3.push(3);
        this.solver.findModel(bound3);
        VecInt bound4 = new VecInt();
        bound4.push(5);
        bound4.push((-3));
        this.solver.findModel(bound4);
        VecInt bound5 = new VecInt();
        bound5.push(4);
        bound5.push((-3));
        this.solver.findModel(bound5);
        VecInt bound6 = new VecInt();
        bound6.push(4);
        bound6.push(3);
        this.solver.findModel(bound6);
        VecInt bound7 = new VecInt();
        bound7.push(4);
        int[] model = this.solver.findModel(bound7);
        Set<Integer> satisfiedModel = new HashSet<Integer>();
        for (int i : model) {
            satisfiedModel.add(new Integer(i));
        }
        satisfiedModel.contains(new Integer(4));
        satisfiedModel.contains(new Integer(1));
        satisfiedModel.contains(new Integer(2));
    }

    @Test(timeout = 30000)
    public void testSimplePhoneSATSmall_remove5_remove321() throws Exception, ContradictionException, TimeoutException {
        VecInt clause0 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause0)).toString());
        Assert.assertTrue(((VecInt) (clause0)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__4 = clause0.push(1);
        Assert.assertEquals("1", ((VecInt) (o_testSimplePhoneSATSmall_remove5__4)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__4)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__4)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove5__5 = this.solver.addClause(clause0);
        Assert.assertTrue(((UnitClause) (o_testSimplePhoneSATSmall_remove5__5)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((UnitClause) (o_testSimplePhoneSATSmall_remove5__5)).getActivity())), 0.1);
        Assert.assertEquals("1", ((UnitClause) (o_testSimplePhoneSATSmall_remove5__5)).toString());
        VecInt clause1 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause1)).toString());
        Assert.assertTrue(((VecInt) (clause1)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__9 = clause1.push(1);
        Assert.assertEquals("1", ((VecInt) (o_testSimplePhoneSATSmall_remove5__9)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__9)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__9)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__10 = clause1.push((-2));
        Assert.assertEquals("1,-2", ((VecInt) (o_testSimplePhoneSATSmall_remove5__10)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__10)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__10)).isEmpty());
        VecInt clause2 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause2)).toString());
        Assert.assertTrue(((VecInt) (clause2)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__14 = clause2.push(2);
        Assert.assertEquals("2", ((VecInt) (o_testSimplePhoneSATSmall_remove5__14)).toString());
        Assert.assertEquals(2, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__14)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__14)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__15 = clause2.push((-1));
        Assert.assertEquals("2,-1", ((VecInt) (o_testSimplePhoneSATSmall_remove5__15)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__15)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__15)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove5__17 = this.solver.addClause(clause2);
        Assert.assertTrue(((UnitClause) (o_testSimplePhoneSATSmall_remove5__17)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((UnitClause) (o_testSimplePhoneSATSmall_remove5__17)).getActivity())), 0.1);
        Assert.assertEquals("2", ((UnitClause) (o_testSimplePhoneSATSmall_remove5__17)).toString());
        VecInt clause3 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause3)).toString());
        Assert.assertTrue(((VecInt) (clause3)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__21 = clause3.push(3);
        Assert.assertEquals("3", ((VecInt) (o_testSimplePhoneSATSmall_remove5__21)).toString());
        Assert.assertEquals(3, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__21)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__21)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__22 = clause3.push((-2));
        Assert.assertEquals("3,-2", ((VecInt) (o_testSimplePhoneSATSmall_remove5__22)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__22)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__22)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove5__24 = this.solver.addClause(clause3);
        Assert.assertTrue(((UnitClause) (o_testSimplePhoneSATSmall_remove5__24)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((UnitClause) (o_testSimplePhoneSATSmall_remove5__24)).getActivity())), 0.1);
        Assert.assertEquals("3", ((UnitClause) (o_testSimplePhoneSATSmall_remove5__24)).toString());
        VecInt clause8 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause8)).toString());
        Assert.assertTrue(((VecInt) (clause8)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__27 = clause8.push(2);
        Assert.assertEquals("2", ((VecInt) (o_testSimplePhoneSATSmall_remove5__27)).toString());
        Assert.assertEquals(2, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__27)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__27)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__28 = clause8.push((-3));
        Assert.assertEquals("2,-3", ((VecInt) (o_testSimplePhoneSATSmall_remove5__28)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__28)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__28)).isEmpty());
        this.solver.addClause(clause8);
        VecInt clause4 = new VecInt();
        clause4.push((-4));
        clause4.push(1);
        this.solver.addClause(clause4);
        VecInt clause5 = new VecInt();
        clause5.push((-5));
        this.solver.addClause(clause5);
        VecInt clause6 = new VecInt();
        clause6.push((-6));
        clause6.push(4);
        this.solver.addClause(clause6);
        VecInt clause7 = new VecInt();
        clause7.push(5);
        clause7.push(6);
        clause7.push((-4));
        this.solver.addAtLeast(clause6, 1);
        this.solver.isSatisfiable();
        VecInt bound1 = new VecInt();
        bound1.push(3);
        this.solver.findModel(bound1);
        VecInt bound2 = new VecInt();
        bound2.push((-3));
        this.solver.findModel(bound2);
        VecInt bound3 = new VecInt();
        bound3.push(5);
        bound3.push(3);
        this.solver.findModel(bound3);
        VecInt bound4 = new VecInt();
        bound4.push(5);
        bound4.push((-3));
        this.solver.findModel(bound4);
        VecInt bound5 = new VecInt();
        bound5.push(4);
        bound5.push((-3));
        this.solver.findModel(bound5);
        VecInt bound6 = new VecInt();
        bound6.push(4);
        bound6.push(3);
        this.solver.findModel(bound6);
        VecInt bound7 = new VecInt();
        bound7.push(4);
        int[] model = this.solver.findModel(bound7);
        Set<Integer> satisfiedModel = new HashSet<Integer>();
        for (int i : model) {
            satisfiedModel.add(new Integer(i));
        }
        satisfiedModel.contains(new Integer(4));
        satisfiedModel.contains(new Integer(1));
        satisfiedModel.contains(new Integer(2));
    }

    @Test(timeout = 30000)
    public void testSimplePhoneSATSmall_remove5_remove373() throws Exception, ContradictionException, TimeoutException {
        VecInt clause0 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause0)).toString());
        Assert.assertTrue(((VecInt) (clause0)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__4 = clause0.push(1);
        Assert.assertEquals("1", ((VecInt) (o_testSimplePhoneSATSmall_remove5__4)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__4)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__4)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove5__5 = this.solver.addClause(clause0);
        Assert.assertTrue(((UnitClause) (o_testSimplePhoneSATSmall_remove5__5)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((UnitClause) (o_testSimplePhoneSATSmall_remove5__5)).getActivity())), 0.1);
        Assert.assertEquals("1", ((UnitClause) (o_testSimplePhoneSATSmall_remove5__5)).toString());
        VecInt clause1 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause1)).toString());
        Assert.assertTrue(((VecInt) (clause1)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__9 = clause1.push(1);
        Assert.assertEquals("1", ((VecInt) (o_testSimplePhoneSATSmall_remove5__9)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__9)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__9)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__10 = clause1.push((-2));
        Assert.assertEquals("1,-2", ((VecInt) (o_testSimplePhoneSATSmall_remove5__10)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__10)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__10)).isEmpty());
        VecInt clause2 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause2)).toString());
        Assert.assertTrue(((VecInt) (clause2)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__14 = clause2.push(2);
        Assert.assertEquals("2", ((VecInt) (o_testSimplePhoneSATSmall_remove5__14)).toString());
        Assert.assertEquals(2, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__14)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__14)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__15 = clause2.push((-1));
        Assert.assertEquals("2,-1", ((VecInt) (o_testSimplePhoneSATSmall_remove5__15)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__15)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__15)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove5__17 = this.solver.addClause(clause2);
        Assert.assertTrue(((UnitClause) (o_testSimplePhoneSATSmall_remove5__17)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((UnitClause) (o_testSimplePhoneSATSmall_remove5__17)).getActivity())), 0.1);
        Assert.assertEquals("2", ((UnitClause) (o_testSimplePhoneSATSmall_remove5__17)).toString());
        VecInt clause3 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause3)).toString());
        Assert.assertTrue(((VecInt) (clause3)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__21 = clause3.push(3);
        Assert.assertEquals("3", ((VecInt) (o_testSimplePhoneSATSmall_remove5__21)).toString());
        Assert.assertEquals(3, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__21)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__21)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__22 = clause3.push((-2));
        Assert.assertEquals("3,-2", ((VecInt) (o_testSimplePhoneSATSmall_remove5__22)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__22)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__22)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove5__24 = this.solver.addClause(clause3);
        Assert.assertTrue(((UnitClause) (o_testSimplePhoneSATSmall_remove5__24)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((UnitClause) (o_testSimplePhoneSATSmall_remove5__24)).getActivity())), 0.1);
        Assert.assertEquals("3", ((UnitClause) (o_testSimplePhoneSATSmall_remove5__24)).toString());
        VecInt clause8 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause8)).toString());
        Assert.assertTrue(((VecInt) (clause8)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__27 = clause8.push(2);
        Assert.assertEquals("2", ((VecInt) (o_testSimplePhoneSATSmall_remove5__27)).toString());
        Assert.assertEquals(2, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__27)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__27)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__28 = clause8.push((-3));
        Assert.assertEquals("2,-3", ((VecInt) (o_testSimplePhoneSATSmall_remove5__28)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__28)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__28)).isEmpty());
        this.solver.addClause(clause8);
        VecInt clause4 = new VecInt();
        clause4.push((-4));
        clause4.push(1);
        this.solver.addClause(clause4);
        VecInt clause5 = new VecInt();
        clause5.push((-5));
        clause5.push(4);
        this.solver.addClause(clause5);
        VecInt clause6 = new VecInt();
        clause6.push((-6));
        clause6.push(4);
        this.solver.addClause(clause6);
        VecInt clause7 = new VecInt();
        clause7.push(5);
        clause7.push(6);
        clause7.push((-4));
        this.solver.addAtLeast(clause6, 1);
        this.solver.isSatisfiable();
        VecInt bound1 = new VecInt();
        bound1.push(3);
        this.solver.findModel(bound1);
        VecInt bound2 = new VecInt();
        this.solver.findModel(bound2);
        VecInt bound3 = new VecInt();
        bound3.push(5);
        bound3.push(3);
        this.solver.findModel(bound3);
        VecInt bound4 = new VecInt();
        bound4.push(5);
        bound4.push((-3));
        this.solver.findModel(bound4);
        VecInt bound5 = new VecInt();
        bound5.push(4);
        bound5.push((-3));
        this.solver.findModel(bound5);
        VecInt bound6 = new VecInt();
        bound6.push(4);
        bound6.push(3);
        this.solver.findModel(bound6);
        VecInt bound7 = new VecInt();
        bound7.push(4);
        int[] model = this.solver.findModel(bound7);
        Set<Integer> satisfiedModel = new HashSet<Integer>();
        for (int i : model) {
            satisfiedModel.add(new Integer(i));
        }
        satisfiedModel.contains(new Integer(4));
        satisfiedModel.contains(new Integer(1));
        satisfiedModel.contains(new Integer(2));
    }

    @Test(timeout = 30000)
    public void testSimplePhoneSATSmall_remove5_remove316() throws Exception, ContradictionException, TimeoutException {
        VecInt clause0 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause0)).toString());
        Assert.assertTrue(((VecInt) (clause0)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__4 = clause0.push(1);
        Assert.assertEquals("1", ((VecInt) (o_testSimplePhoneSATSmall_remove5__4)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__4)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__4)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove5__5 = this.solver.addClause(clause0);
        Assert.assertTrue(((UnitClause) (o_testSimplePhoneSATSmall_remove5__5)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((UnitClause) (o_testSimplePhoneSATSmall_remove5__5)).getActivity())), 0.1);
        Assert.assertEquals("1", ((UnitClause) (o_testSimplePhoneSATSmall_remove5__5)).toString());
        VecInt clause1 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause1)).toString());
        Assert.assertTrue(((VecInt) (clause1)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__9 = clause1.push(1);
        Assert.assertEquals("1", ((VecInt) (o_testSimplePhoneSATSmall_remove5__9)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__9)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__9)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__10 = clause1.push((-2));
        Assert.assertEquals("1,-2", ((VecInt) (o_testSimplePhoneSATSmall_remove5__10)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__10)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__10)).isEmpty());
        VecInt clause2 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause2)).toString());
        Assert.assertTrue(((VecInt) (clause2)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__14 = clause2.push(2);
        Assert.assertEquals("2", ((VecInt) (o_testSimplePhoneSATSmall_remove5__14)).toString());
        Assert.assertEquals(2, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__14)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__14)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__15 = clause2.push((-1));
        Assert.assertEquals("2,-1", ((VecInt) (o_testSimplePhoneSATSmall_remove5__15)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__15)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__15)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove5__17 = this.solver.addClause(clause2);
        Assert.assertTrue(((UnitClause) (o_testSimplePhoneSATSmall_remove5__17)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((UnitClause) (o_testSimplePhoneSATSmall_remove5__17)).getActivity())), 0.1);
        Assert.assertEquals("2", ((UnitClause) (o_testSimplePhoneSATSmall_remove5__17)).toString());
        VecInt clause3 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause3)).toString());
        Assert.assertTrue(((VecInt) (clause3)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__21 = clause3.push(3);
        Assert.assertEquals("3", ((VecInt) (o_testSimplePhoneSATSmall_remove5__21)).toString());
        Assert.assertEquals(3, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__21)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__21)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__22 = clause3.push((-2));
        Assert.assertEquals("3,-2", ((VecInt) (o_testSimplePhoneSATSmall_remove5__22)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__22)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__22)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove5__24 = this.solver.addClause(clause3);
        Assert.assertTrue(((UnitClause) (o_testSimplePhoneSATSmall_remove5__24)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((UnitClause) (o_testSimplePhoneSATSmall_remove5__24)).getActivity())), 0.1);
        Assert.assertEquals("3", ((UnitClause) (o_testSimplePhoneSATSmall_remove5__24)).toString());
        VecInt clause8 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause8)).toString());
        Assert.assertTrue(((VecInt) (clause8)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__27 = clause8.push(2);
        Assert.assertEquals("2", ((VecInt) (o_testSimplePhoneSATSmall_remove5__27)).toString());
        Assert.assertEquals(2, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__27)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__27)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__28 = clause8.push((-3));
        Assert.assertEquals("2,-3", ((VecInt) (o_testSimplePhoneSATSmall_remove5__28)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__28)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__28)).isEmpty());
        this.solver.addClause(clause8);
        VecInt clause4 = new VecInt();
        clause4.push((-4));
        clause4.push(1);
        this.solver.addClause(clause4);
        VecInt clause5 = new VecInt();
        clause5.push(4);
        this.solver.addClause(clause5);
        VecInt clause6 = new VecInt();
        clause6.push((-6));
        clause6.push(4);
        this.solver.addClause(clause6);
        VecInt clause7 = new VecInt();
        clause7.push(5);
        clause7.push(6);
        clause7.push((-4));
        this.solver.addAtLeast(clause6, 1);
        this.solver.isSatisfiable();
        VecInt bound1 = new VecInt();
        bound1.push(3);
        this.solver.findModel(bound1);
        VecInt bound2 = new VecInt();
        bound2.push((-3));
        this.solver.findModel(bound2);
        VecInt bound3 = new VecInt();
        bound3.push(5);
        bound3.push(3);
        this.solver.findModel(bound3);
        VecInt bound4 = new VecInt();
        bound4.push(5);
        bound4.push((-3));
        this.solver.findModel(bound4);
        VecInt bound5 = new VecInt();
        bound5.push(4);
        bound5.push((-3));
        this.solver.findModel(bound5);
        VecInt bound6 = new VecInt();
        bound6.push(4);
        bound6.push(3);
        this.solver.findModel(bound6);
        VecInt bound7 = new VecInt();
        bound7.push(4);
        int[] model = this.solver.findModel(bound7);
        Set<Integer> satisfiedModel = new HashSet<Integer>();
        for (int i : model) {
            satisfiedModel.add(new Integer(i));
        }
        satisfiedModel.contains(new Integer(4));
        satisfiedModel.contains(new Integer(1));
        satisfiedModel.contains(new Integer(2));
    }

    @Test(timeout = 30000)
    public void testSimplePhoneSATSmall_remove5_remove330() throws Exception, ContradictionException, TimeoutException {
        VecInt clause0 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause0)).toString());
        Assert.assertTrue(((VecInt) (clause0)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__4 = clause0.push(1);
        Assert.assertEquals("1", ((VecInt) (o_testSimplePhoneSATSmall_remove5__4)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__4)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__4)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove5__5 = this.solver.addClause(clause0);
        Assert.assertTrue(((UnitClause) (o_testSimplePhoneSATSmall_remove5__5)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((UnitClause) (o_testSimplePhoneSATSmall_remove5__5)).getActivity())), 0.1);
        Assert.assertEquals("1", ((UnitClause) (o_testSimplePhoneSATSmall_remove5__5)).toString());
        VecInt clause1 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause1)).toString());
        Assert.assertTrue(((VecInt) (clause1)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__9 = clause1.push(1);
        Assert.assertEquals("1", ((VecInt) (o_testSimplePhoneSATSmall_remove5__9)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__9)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__9)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__10 = clause1.push((-2));
        Assert.assertEquals("1,-2", ((VecInt) (o_testSimplePhoneSATSmall_remove5__10)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__10)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__10)).isEmpty());
        VecInt clause2 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause2)).toString());
        Assert.assertTrue(((VecInt) (clause2)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__14 = clause2.push(2);
        Assert.assertEquals("2", ((VecInt) (o_testSimplePhoneSATSmall_remove5__14)).toString());
        Assert.assertEquals(2, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__14)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__14)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__15 = clause2.push((-1));
        Assert.assertEquals("2,-1", ((VecInt) (o_testSimplePhoneSATSmall_remove5__15)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__15)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__15)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove5__17 = this.solver.addClause(clause2);
        Assert.assertTrue(((UnitClause) (o_testSimplePhoneSATSmall_remove5__17)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((UnitClause) (o_testSimplePhoneSATSmall_remove5__17)).getActivity())), 0.1);
        Assert.assertEquals("2", ((UnitClause) (o_testSimplePhoneSATSmall_remove5__17)).toString());
        VecInt clause3 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause3)).toString());
        Assert.assertTrue(((VecInt) (clause3)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__21 = clause3.push(3);
        Assert.assertEquals("3", ((VecInt) (o_testSimplePhoneSATSmall_remove5__21)).toString());
        Assert.assertEquals(3, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__21)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__21)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__22 = clause3.push((-2));
        Assert.assertEquals("3,-2", ((VecInt) (o_testSimplePhoneSATSmall_remove5__22)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__22)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__22)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove5__24 = this.solver.addClause(clause3);
        Assert.assertTrue(((UnitClause) (o_testSimplePhoneSATSmall_remove5__24)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((UnitClause) (o_testSimplePhoneSATSmall_remove5__24)).getActivity())), 0.1);
        Assert.assertEquals("3", ((UnitClause) (o_testSimplePhoneSATSmall_remove5__24)).toString());
        VecInt clause8 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause8)).toString());
        Assert.assertTrue(((VecInt) (clause8)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__27 = clause8.push(2);
        Assert.assertEquals("2", ((VecInt) (o_testSimplePhoneSATSmall_remove5__27)).toString());
        Assert.assertEquals(2, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__27)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__27)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__28 = clause8.push((-3));
        Assert.assertEquals("2,-3", ((VecInt) (o_testSimplePhoneSATSmall_remove5__28)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__28)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__28)).isEmpty());
        this.solver.addClause(clause8);
        VecInt clause4 = new VecInt();
        clause4.push((-4));
        clause4.push(1);
        this.solver.addClause(clause4);
        VecInt clause5 = new VecInt();
        clause5.push((-5));
        clause5.push(4);
        this.solver.addClause(clause5);
        VecInt clause6 = new VecInt();
        clause6.push(4);
        this.solver.addClause(clause6);
        VecInt clause7 = new VecInt();
        clause7.push(5);
        clause7.push(6);
        clause7.push((-4));
        this.solver.addAtLeast(clause6, 1);
        this.solver.isSatisfiable();
        VecInt bound1 = new VecInt();
        bound1.push(3);
        this.solver.findModel(bound1);
        VecInt bound2 = new VecInt();
        bound2.push((-3));
        this.solver.findModel(bound2);
        VecInt bound3 = new VecInt();
        bound3.push(5);
        bound3.push(3);
        this.solver.findModel(bound3);
        VecInt bound4 = new VecInt();
        bound4.push(5);
        bound4.push((-3));
        this.solver.findModel(bound4);
        VecInt bound5 = new VecInt();
        bound5.push(4);
        bound5.push((-3));
        this.solver.findModel(bound5);
        VecInt bound6 = new VecInt();
        bound6.push(4);
        bound6.push(3);
        this.solver.findModel(bound6);
        VecInt bound7 = new VecInt();
        bound7.push(4);
        int[] model = this.solver.findModel(bound7);
        Set<Integer> satisfiedModel = new HashSet<Integer>();
        for (int i : model) {
            satisfiedModel.add(new Integer(i));
        }
        satisfiedModel.contains(new Integer(4));
        satisfiedModel.contains(new Integer(1));
        satisfiedModel.contains(new Integer(2));
    }

    @Test(timeout = 30000)
    public void testSimplePhoneSATSmall_remove5_remove359() throws Exception, ContradictionException, TimeoutException {
        VecInt clause0 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause0)).toString());
        Assert.assertTrue(((VecInt) (clause0)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__4 = clause0.push(1);
        Assert.assertEquals("1", ((VecInt) (o_testSimplePhoneSATSmall_remove5__4)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__4)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__4)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove5__5 = this.solver.addClause(clause0);
        Assert.assertTrue(((UnitClause) (o_testSimplePhoneSATSmall_remove5__5)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((UnitClause) (o_testSimplePhoneSATSmall_remove5__5)).getActivity())), 0.1);
        Assert.assertEquals("1", ((UnitClause) (o_testSimplePhoneSATSmall_remove5__5)).toString());
        VecInt clause1 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause1)).toString());
        Assert.assertTrue(((VecInt) (clause1)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__9 = clause1.push(1);
        Assert.assertEquals("1", ((VecInt) (o_testSimplePhoneSATSmall_remove5__9)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__9)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__9)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__10 = clause1.push((-2));
        Assert.assertEquals("1,-2", ((VecInt) (o_testSimplePhoneSATSmall_remove5__10)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__10)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__10)).isEmpty());
        VecInt clause2 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause2)).toString());
        Assert.assertTrue(((VecInt) (clause2)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__14 = clause2.push(2);
        Assert.assertEquals("2", ((VecInt) (o_testSimplePhoneSATSmall_remove5__14)).toString());
        Assert.assertEquals(2, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__14)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__14)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__15 = clause2.push((-1));
        Assert.assertEquals("2,-1", ((VecInt) (o_testSimplePhoneSATSmall_remove5__15)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__15)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__15)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove5__17 = this.solver.addClause(clause2);
        Assert.assertTrue(((UnitClause) (o_testSimplePhoneSATSmall_remove5__17)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((UnitClause) (o_testSimplePhoneSATSmall_remove5__17)).getActivity())), 0.1);
        Assert.assertEquals("2", ((UnitClause) (o_testSimplePhoneSATSmall_remove5__17)).toString());
        VecInt clause3 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause3)).toString());
        Assert.assertTrue(((VecInt) (clause3)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__21 = clause3.push(3);
        Assert.assertEquals("3", ((VecInt) (o_testSimplePhoneSATSmall_remove5__21)).toString());
        Assert.assertEquals(3, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__21)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__21)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__22 = clause3.push((-2));
        Assert.assertEquals("3,-2", ((VecInt) (o_testSimplePhoneSATSmall_remove5__22)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__22)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__22)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove5__24 = this.solver.addClause(clause3);
        Assert.assertTrue(((UnitClause) (o_testSimplePhoneSATSmall_remove5__24)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((UnitClause) (o_testSimplePhoneSATSmall_remove5__24)).getActivity())), 0.1);
        Assert.assertEquals("3", ((UnitClause) (o_testSimplePhoneSATSmall_remove5__24)).toString());
        VecInt clause8 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause8)).toString());
        Assert.assertTrue(((VecInt) (clause8)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__27 = clause8.push(2);
        Assert.assertEquals("2", ((VecInt) (o_testSimplePhoneSATSmall_remove5__27)).toString());
        Assert.assertEquals(2, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__27)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__27)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__28 = clause8.push((-3));
        Assert.assertEquals("2,-3", ((VecInt) (o_testSimplePhoneSATSmall_remove5__28)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__28)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__28)).isEmpty());
        this.solver.addClause(clause8);
        VecInt clause4 = new VecInt();
        clause4.push((-4));
        clause4.push(1);
        this.solver.addClause(clause4);
        VecInt clause5 = new VecInt();
        clause5.push((-5));
        clause5.push(4);
        this.solver.addClause(clause5);
        VecInt clause6 = new VecInt();
        clause6.push((-6));
        clause6.push(4);
        this.solver.addClause(clause6);
        VecInt clause7 = new VecInt();
        clause7.push(5);
        clause7.push(6);
        clause7.push((-4));
        this.solver.addAtLeast(clause6, 1);
        VecInt bound1 = new VecInt();
        bound1.push(3);
        this.solver.findModel(bound1);
        VecInt bound2 = new VecInt();
        bound2.push((-3));
        this.solver.findModel(bound2);
        VecInt bound3 = new VecInt();
        bound3.push(5);
        bound3.push(3);
        this.solver.findModel(bound3);
        VecInt bound4 = new VecInt();
        bound4.push(5);
        bound4.push((-3));
        this.solver.findModel(bound4);
        VecInt bound5 = new VecInt();
        bound5.push(4);
        bound5.push((-3));
        this.solver.findModel(bound5);
        VecInt bound6 = new VecInt();
        bound6.push(4);
        bound6.push(3);
        this.solver.findModel(bound6);
        VecInt bound7 = new VecInt();
        bound7.push(4);
        int[] model = this.solver.findModel(bound7);
        Set<Integer> satisfiedModel = new HashSet<Integer>();
        for (int i : model) {
            satisfiedModel.add(new Integer(i));
        }
        satisfiedModel.contains(new Integer(4));
        satisfiedModel.contains(new Integer(1));
        satisfiedModel.contains(new Integer(2));
    }

    @Test(timeout = 30000)
    public void testSimplePhoneSATSmall_remove5_remove298() throws Exception, ContradictionException, TimeoutException {
        VecInt clause0 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause0)).toString());
        Assert.assertTrue(((VecInt) (clause0)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__4 = clause0.push(1);
        Assert.assertEquals("1", ((VecInt) (o_testSimplePhoneSATSmall_remove5__4)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__4)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__4)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove5__5 = this.solver.addClause(clause0);
        Assert.assertTrue(((UnitClause) (o_testSimplePhoneSATSmall_remove5__5)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((UnitClause) (o_testSimplePhoneSATSmall_remove5__5)).getActivity())), 0.1);
        Assert.assertEquals("1", ((UnitClause) (o_testSimplePhoneSATSmall_remove5__5)).toString());
        VecInt clause1 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause1)).toString());
        Assert.assertTrue(((VecInt) (clause1)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__9 = clause1.push(1);
        Assert.assertEquals("1", ((VecInt) (o_testSimplePhoneSATSmall_remove5__9)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__9)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__9)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__10 = clause1.push((-2));
        Assert.assertEquals("1,-2", ((VecInt) (o_testSimplePhoneSATSmall_remove5__10)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__10)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__10)).isEmpty());
        VecInt clause2 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause2)).toString());
        Assert.assertTrue(((VecInt) (clause2)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__14 = clause2.push(2);
        Assert.assertEquals("2", ((VecInt) (o_testSimplePhoneSATSmall_remove5__14)).toString());
        Assert.assertEquals(2, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__14)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__14)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__15 = clause2.push((-1));
        Assert.assertEquals("2,-1", ((VecInt) (o_testSimplePhoneSATSmall_remove5__15)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__15)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__15)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove5__17 = this.solver.addClause(clause2);
        Assert.assertTrue(((UnitClause) (o_testSimplePhoneSATSmall_remove5__17)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((UnitClause) (o_testSimplePhoneSATSmall_remove5__17)).getActivity())), 0.1);
        Assert.assertEquals("2", ((UnitClause) (o_testSimplePhoneSATSmall_remove5__17)).toString());
        VecInt clause3 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause3)).toString());
        Assert.assertTrue(((VecInt) (clause3)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__21 = clause3.push(3);
        Assert.assertEquals("3", ((VecInt) (o_testSimplePhoneSATSmall_remove5__21)).toString());
        Assert.assertEquals(3, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__21)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__21)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__22 = clause3.push((-2));
        Assert.assertEquals("3,-2", ((VecInt) (o_testSimplePhoneSATSmall_remove5__22)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__22)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__22)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove5__24 = this.solver.addClause(clause3);
        Assert.assertTrue(((UnitClause) (o_testSimplePhoneSATSmall_remove5__24)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((UnitClause) (o_testSimplePhoneSATSmall_remove5__24)).getActivity())), 0.1);
        Assert.assertEquals("3", ((UnitClause) (o_testSimplePhoneSATSmall_remove5__24)).toString());
        VecInt clause8 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause8)).toString());
        Assert.assertTrue(((VecInt) (clause8)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__27 = clause8.push(2);
        Assert.assertEquals("2", ((VecInt) (o_testSimplePhoneSATSmall_remove5__27)).toString());
        Assert.assertEquals(2, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__27)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__27)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__28 = clause8.push((-3));
        Assert.assertEquals("2,-3", ((VecInt) (o_testSimplePhoneSATSmall_remove5__28)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__28)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__28)).isEmpty());
        VecInt clause4 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause4)).toString());
        Assert.assertTrue(((VecInt) (clause4)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5_remove298__57 = clause4.push((-4));
        Assert.assertEquals("-4", ((VecInt) (o_testSimplePhoneSATSmall_remove5_remove298__57)).toString());
        Assert.assertEquals(-4, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5_remove298__57)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5_remove298__57)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5_remove298__59 = clause4.push(1);
        Assert.assertEquals("-4,1", ((VecInt) (o_testSimplePhoneSATSmall_remove5_remove298__59)).toString());
        Assert.assertEquals(-1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5_remove298__59)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5_remove298__59)).isEmpty());
        this.solver.addClause(clause4);
        VecInt clause5 = new VecInt();
        clause5.push((-5));
        clause5.push(4);
        this.solver.addClause(clause5);
        VecInt clause6 = new VecInt();
        clause6.push((-6));
        clause6.push(4);
        this.solver.addClause(clause6);
        VecInt clause7 = new VecInt();
        clause7.push(5);
        clause7.push(6);
        clause7.push((-4));
        this.solver.addAtLeast(clause6, 1);
        this.solver.isSatisfiable();
        VecInt bound1 = new VecInt();
        bound1.push(3);
        this.solver.findModel(bound1);
        VecInt bound2 = new VecInt();
        bound2.push((-3));
        this.solver.findModel(bound2);
        VecInt bound3 = new VecInt();
        bound3.push(5);
        bound3.push(3);
        this.solver.findModel(bound3);
        VecInt bound4 = new VecInt();
        bound4.push(5);
        bound4.push((-3));
        this.solver.findModel(bound4);
        VecInt bound5 = new VecInt();
        bound5.push(4);
        bound5.push((-3));
        this.solver.findModel(bound5);
        VecInt bound6 = new VecInt();
        bound6.push(4);
        bound6.push(3);
        this.solver.findModel(bound6);
        VecInt bound7 = new VecInt();
        bound7.push(4);
        int[] model = this.solver.findModel(bound7);
        Set<Integer> satisfiedModel = new HashSet<Integer>();
        for (int i : model) {
            satisfiedModel.add(new Integer(i));
        }
        satisfiedModel.contains(new Integer(4));
        satisfiedModel.contains(new Integer(1));
        satisfiedModel.contains(new Integer(2));
    }

    @Test(timeout = 30000)
    public void testSimplePhoneSATSmall_remove5_remove355() throws Exception, ContradictionException, TimeoutException {
        VecInt clause0 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause0)).toString());
        Assert.assertTrue(((VecInt) (clause0)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__4 = clause0.push(1);
        Assert.assertEquals("1", ((VecInt) (o_testSimplePhoneSATSmall_remove5__4)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__4)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__4)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove5__5 = this.solver.addClause(clause0);
        Assert.assertTrue(((UnitClause) (o_testSimplePhoneSATSmall_remove5__5)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((UnitClause) (o_testSimplePhoneSATSmall_remove5__5)).getActivity())), 0.1);
        Assert.assertEquals("1", ((UnitClause) (o_testSimplePhoneSATSmall_remove5__5)).toString());
        VecInt clause1 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause1)).toString());
        Assert.assertTrue(((VecInt) (clause1)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__9 = clause1.push(1);
        Assert.assertEquals("1", ((VecInt) (o_testSimplePhoneSATSmall_remove5__9)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__9)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__9)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__10 = clause1.push((-2));
        Assert.assertEquals("1,-2", ((VecInt) (o_testSimplePhoneSATSmall_remove5__10)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__10)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__10)).isEmpty());
        VecInt clause2 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause2)).toString());
        Assert.assertTrue(((VecInt) (clause2)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__14 = clause2.push(2);
        Assert.assertEquals("2", ((VecInt) (o_testSimplePhoneSATSmall_remove5__14)).toString());
        Assert.assertEquals(2, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__14)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__14)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__15 = clause2.push((-1));
        Assert.assertEquals("2,-1", ((VecInt) (o_testSimplePhoneSATSmall_remove5__15)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__15)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__15)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove5__17 = this.solver.addClause(clause2);
        Assert.assertTrue(((UnitClause) (o_testSimplePhoneSATSmall_remove5__17)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((UnitClause) (o_testSimplePhoneSATSmall_remove5__17)).getActivity())), 0.1);
        Assert.assertEquals("2", ((UnitClause) (o_testSimplePhoneSATSmall_remove5__17)).toString());
        VecInt clause3 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause3)).toString());
        Assert.assertTrue(((VecInt) (clause3)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__21 = clause3.push(3);
        Assert.assertEquals("3", ((VecInt) (o_testSimplePhoneSATSmall_remove5__21)).toString());
        Assert.assertEquals(3, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__21)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__21)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__22 = clause3.push((-2));
        Assert.assertEquals("3,-2", ((VecInt) (o_testSimplePhoneSATSmall_remove5__22)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__22)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__22)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove5__24 = this.solver.addClause(clause3);
        Assert.assertTrue(((UnitClause) (o_testSimplePhoneSATSmall_remove5__24)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((UnitClause) (o_testSimplePhoneSATSmall_remove5__24)).getActivity())), 0.1);
        Assert.assertEquals("3", ((UnitClause) (o_testSimplePhoneSATSmall_remove5__24)).toString());
        VecInt clause8 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause8)).toString());
        Assert.assertTrue(((VecInt) (clause8)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__27 = clause8.push(2);
        Assert.assertEquals("2", ((VecInt) (o_testSimplePhoneSATSmall_remove5__27)).toString());
        Assert.assertEquals(2, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__27)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__27)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__28 = clause8.push((-3));
        Assert.assertEquals("2,-3", ((VecInt) (o_testSimplePhoneSATSmall_remove5__28)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__28)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__28)).isEmpty());
        this.solver.addClause(clause8);
        VecInt clause4 = new VecInt();
        clause4.push((-4));
        clause4.push(1);
        this.solver.addClause(clause4);
        VecInt clause5 = new VecInt();
        clause5.push((-5));
        clause5.push(4);
        this.solver.addClause(clause5);
        VecInt clause6 = new VecInt();
        clause6.push((-6));
        clause6.push(4);
        this.solver.addClause(clause6);
        VecInt clause7 = new VecInt();
        clause7.push(5);
        clause7.push(6);
        clause7.push((-4));
        this.solver.isSatisfiable();
        VecInt bound1 = new VecInt();
        bound1.push(3);
        this.solver.findModel(bound1);
        VecInt bound2 = new VecInt();
        bound2.push((-3));
        this.solver.findModel(bound2);
        VecInt bound3 = new VecInt();
        bound3.push(5);
        bound3.push(3);
        this.solver.findModel(bound3);
        VecInt bound4 = new VecInt();
        bound4.push(5);
        bound4.push((-3));
        this.solver.findModel(bound4);
        VecInt bound5 = new VecInt();
        bound5.push(4);
        bound5.push((-3));
        this.solver.findModel(bound5);
        VecInt bound6 = new VecInt();
        bound6.push(4);
        bound6.push(3);
        this.solver.findModel(bound6);
        VecInt bound7 = new VecInt();
        bound7.push(4);
        int[] model = this.solver.findModel(bound7);
        Set<Integer> satisfiedModel = new HashSet<Integer>();
        for (int i : model) {
            satisfiedModel.add(new Integer(i));
        }
        satisfiedModel.contains(new Integer(4));
        satisfiedModel.contains(new Integer(1));
        satisfiedModel.contains(new Integer(2));
    }

    @Test(timeout = 30000)
    public void testSimplePhoneSATSmall_remove4_remove540() throws Exception, ContradictionException, TimeoutException {
        VecInt clause0 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause0)).toString());
        Assert.assertTrue(((VecInt) (clause0)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove4__4 = clause0.push(1);
        Assert.assertEquals("1", ((VecInt) (o_testSimplePhoneSATSmall_remove4__4)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove4__4)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove4__4)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove4__5 = this.solver.addClause(clause0);
        Assert.assertTrue(((UnitClause) (o_testSimplePhoneSATSmall_remove4__5)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((UnitClause) (o_testSimplePhoneSATSmall_remove4__5)).getActivity())), 0.1);
        Assert.assertEquals("1", ((UnitClause) (o_testSimplePhoneSATSmall_remove4__5)).toString());
        VecInt clause1 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause1)).toString());
        Assert.assertTrue(((VecInt) (clause1)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove4__9 = clause1.push(1);
        Assert.assertEquals("1", ((VecInt) (o_testSimplePhoneSATSmall_remove4__9)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove4__9)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove4__9)).isEmpty());
        this.solver.addClause(clause1);
        VecInt clause2 = new VecInt();
        clause2.push(2);
        clause2.push((-1));
        this.solver.addClause(clause2);
        VecInt clause3 = new VecInt();
        clause3.push(3);
        clause3.push((-2));
        this.solver.addClause(clause3);
        VecInt clause8 = new VecInt();
        clause8.push(2);
        clause8.push((-3));
        this.solver.addClause(clause8);
        VecInt clause4 = new VecInt();
        clause4.push((-4));
        clause4.push(1);
        this.solver.addClause(clause4);
        VecInt clause5 = new VecInt();
        clause5.push((-5));
        clause5.push(4);
        this.solver.addClause(clause5);
        VecInt clause6 = new VecInt();
        clause6.push((-6));
        clause6.push(4);
        this.solver.addClause(clause6);
        VecInt clause7 = new VecInt();
        clause7.push(5);
        clause7.push(6);
        clause7.push((-4));
        this.solver.addAtLeast(clause6, 1);
        this.solver.isSatisfiable();
        VecInt bound1 = new VecInt();
        bound1.push(3);
        this.solver.findModel(bound1);
        VecInt bound2 = new VecInt();
        bound2.push((-3));
        this.solver.findModel(bound2);
        VecInt bound3 = new VecInt();
        bound3.push(5);
        bound3.push(3);
        this.solver.findModel(bound3);
        VecInt bound4 = new VecInt();
        bound4.push(5);
        bound4.push((-3));
        this.solver.findModel(bound4);
        VecInt bound5 = new VecInt();
        bound5.push(4);
        bound5.push((-3));
        this.solver.findModel(bound5);
        VecInt bound6 = new VecInt();
        bound6.push(4);
        bound6.push(3);
        this.solver.findModel(bound6);
        VecInt bound7 = new VecInt();
        bound7.push(4);
        int[] model = this.solver.findModel(bound7);
        Set<Integer> satisfiedModel = new HashSet<Integer>();
        for (int i : model) {
            satisfiedModel.add(new Integer(i));
        }
        satisfiedModel.contains(new Integer(1));
        satisfiedModel.contains(new Integer(2));
    }

    @Test(timeout = 30000)
    public void testSimplePhoneSATSmall_remove4_remove452() throws Exception, ContradictionException, TimeoutException {
        VecInt clause0 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause0)).toString());
        Assert.assertTrue(((VecInt) (clause0)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove4__4 = clause0.push(1);
        Assert.assertEquals("1", ((VecInt) (o_testSimplePhoneSATSmall_remove4__4)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove4__4)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove4__4)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove4__5 = this.solver.addClause(clause0);
        Assert.assertTrue(((UnitClause) (o_testSimplePhoneSATSmall_remove4__5)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((UnitClause) (o_testSimplePhoneSATSmall_remove4__5)).getActivity())), 0.1);
        Assert.assertEquals("1", ((UnitClause) (o_testSimplePhoneSATSmall_remove4__5)).toString());
        VecInt clause1 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause1)).toString());
        Assert.assertTrue(((VecInt) (clause1)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove4__9 = clause1.push(1);
        Assert.assertEquals("1", ((VecInt) (o_testSimplePhoneSATSmall_remove4__9)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove4__9)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove4__9)).isEmpty());
        this.solver.addClause(clause1);
        VecInt clause2 = new VecInt();
        clause2.push(2);
        clause2.push((-1));
        this.solver.addClause(clause2);
        VecInt clause3 = new VecInt();
        clause3.push(3);
        clause3.push((-2));
        this.solver.addClause(clause3);
        VecInt clause8 = new VecInt();
        clause8.push(2);
        clause8.push((-3));
        this.solver.addClause(clause8);
        VecInt clause4 = new VecInt();
        clause4.push((-4));
        clause4.push(1);
        this.solver.addClause(clause4);
        VecInt clause5 = new VecInt();
        clause5.push((-5));
        clause5.push(4);
        this.solver.addClause(clause5);
        VecInt clause6 = new VecInt();
        clause6.push((-6));
        clause6.push(4);
        this.solver.addClause(clause6);
        VecInt clause7 = new VecInt();
        clause7.push(5);
        clause7.push(6);
        clause7.push((-4));
        this.solver.isSatisfiable();
        VecInt bound1 = new VecInt();
        bound1.push(3);
        this.solver.findModel(bound1);
        VecInt bound2 = new VecInt();
        bound2.push((-3));
        this.solver.findModel(bound2);
        VecInt bound3 = new VecInt();
        bound3.push(5);
        bound3.push(3);
        this.solver.findModel(bound3);
        VecInt bound4 = new VecInt();
        bound4.push(5);
        bound4.push((-3));
        this.solver.findModel(bound4);
        VecInt bound5 = new VecInt();
        bound5.push(4);
        bound5.push((-3));
        this.solver.findModel(bound5);
        VecInt bound6 = new VecInt();
        bound6.push(4);
        bound6.push(3);
        this.solver.findModel(bound6);
        VecInt bound7 = new VecInt();
        bound7.push(4);
        int[] model = this.solver.findModel(bound7);
        Set<Integer> satisfiedModel = new HashSet<Integer>();
        for (int i : model) {
            satisfiedModel.add(new Integer(i));
        }
        satisfiedModel.contains(new Integer(4));
        satisfiedModel.contains(new Integer(1));
        satisfiedModel.contains(new Integer(2));
    }

    @Test(timeout = 30000)
    public void testSimplePhoneSATSmall_remove4_remove437() throws Exception, ContradictionException, TimeoutException {
        VecInt clause0 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause0)).toString());
        Assert.assertTrue(((VecInt) (clause0)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove4__4 = clause0.push(1);
        Assert.assertEquals("1", ((VecInt) (o_testSimplePhoneSATSmall_remove4__4)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove4__4)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove4__4)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove4__5 = this.solver.addClause(clause0);
        Assert.assertTrue(((UnitClause) (o_testSimplePhoneSATSmall_remove4__5)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((UnitClause) (o_testSimplePhoneSATSmall_remove4__5)).getActivity())), 0.1);
        Assert.assertEquals("1", ((UnitClause) (o_testSimplePhoneSATSmall_remove4__5)).toString());
        VecInt clause1 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause1)).toString());
        Assert.assertTrue(((VecInt) (clause1)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove4__9 = clause1.push(1);
        Assert.assertEquals("1", ((VecInt) (o_testSimplePhoneSATSmall_remove4__9)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove4__9)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove4__9)).isEmpty());
        this.solver.addClause(clause1);
        VecInt clause2 = new VecInt();
        clause2.push(2);
        clause2.push((-1));
        this.solver.addClause(clause2);
        VecInt clause3 = new VecInt();
        clause3.push(3);
        clause3.push((-2));
        this.solver.addClause(clause3);
        VecInt clause8 = new VecInt();
        clause8.push(2);
        clause8.push((-3));
        this.solver.addClause(clause8);
        VecInt clause4 = new VecInt();
        clause4.push((-4));
        clause4.push(1);
        this.solver.addClause(clause4);
        VecInt clause5 = new VecInt();
        clause5.push((-5));
        clause5.push(4);
        VecInt clause6 = new VecInt();
        clause6.push((-6));
        clause6.push(4);
        this.solver.addClause(clause6);
        VecInt clause7 = new VecInt();
        clause7.push(5);
        clause7.push(6);
        clause7.push((-4));
        this.solver.addAtLeast(clause6, 1);
        this.solver.isSatisfiable();
        VecInt bound1 = new VecInt();
        bound1.push(3);
        this.solver.findModel(bound1);
        VecInt bound2 = new VecInt();
        bound2.push((-3));
        this.solver.findModel(bound2);
        VecInt bound3 = new VecInt();
        bound3.push(5);
        bound3.push(3);
        this.solver.findModel(bound3);
        VecInt bound4 = new VecInt();
        bound4.push(5);
        bound4.push((-3));
        this.solver.findModel(bound4);
        VecInt bound5 = new VecInt();
        bound5.push(4);
        bound5.push((-3));
        this.solver.findModel(bound5);
        VecInt bound6 = new VecInt();
        bound6.push(4);
        bound6.push(3);
        this.solver.findModel(bound6);
        VecInt bound7 = new VecInt();
        bound7.push(4);
        int[] model = this.solver.findModel(bound7);
        Set<Integer> satisfiedModel = new HashSet<Integer>();
        for (int i : model) {
            satisfiedModel.add(new Integer(i));
        }
        satisfiedModel.contains(new Integer(4));
        satisfiedModel.contains(new Integer(1));
        satisfiedModel.contains(new Integer(2));
    }

    @Test(timeout = 30000)
    public void testSimplePhoneSATSmall_remove4_remove409() throws Exception, ContradictionException, TimeoutException {
        VecInt clause0 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause0)).toString());
        Assert.assertTrue(((VecInt) (clause0)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove4__4 = clause0.push(1);
        Assert.assertEquals("1", ((VecInt) (o_testSimplePhoneSATSmall_remove4__4)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove4__4)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove4__4)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove4__5 = this.solver.addClause(clause0);
        Assert.assertTrue(((UnitClause) (o_testSimplePhoneSATSmall_remove4__5)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((UnitClause) (o_testSimplePhoneSATSmall_remove4__5)).getActivity())), 0.1);
        Assert.assertEquals("1", ((UnitClause) (o_testSimplePhoneSATSmall_remove4__5)).toString());
        VecInt clause1 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause1)).toString());
        Assert.assertTrue(((VecInt) (clause1)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove4__9 = clause1.push(1);
        Assert.assertEquals("1", ((VecInt) (o_testSimplePhoneSATSmall_remove4__9)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove4__9)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove4__9)).isEmpty());
        this.solver.addClause(clause1);
        VecInt clause2 = new VecInt();
        clause2.push(2);
        clause2.push((-1));
        this.solver.addClause(clause2);
        VecInt clause3 = new VecInt();
        clause3.push(3);
        clause3.push((-2));
        VecInt clause8 = new VecInt();
        clause8.push(2);
        clause8.push((-3));
        this.solver.addClause(clause8);
        VecInt clause4 = new VecInt();
        clause4.push((-4));
        clause4.push(1);
        this.solver.addClause(clause4);
        VecInt clause5 = new VecInt();
        clause5.push((-5));
        clause5.push(4);
        this.solver.addClause(clause5);
        VecInt clause6 = new VecInt();
        clause6.push((-6));
        clause6.push(4);
        this.solver.addClause(clause6);
        VecInt clause7 = new VecInt();
        clause7.push(5);
        clause7.push(6);
        clause7.push((-4));
        this.solver.addAtLeast(clause6, 1);
        this.solver.isSatisfiable();
        VecInt bound1 = new VecInt();
        bound1.push(3);
        this.solver.findModel(bound1);
        VecInt bound2 = new VecInt();
        bound2.push((-3));
        this.solver.findModel(bound2);
        VecInt bound3 = new VecInt();
        bound3.push(5);
        bound3.push(3);
        this.solver.findModel(bound3);
        VecInt bound4 = new VecInt();
        bound4.push(5);
        bound4.push((-3));
        this.solver.findModel(bound4);
        VecInt bound5 = new VecInt();
        bound5.push(4);
        bound5.push((-3));
        this.solver.findModel(bound5);
        VecInt bound6 = new VecInt();
        bound6.push(4);
        bound6.push(3);
        this.solver.findModel(bound6);
        VecInt bound7 = new VecInt();
        bound7.push(4);
        int[] model = this.solver.findModel(bound7);
        Set<Integer> satisfiedModel = new HashSet<Integer>();
        for (int i : model) {
            satisfiedModel.add(new Integer(i));
        }
        satisfiedModel.contains(new Integer(4));
        satisfiedModel.contains(new Integer(1));
        satisfiedModel.contains(new Integer(2));
    }

    @Test(timeout = 30000)
    public void testSimplePhoneSATSmall_remove4_remove398() throws Exception, ContradictionException, TimeoutException {
        VecInt clause0 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause0)).toString());
        Assert.assertTrue(((VecInt) (clause0)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove4__4 = clause0.push(1);
        Assert.assertEquals("1", ((VecInt) (o_testSimplePhoneSATSmall_remove4__4)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove4__4)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove4__4)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove4__5 = this.solver.addClause(clause0);
        Assert.assertTrue(((UnitClause) (o_testSimplePhoneSATSmall_remove4__5)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((UnitClause) (o_testSimplePhoneSATSmall_remove4__5)).getActivity())), 0.1);
        Assert.assertEquals("1", ((UnitClause) (o_testSimplePhoneSATSmall_remove4__5)).toString());
        VecInt clause1 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause1)).toString());
        Assert.assertTrue(((VecInt) (clause1)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove4__9 = clause1.push(1);
        Assert.assertEquals("1", ((VecInt) (o_testSimplePhoneSATSmall_remove4__9)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove4__9)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove4__9)).isEmpty());
        this.solver.addClause(clause1);
        VecInt clause2 = new VecInt();
        clause2.push(2);
        clause2.push((-1));
        VecInt clause3 = new VecInt();
        clause3.push(3);
        clause3.push((-2));
        this.solver.addClause(clause3);
        VecInt clause8 = new VecInt();
        clause8.push(2);
        clause8.push((-3));
        this.solver.addClause(clause8);
        VecInt clause4 = new VecInt();
        clause4.push((-4));
        clause4.push(1);
        this.solver.addClause(clause4);
        VecInt clause5 = new VecInt();
        clause5.push((-5));
        clause5.push(4);
        this.solver.addClause(clause5);
        VecInt clause6 = new VecInt();
        clause6.push((-6));
        clause6.push(4);
        this.solver.addClause(clause6);
        VecInt clause7 = new VecInt();
        clause7.push(5);
        clause7.push(6);
        clause7.push((-4));
        this.solver.addAtLeast(clause6, 1);
        this.solver.isSatisfiable();
        VecInt bound1 = new VecInt();
        bound1.push(3);
        this.solver.findModel(bound1);
        VecInt bound2 = new VecInt();
        bound2.push((-3));
        this.solver.findModel(bound2);
        VecInt bound3 = new VecInt();
        bound3.push(5);
        bound3.push(3);
        this.solver.findModel(bound3);
        VecInt bound4 = new VecInt();
        bound4.push(5);
        bound4.push((-3));
        this.solver.findModel(bound4);
        VecInt bound5 = new VecInt();
        bound5.push(4);
        bound5.push((-3));
        this.solver.findModel(bound5);
        VecInt bound6 = new VecInt();
        bound6.push(4);
        bound6.push(3);
        this.solver.findModel(bound6);
        VecInt bound7 = new VecInt();
        bound7.push(4);
        int[] model = this.solver.findModel(bound7);
        Set<Integer> satisfiedModel = new HashSet<Integer>();
        for (int i : model) {
            satisfiedModel.add(new Integer(i));
        }
        satisfiedModel.contains(new Integer(4));
        satisfiedModel.contains(new Integer(1));
        satisfiedModel.contains(new Integer(2));
    }

    @Test(timeout = 30000)
    public void testSimplePhoneSATSmall_remove4_remove524() throws Exception, ContradictionException, TimeoutException {
        VecInt clause0 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause0)).toString());
        Assert.assertTrue(((VecInt) (clause0)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove4__4 = clause0.push(1);
        Assert.assertEquals("1", ((VecInt) (o_testSimplePhoneSATSmall_remove4__4)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove4__4)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove4__4)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove4__5 = this.solver.addClause(clause0);
        Assert.assertTrue(((UnitClause) (o_testSimplePhoneSATSmall_remove4__5)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((UnitClause) (o_testSimplePhoneSATSmall_remove4__5)).getActivity())), 0.1);
        Assert.assertEquals("1", ((UnitClause) (o_testSimplePhoneSATSmall_remove4__5)).toString());
        VecInt clause1 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause1)).toString());
        Assert.assertTrue(((VecInt) (clause1)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove4__9 = clause1.push(1);
        Assert.assertEquals("1", ((VecInt) (o_testSimplePhoneSATSmall_remove4__9)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove4__9)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove4__9)).isEmpty());
        this.solver.addClause(clause1);
        VecInt clause2 = new VecInt();
        clause2.push(2);
        clause2.push((-1));
        this.solver.addClause(clause2);
        VecInt clause3 = new VecInt();
        clause3.push(3);
        clause3.push((-2));
        this.solver.addClause(clause3);
        VecInt clause8 = new VecInt();
        clause8.push(2);
        clause8.push((-3));
        this.solver.addClause(clause8);
        VecInt clause4 = new VecInt();
        clause4.push((-4));
        clause4.push(1);
        this.solver.addClause(clause4);
        VecInt clause5 = new VecInt();
        clause5.push((-5));
        clause5.push(4);
        this.solver.addClause(clause5);
        VecInt clause6 = new VecInt();
        clause6.push((-6));
        clause6.push(4);
        this.solver.addClause(clause6);
        VecInt clause7 = new VecInt();
        clause7.push(5);
        clause7.push(6);
        clause7.push((-4));
        this.solver.addAtLeast(clause6, 1);
        this.solver.isSatisfiable();
        VecInt bound1 = new VecInt();
        bound1.push(3);
        this.solver.findModel(bound1);
        VecInt bound2 = new VecInt();
        bound2.push((-3));
        this.solver.findModel(bound2);
        VecInt bound3 = new VecInt();
        bound3.push(5);
        bound3.push(3);
        this.solver.findModel(bound3);
        VecInt bound4 = new VecInt();
        bound4.push(5);
        bound4.push((-3));
        this.solver.findModel(bound4);
        VecInt bound5 = new VecInt();
        bound5.push(4);
        bound5.push((-3));
        VecInt bound6 = new VecInt();
        bound6.push(4);
        bound6.push(3);
        this.solver.findModel(bound6);
        VecInt bound7 = new VecInt();
        bound7.push(4);
        int[] model = this.solver.findModel(bound7);
        Set<Integer> satisfiedModel = new HashSet<Integer>();
        for (int i : model) {
            satisfiedModel.add(new Integer(i));
        }
        satisfiedModel.contains(new Integer(4));
        satisfiedModel.contains(new Integer(1));
        satisfiedModel.contains(new Integer(2));
    }

    @Test(timeout = 30000)
    public void testSimplePhoneSATSmall_remove4_remove506() throws Exception, ContradictionException, TimeoutException {
        VecInt clause0 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause0)).toString());
        Assert.assertTrue(((VecInt) (clause0)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove4__4 = clause0.push(1);
        Assert.assertEquals("1", ((VecInt) (o_testSimplePhoneSATSmall_remove4__4)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove4__4)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove4__4)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove4__5 = this.solver.addClause(clause0);
        Assert.assertTrue(((UnitClause) (o_testSimplePhoneSATSmall_remove4__5)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((UnitClause) (o_testSimplePhoneSATSmall_remove4__5)).getActivity())), 0.1);
        Assert.assertEquals("1", ((UnitClause) (o_testSimplePhoneSATSmall_remove4__5)).toString());
        VecInt clause1 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause1)).toString());
        Assert.assertTrue(((VecInt) (clause1)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove4__9 = clause1.push(1);
        Assert.assertEquals("1", ((VecInt) (o_testSimplePhoneSATSmall_remove4__9)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove4__9)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove4__9)).isEmpty());
        this.solver.addClause(clause1);
        VecInt clause2 = new VecInt();
        clause2.push(2);
        clause2.push((-1));
        this.solver.addClause(clause2);
        VecInt clause3 = new VecInt();
        clause3.push(3);
        clause3.push((-2));
        this.solver.addClause(clause3);
        VecInt clause8 = new VecInt();
        clause8.push(2);
        clause8.push((-3));
        this.solver.addClause(clause8);
        VecInt clause4 = new VecInt();
        clause4.push((-4));
        clause4.push(1);
        this.solver.addClause(clause4);
        VecInt clause5 = new VecInt();
        clause5.push((-5));
        clause5.push(4);
        this.solver.addClause(clause5);
        VecInt clause6 = new VecInt();
        clause6.push((-6));
        clause6.push(4);
        this.solver.addClause(clause6);
        VecInt clause7 = new VecInt();
        clause7.push(5);
        clause7.push(6);
        clause7.push((-4));
        this.solver.addAtLeast(clause6, 1);
        this.solver.isSatisfiable();
        VecInt bound1 = new VecInt();
        bound1.push(3);
        this.solver.findModel(bound1);
        VecInt bound2 = new VecInt();
        bound2.push((-3));
        this.solver.findModel(bound2);
        VecInt bound3 = new VecInt();
        bound3.push(5);
        bound3.push(3);
        VecInt bound4 = new VecInt();
        bound4.push(5);
        bound4.push((-3));
        this.solver.findModel(bound4);
        VecInt bound5 = new VecInt();
        bound5.push(4);
        bound5.push((-3));
        this.solver.findModel(bound5);
        VecInt bound6 = new VecInt();
        bound6.push(4);
        bound6.push(3);
        this.solver.findModel(bound6);
        VecInt bound7 = new VecInt();
        bound7.push(4);
        int[] model = this.solver.findModel(bound7);
        Set<Integer> satisfiedModel = new HashSet<Integer>();
        for (int i : model) {
            satisfiedModel.add(new Integer(i));
        }
        satisfiedModel.contains(new Integer(4));
        satisfiedModel.contains(new Integer(1));
        satisfiedModel.contains(new Integer(2));
    }

    @Test(timeout = 30000)
    public void testSimplePhoneSATSmall_remove4_remove516() throws Exception, ContradictionException, TimeoutException {
        VecInt clause0 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause0)).toString());
        Assert.assertTrue(((VecInt) (clause0)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove4__4 = clause0.push(1);
        Assert.assertEquals("1", ((VecInt) (o_testSimplePhoneSATSmall_remove4__4)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove4__4)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove4__4)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove4__5 = this.solver.addClause(clause0);
        Assert.assertTrue(((UnitClause) (o_testSimplePhoneSATSmall_remove4__5)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((UnitClause) (o_testSimplePhoneSATSmall_remove4__5)).getActivity())), 0.1);
        Assert.assertEquals("1", ((UnitClause) (o_testSimplePhoneSATSmall_remove4__5)).toString());
        VecInt clause1 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause1)).toString());
        Assert.assertTrue(((VecInt) (clause1)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove4__9 = clause1.push(1);
        Assert.assertEquals("1", ((VecInt) (o_testSimplePhoneSATSmall_remove4__9)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove4__9)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove4__9)).isEmpty());
        this.solver.addClause(clause1);
        VecInt clause2 = new VecInt();
        clause2.push(2);
        clause2.push((-1));
        this.solver.addClause(clause2);
        VecInt clause3 = new VecInt();
        clause3.push(3);
        clause3.push((-2));
        this.solver.addClause(clause3);
        VecInt clause8 = new VecInt();
        clause8.push(2);
        clause8.push((-3));
        this.solver.addClause(clause8);
        VecInt clause4 = new VecInt();
        clause4.push((-4));
        clause4.push(1);
        this.solver.addClause(clause4);
        VecInt clause5 = new VecInt();
        clause5.push((-5));
        clause5.push(4);
        this.solver.addClause(clause5);
        VecInt clause6 = new VecInt();
        clause6.push((-6));
        clause6.push(4);
        this.solver.addClause(clause6);
        VecInt clause7 = new VecInt();
        clause7.push(5);
        clause7.push(6);
        clause7.push((-4));
        this.solver.addAtLeast(clause6, 1);
        this.solver.isSatisfiable();
        VecInt bound1 = new VecInt();
        bound1.push(3);
        this.solver.findModel(bound1);
        VecInt bound2 = new VecInt();
        bound2.push((-3));
        this.solver.findModel(bound2);
        VecInt bound3 = new VecInt();
        bound3.push(5);
        bound3.push(3);
        this.solver.findModel(bound3);
        VecInt bound4 = new VecInt();
        bound4.push(5);
        bound4.push((-3));
        VecInt bound5 = new VecInt();
        bound5.push(4);
        bound5.push((-3));
        this.solver.findModel(bound5);
        VecInt bound6 = new VecInt();
        bound6.push(4);
        bound6.push(3);
        this.solver.findModel(bound6);
        VecInt bound7 = new VecInt();
        bound7.push(4);
        int[] model = this.solver.findModel(bound7);
        Set<Integer> satisfiedModel = new HashSet<Integer>();
        for (int i : model) {
            satisfiedModel.add(new Integer(i));
        }
        satisfiedModel.contains(new Integer(4));
        satisfiedModel.contains(new Integer(1));
        satisfiedModel.contains(new Integer(2));
    }

    @Test(timeout = 30000)
    public void testSimplePhoneSATSmall_remove4_remove485() throws Exception, ContradictionException, TimeoutException {
        VecInt clause0 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause0)).toString());
        Assert.assertTrue(((VecInt) (clause0)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove4__4 = clause0.push(1);
        Assert.assertEquals("1", ((VecInt) (o_testSimplePhoneSATSmall_remove4__4)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove4__4)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove4__4)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove4__5 = this.solver.addClause(clause0);
        Assert.assertTrue(((UnitClause) (o_testSimplePhoneSATSmall_remove4__5)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((UnitClause) (o_testSimplePhoneSATSmall_remove4__5)).getActivity())), 0.1);
        Assert.assertEquals("1", ((UnitClause) (o_testSimplePhoneSATSmall_remove4__5)).toString());
        VecInt clause1 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause1)).toString());
        Assert.assertTrue(((VecInt) (clause1)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove4__9 = clause1.push(1);
        Assert.assertEquals("1", ((VecInt) (o_testSimplePhoneSATSmall_remove4__9)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove4__9)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove4__9)).isEmpty());
        this.solver.addClause(clause1);
        VecInt clause2 = new VecInt();
        clause2.push(2);
        clause2.push((-1));
        this.solver.addClause(clause2);
        VecInt clause3 = new VecInt();
        clause3.push(3);
        clause3.push((-2));
        this.solver.addClause(clause3);
        VecInt clause8 = new VecInt();
        clause8.push(2);
        clause8.push((-3));
        this.solver.addClause(clause8);
        VecInt clause4 = new VecInt();
        clause4.push((-4));
        clause4.push(1);
        this.solver.addClause(clause4);
        VecInt clause5 = new VecInt();
        clause5.push((-5));
        clause5.push(4);
        this.solver.addClause(clause5);
        VecInt clause6 = new VecInt();
        clause6.push((-6));
        clause6.push(4);
        this.solver.addClause(clause6);
        VecInt clause7 = new VecInt();
        clause7.push(5);
        clause7.push(6);
        clause7.push((-4));
        this.solver.addAtLeast(clause6, 1);
        this.solver.isSatisfiable();
        VecInt bound1 = new VecInt();
        bound1.push(3);
        this.solver.findModel(bound1);
        VecInt bound2 = new VecInt();
        bound2.push((-3));
        VecInt bound3 = new VecInt();
        bound3.push(5);
        bound3.push(3);
        this.solver.findModel(bound3);
        VecInt bound4 = new VecInt();
        bound4.push(5);
        bound4.push((-3));
        this.solver.findModel(bound4);
        VecInt bound5 = new VecInt();
        bound5.push(4);
        bound5.push((-3));
        this.solver.findModel(bound5);
        VecInt bound6 = new VecInt();
        bound6.push(4);
        bound6.push(3);
        this.solver.findModel(bound6);
        VecInt bound7 = new VecInt();
        bound7.push(4);
        int[] model = this.solver.findModel(bound7);
        Set<Integer> satisfiedModel = new HashSet<Integer>();
        for (int i : model) {
            satisfiedModel.add(new Integer(i));
        }
        satisfiedModel.contains(new Integer(4));
        satisfiedModel.contains(new Integer(1));
        satisfiedModel.contains(new Integer(2));
    }

    @Test(timeout = 30000)
    public void testSimplePhoneSATSmall_remove4_remove471() throws Exception, ContradictionException, TimeoutException {
        VecInt clause0 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause0)).toString());
        Assert.assertTrue(((VecInt) (clause0)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove4__4 = clause0.push(1);
        Assert.assertEquals("1", ((VecInt) (o_testSimplePhoneSATSmall_remove4__4)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove4__4)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove4__4)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove4__5 = this.solver.addClause(clause0);
        Assert.assertTrue(((UnitClause) (o_testSimplePhoneSATSmall_remove4__5)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((UnitClause) (o_testSimplePhoneSATSmall_remove4__5)).getActivity())), 0.1);
        Assert.assertEquals("1", ((UnitClause) (o_testSimplePhoneSATSmall_remove4__5)).toString());
        VecInt clause1 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause1)).toString());
        Assert.assertTrue(((VecInt) (clause1)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove4__9 = clause1.push(1);
        Assert.assertEquals("1", ((VecInt) (o_testSimplePhoneSATSmall_remove4__9)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove4__9)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove4__9)).isEmpty());
        this.solver.addClause(clause1);
        VecInt clause2 = new VecInt();
        clause2.push(2);
        clause2.push((-1));
        this.solver.addClause(clause2);
        VecInt clause3 = new VecInt();
        clause3.push(3);
        clause3.push((-2));
        this.solver.addClause(clause3);
        VecInt clause8 = new VecInt();
        clause8.push(2);
        clause8.push((-3));
        this.solver.addClause(clause8);
        VecInt clause4 = new VecInt();
        clause4.push((-4));
        clause4.push(1);
        this.solver.addClause(clause4);
        VecInt clause5 = new VecInt();
        clause5.push((-5));
        clause5.push(4);
        this.solver.addClause(clause5);
        VecInt clause6 = new VecInt();
        clause6.push((-6));
        clause6.push(4);
        this.solver.addClause(clause6);
        VecInt clause7 = new VecInt();
        clause7.push(5);
        clause7.push(6);
        clause7.push((-4));
        this.solver.addAtLeast(clause6, 1);
        VecInt bound1 = new VecInt();
        bound1.push(3);
        this.solver.findModel(bound1);
        VecInt bound2 = new VecInt();
        bound2.push((-3));
        this.solver.findModel(bound2);
        VecInt bound3 = new VecInt();
        bound3.push(5);
        bound3.push(3);
        this.solver.findModel(bound3);
        VecInt bound4 = new VecInt();
        bound4.push(5);
        bound4.push((-3));
        this.solver.findModel(bound4);
        VecInt bound5 = new VecInt();
        bound5.push(4);
        bound5.push((-3));
        this.solver.findModel(bound5);
        VecInt bound6 = new VecInt();
        bound6.push(4);
        bound6.push(3);
        this.solver.findModel(bound6);
        VecInt bound7 = new VecInt();
        bound7.push(4);
        int[] model = this.solver.findModel(bound7);
        Set<Integer> satisfiedModel = new HashSet<Integer>();
        for (int i : model) {
            satisfiedModel.add(new Integer(i));
        }
        satisfiedModel.contains(new Integer(4));
        satisfiedModel.contains(new Integer(1));
        satisfiedModel.contains(new Integer(2));
    }

    @Test(timeout = 30000)
    public void testSimplePhoneSATSmall_remove4_remove430() throws Exception, ContradictionException, TimeoutException {
        VecInt clause0 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause0)).toString());
        Assert.assertTrue(((VecInt) (clause0)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove4__4 = clause0.push(1);
        Assert.assertEquals("1", ((VecInt) (o_testSimplePhoneSATSmall_remove4__4)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove4__4)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove4__4)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove4__5 = this.solver.addClause(clause0);
        Assert.assertTrue(((UnitClause) (o_testSimplePhoneSATSmall_remove4__5)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((UnitClause) (o_testSimplePhoneSATSmall_remove4__5)).getActivity())), 0.1);
        Assert.assertEquals("1", ((UnitClause) (o_testSimplePhoneSATSmall_remove4__5)).toString());
        VecInt clause1 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause1)).toString());
        Assert.assertTrue(((VecInt) (clause1)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove4__9 = clause1.push(1);
        Assert.assertEquals("1", ((VecInt) (o_testSimplePhoneSATSmall_remove4__9)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove4__9)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove4__9)).isEmpty());
        this.solver.addClause(clause1);
        VecInt clause2 = new VecInt();
        clause2.push(2);
        clause2.push((-1));
        this.solver.addClause(clause2);
        VecInt clause3 = new VecInt();
        clause3.push(3);
        clause3.push((-2));
        this.solver.addClause(clause3);
        VecInt clause8 = new VecInt();
        clause8.push(2);
        clause8.push((-3));
        this.solver.addClause(clause8);
        VecInt clause4 = new VecInt();
        clause4.push((-4));
        clause4.push(1);
        this.solver.addClause(clause4);
        VecInt clause5 = new VecInt();
        clause5.push(4);
        this.solver.addClause(clause5);
        VecInt clause6 = new VecInt();
        clause6.push((-6));
        clause6.push(4);
        this.solver.addClause(clause6);
        VecInt clause7 = new VecInt();
        clause7.push(5);
        clause7.push(6);
        clause7.push((-4));
        this.solver.addAtLeast(clause6, 1);
        this.solver.isSatisfiable();
        VecInt bound1 = new VecInt();
        bound1.push(3);
        this.solver.findModel(bound1);
        VecInt bound2 = new VecInt();
        bound2.push((-3));
        this.solver.findModel(bound2);
        VecInt bound3 = new VecInt();
        bound3.push(5);
        bound3.push(3);
        this.solver.findModel(bound3);
        VecInt bound4 = new VecInt();
        bound4.push(5);
        bound4.push((-3));
        this.solver.findModel(bound4);
        VecInt bound5 = new VecInt();
        bound5.push(4);
        bound5.push((-3));
        this.solver.findModel(bound5);
        VecInt bound6 = new VecInt();
        bound6.push(4);
        bound6.push(3);
        this.solver.findModel(bound6);
        VecInt bound7 = new VecInt();
        bound7.push(4);
        int[] model = this.solver.findModel(bound7);
        Set<Integer> satisfiedModel = new HashSet<Integer>();
        for (int i : model) {
            satisfiedModel.add(new Integer(i));
        }
        satisfiedModel.contains(new Integer(4));
        satisfiedModel.contains(new Integer(1));
        satisfiedModel.contains(new Integer(2));
    }

    @Test(timeout = 30000)
    public void testSimplePhoneSATSmall_remove4_remove439() throws Exception, ContradictionException, TimeoutException {
        VecInt clause0 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause0)).toString());
        Assert.assertTrue(((VecInt) (clause0)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove4__4 = clause0.push(1);
        Assert.assertEquals("1", ((VecInt) (o_testSimplePhoneSATSmall_remove4__4)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove4__4)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove4__4)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove4__5 = this.solver.addClause(clause0);
        Assert.assertTrue(((UnitClause) (o_testSimplePhoneSATSmall_remove4__5)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((UnitClause) (o_testSimplePhoneSATSmall_remove4__5)).getActivity())), 0.1);
        Assert.assertEquals("1", ((UnitClause) (o_testSimplePhoneSATSmall_remove4__5)).toString());
        VecInt clause1 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause1)).toString());
        Assert.assertTrue(((VecInt) (clause1)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove4__9 = clause1.push(1);
        Assert.assertEquals("1", ((VecInt) (o_testSimplePhoneSATSmall_remove4__9)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove4__9)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove4__9)).isEmpty());
        this.solver.addClause(clause1);
        VecInt clause2 = new VecInt();
        clause2.push(2);
        clause2.push((-1));
        this.solver.addClause(clause2);
        VecInt clause3 = new VecInt();
        clause3.push(3);
        clause3.push((-2));
        this.solver.addClause(clause3);
        VecInt clause8 = new VecInt();
        clause8.push(2);
        clause8.push((-3));
        this.solver.addClause(clause8);
        VecInt clause4 = new VecInt();
        clause4.push((-4));
        clause4.push(1);
        this.solver.addClause(clause4);
        VecInt clause5 = new VecInt();
        clause5.push((-5));
        clause5.push(4);
        this.solver.addClause(clause5);
        VecInt clause6 = new VecInt();
        clause6.push(4);
        this.solver.addClause(clause6);
        VecInt clause7 = new VecInt();
        clause7.push(5);
        clause7.push(6);
        clause7.push((-4));
        this.solver.addAtLeast(clause6, 1);
        this.solver.isSatisfiable();
        VecInt bound1 = new VecInt();
        bound1.push(3);
        this.solver.findModel(bound1);
        VecInt bound2 = new VecInt();
        bound2.push((-3));
        this.solver.findModel(bound2);
        VecInt bound3 = new VecInt();
        bound3.push(5);
        bound3.push(3);
        this.solver.findModel(bound3);
        VecInt bound4 = new VecInt();
        bound4.push(5);
        bound4.push((-3));
        this.solver.findModel(bound4);
        VecInt bound5 = new VecInt();
        bound5.push(4);
        bound5.push((-3));
        this.solver.findModel(bound5);
        VecInt bound6 = new VecInt();
        bound6.push(4);
        bound6.push(3);
        this.solver.findModel(bound6);
        VecInt bound7 = new VecInt();
        bound7.push(4);
        int[] model = this.solver.findModel(bound7);
        Set<Integer> satisfiedModel = new HashSet<Integer>();
        for (int i : model) {
            satisfiedModel.add(new Integer(i));
        }
        satisfiedModel.contains(new Integer(4));
        satisfiedModel.contains(new Integer(1));
        satisfiedModel.contains(new Integer(2));
    }

    @Test(timeout = 30000)
    public void testSimplePhoneSATSmall_remove4_remove442() throws Exception, ContradictionException, TimeoutException {
        VecInt clause0 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause0)).toString());
        Assert.assertTrue(((VecInt) (clause0)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove4__4 = clause0.push(1);
        Assert.assertEquals("1", ((VecInt) (o_testSimplePhoneSATSmall_remove4__4)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove4__4)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove4__4)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove4__5 = this.solver.addClause(clause0);
        Assert.assertTrue(((UnitClause) (o_testSimplePhoneSATSmall_remove4__5)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((UnitClause) (o_testSimplePhoneSATSmall_remove4__5)).getActivity())), 0.1);
        Assert.assertEquals("1", ((UnitClause) (o_testSimplePhoneSATSmall_remove4__5)).toString());
        VecInt clause1 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause1)).toString());
        Assert.assertTrue(((VecInt) (clause1)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove4__9 = clause1.push(1);
        Assert.assertEquals("1", ((VecInt) (o_testSimplePhoneSATSmall_remove4__9)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove4__9)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove4__9)).isEmpty());
        this.solver.addClause(clause1);
        VecInt clause2 = new VecInt();
        clause2.push(2);
        clause2.push((-1));
        this.solver.addClause(clause2);
        VecInt clause3 = new VecInt();
        clause3.push(3);
        clause3.push((-2));
        this.solver.addClause(clause3);
        VecInt clause8 = new VecInt();
        clause8.push(2);
        clause8.push((-3));
        this.solver.addClause(clause8);
        VecInt clause4 = new VecInt();
        clause4.push((-4));
        clause4.push(1);
        this.solver.addClause(clause4);
        VecInt clause5 = new VecInt();
        clause5.push((-5));
        clause5.push(4);
        this.solver.addClause(clause5);
        VecInt clause6 = new VecInt();
        clause6.push((-6));
        this.solver.addClause(clause6);
        VecInt clause7 = new VecInt();
        clause7.push(5);
        clause7.push(6);
        clause7.push((-4));
        this.solver.addAtLeast(clause6, 1);
        this.solver.isSatisfiable();
        VecInt bound1 = new VecInt();
        bound1.push(3);
        this.solver.findModel(bound1);
        VecInt bound2 = new VecInt();
        bound2.push((-3));
        this.solver.findModel(bound2);
        VecInt bound3 = new VecInt();
        bound3.push(5);
        bound3.push(3);
        this.solver.findModel(bound3);
        VecInt bound4 = new VecInt();
        bound4.push(5);
        bound4.push((-3));
        this.solver.findModel(bound4);
        VecInt bound5 = new VecInt();
        bound5.push(4);
        bound5.push((-3));
        this.solver.findModel(bound5);
        VecInt bound6 = new VecInt();
        bound6.push(4);
        bound6.push(3);
        this.solver.findModel(bound6);
        VecInt bound7 = new VecInt();
        bound7.push(4);
        int[] model = this.solver.findModel(bound7);
        Set<Integer> satisfiedModel = new HashSet<Integer>();
        for (int i : model) {
            satisfiedModel.add(new Integer(i));
        }
        satisfiedModel.contains(new Integer(4));
        satisfiedModel.contains(new Integer(1));
        satisfiedModel.contains(new Integer(2));
    }

    @Test(timeout = 30000)
    public void testSimplePhoneSATSmall_remove8_remove726() throws Exception, ContradictionException, TimeoutException {
        VecInt clause0 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause0)).toString());
        Assert.assertTrue(((VecInt) (clause0)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove8__4 = clause0.push(1);
        Assert.assertEquals("1", ((VecInt) (o_testSimplePhoneSATSmall_remove8__4)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove8__4)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove8__4)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove8__5 = this.solver.addClause(clause0);
        Assert.assertTrue(((UnitClause) (o_testSimplePhoneSATSmall_remove8__5)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((UnitClause) (o_testSimplePhoneSATSmall_remove8__5)).getActivity())), 0.1);
        Assert.assertEquals("1", ((UnitClause) (o_testSimplePhoneSATSmall_remove8__5)).toString());
        VecInt clause1 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause1)).toString());
        Assert.assertTrue(((VecInt) (clause1)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove8__9 = clause1.push(1);
        Assert.assertEquals("1", ((VecInt) (o_testSimplePhoneSATSmall_remove8__9)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove8__9)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove8__9)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove8__10 = clause1.push((-2));
        Assert.assertEquals("1,-2", ((VecInt) (o_testSimplePhoneSATSmall_remove8__10)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove8__10)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove8__10)).isEmpty());
        this.solver.addClause(clause1);
        VecInt clause2 = new VecInt();
        clause2.push(2);
        clause2.push((-1));
        VecInt clause3 = new VecInt();
        clause3.push(3);
        clause3.push((-2));
        this.solver.addClause(clause3);
        VecInt clause8 = new VecInt();
        clause8.push(2);
        clause8.push((-3));
        this.solver.addClause(clause8);
        VecInt clause4 = new VecInt();
        clause4.push((-4));
        clause4.push(1);
        this.solver.addClause(clause4);
        VecInt clause5 = new VecInt();
        clause5.push((-5));
        clause5.push(4);
        this.solver.addClause(clause5);
        VecInt clause6 = new VecInt();
        clause6.push((-6));
        clause6.push(4);
        this.solver.addClause(clause6);
        VecInt clause7 = new VecInt();
        clause7.push(5);
        clause7.push(6);
        clause7.push((-4));
        this.solver.addAtLeast(clause6, 1);
        this.solver.isSatisfiable();
        VecInt bound1 = new VecInt();
        bound1.push(3);
        this.solver.findModel(bound1);
        VecInt bound2 = new VecInt();
        bound2.push((-3));
        this.solver.findModel(bound2);
        VecInt bound3 = new VecInt();
        bound3.push(5);
        bound3.push(3);
        this.solver.findModel(bound3);
        VecInt bound4 = new VecInt();
        bound4.push(5);
        bound4.push((-3));
        this.solver.findModel(bound4);
        VecInt bound5 = new VecInt();
        bound5.push(4);
        bound5.push((-3));
        this.solver.findModel(bound5);
        VecInt bound6 = new VecInt();
        bound6.push(4);
        bound6.push(3);
        this.solver.findModel(bound6);
        VecInt bound7 = new VecInt();
        bound7.push(4);
        int[] model = this.solver.findModel(bound7);
        Set<Integer> satisfiedModel = new HashSet<Integer>();
        for (int i : model) {
            satisfiedModel.add(new Integer(i));
        }
        satisfiedModel.contains(new Integer(1));
        satisfiedModel.contains(new Integer(2));
    }

    @Test(timeout = 30000)
    public void testSimplePhoneSATSmall_remove11_remove574() throws Exception, ContradictionException, TimeoutException {
        VecInt clause0 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause0)).toString());
        Assert.assertTrue(((VecInt) (clause0)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove11__4 = clause0.push(1);
        Assert.assertEquals("1", ((VecInt) (o_testSimplePhoneSATSmall_remove11__4)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove11__4)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove11__4)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove11__5 = this.solver.addClause(clause0);
        Assert.assertTrue(((UnitClause) (o_testSimplePhoneSATSmall_remove11__5)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((UnitClause) (o_testSimplePhoneSATSmall_remove11__5)).getActivity())), 0.1);
        Assert.assertEquals("1", ((UnitClause) (o_testSimplePhoneSATSmall_remove11__5)).toString());
        VecInt clause1 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause1)).toString());
        Assert.assertTrue(((VecInt) (clause1)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove11__9 = clause1.push(1);
        Assert.assertEquals("1", ((VecInt) (o_testSimplePhoneSATSmall_remove11__9)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove11__9)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove11__9)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove11__10 = clause1.push((-2));
        Assert.assertEquals("1,-2", ((VecInt) (o_testSimplePhoneSATSmall_remove11__10)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove11__10)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove11__10)).isEmpty());
        this.solver.addClause(clause1);
        VecInt clause2 = new VecInt();
        clause2.push(2);
        clause2.push((-1));
        this.solver.addClause(clause2);
        VecInt clause3 = new VecInt();
        clause3.push(3);
        clause3.push((-2));
        VecInt clause8 = new VecInt();
        clause8.push(2);
        clause8.push((-3));
        this.solver.addClause(clause8);
        VecInt clause4 = new VecInt();
        clause4.push((-4));
        clause4.push(1);
        this.solver.addClause(clause4);
        VecInt clause5 = new VecInt();
        clause5.push((-5));
        clause5.push(4);
        this.solver.addClause(clause5);
        VecInt clause6 = new VecInt();
        clause6.push((-6));
        clause6.push(4);
        this.solver.addClause(clause6);
        VecInt clause7 = new VecInt();
        clause7.push(5);
        clause7.push(6);
        clause7.push((-4));
        this.solver.addAtLeast(clause6, 1);
        this.solver.isSatisfiable();
        VecInt bound1 = new VecInt();
        bound1.push(3);
        this.solver.findModel(bound1);
        VecInt bound2 = new VecInt();
        bound2.push((-3));
        this.solver.findModel(bound2);
        VecInt bound3 = new VecInt();
        bound3.push(5);
        bound3.push(3);
        this.solver.findModel(bound3);
        VecInt bound4 = new VecInt();
        bound4.push(5);
        bound4.push((-3));
        this.solver.findModel(bound4);
        VecInt bound5 = new VecInt();
        bound5.push(4);
        bound5.push((-3));
        this.solver.findModel(bound5);
        VecInt bound6 = new VecInt();
        bound6.push(4);
        bound6.push(3);
        this.solver.findModel(bound6);
        VecInt bound7 = new VecInt();
        bound7.push(4);
        int[] model = this.solver.findModel(bound7);
        Set<Integer> satisfiedModel = new HashSet<Integer>();
        for (int i : model) {
            satisfiedModel.add(new Integer(i));
        }
        satisfiedModel.contains(new Integer(1));
        satisfiedModel.contains(new Integer(2));
    }

    @Test(timeout = 30000)
    public void testSimplePhoneSATSmall_remove8_remove684() throws Exception, ContradictionException, TimeoutException {
        VecInt clause0 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause0)).toString());
        Assert.assertTrue(((VecInt) (clause0)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove8__4 = clause0.push(1);
        Assert.assertEquals("1", ((VecInt) (o_testSimplePhoneSATSmall_remove8__4)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove8__4)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove8__4)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove8__5 = this.solver.addClause(clause0);
        Assert.assertTrue(((UnitClause) (o_testSimplePhoneSATSmall_remove8__5)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((UnitClause) (o_testSimplePhoneSATSmall_remove8__5)).getActivity())), 0.1);
        Assert.assertEquals("1", ((UnitClause) (o_testSimplePhoneSATSmall_remove8__5)).toString());
        VecInt clause1 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause1)).toString());
        Assert.assertTrue(((VecInt) (clause1)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove8__9 = clause1.push(1);
        Assert.assertEquals("1", ((VecInt) (o_testSimplePhoneSATSmall_remove8__9)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove8__9)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove8__9)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove8__10 = clause1.push((-2));
        Assert.assertEquals("1,-2", ((VecInt) (o_testSimplePhoneSATSmall_remove8__10)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove8__10)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove8__10)).isEmpty());
        this.solver.addClause(clause1);
        VecInt clause2 = new VecInt();
        clause2.push(2);
        clause2.push((-1));
        VecInt clause3 = new VecInt();
        clause3.push(3);
        clause3.push((-2));
        this.solver.addClause(clause3);
        VecInt clause8 = new VecInt();
        clause8.push(2);
        clause8.push((-3));
        this.solver.addClause(clause8);
        VecInt clause4 = new VecInt();
        clause4.push((-4));
        clause4.push(1);
        this.solver.addClause(clause4);
        VecInt clause5 = new VecInt();
        clause5.push((-5));
        clause5.push(4);
        this.solver.addClause(clause5);
        VecInt clause6 = new VecInt();
        clause6.push((-6));
        clause6.push(4);
        this.solver.addClause(clause6);
        VecInt clause7 = new VecInt();
        clause7.push(5);
        clause7.push(6);
        clause7.push((-4));
        this.solver.isSatisfiable();
        VecInt bound1 = new VecInt();
        bound1.push(3);
        this.solver.findModel(bound1);
        VecInt bound2 = new VecInt();
        bound2.push((-3));
        this.solver.findModel(bound2);
        VecInt bound3 = new VecInt();
        bound3.push(5);
        bound3.push(3);
        this.solver.findModel(bound3);
        VecInt bound4 = new VecInt();
        bound4.push(5);
        bound4.push((-3));
        this.solver.findModel(bound4);
        VecInt bound5 = new VecInt();
        bound5.push(4);
        bound5.push((-3));
        this.solver.findModel(bound5);
        VecInt bound6 = new VecInt();
        bound6.push(4);
        bound6.push(3);
        this.solver.findModel(bound6);
        VecInt bound7 = new VecInt();
        bound7.push(4);
        int[] model = this.solver.findModel(bound7);
        Set<Integer> satisfiedModel = new HashSet<Integer>();
        for (int i : model) {
            satisfiedModel.add(new Integer(i));
        }
        satisfiedModel.contains(new Integer(4));
        satisfiedModel.contains(new Integer(1));
        satisfiedModel.contains(new Integer(2));
    }

    @Test(timeout = 30000)
    public void testSimplePhoneSATSmall_remove8_remove601() throws Exception, ContradictionException, TimeoutException {
        VecInt clause0 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause0)).toString());
        Assert.assertTrue(((VecInt) (clause0)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove8__4 = clause0.push(1);
        Assert.assertEquals("1", ((VecInt) (o_testSimplePhoneSATSmall_remove8__4)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove8__4)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove8__4)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove8__5 = this.solver.addClause(clause0);
        Assert.assertTrue(((UnitClause) (o_testSimplePhoneSATSmall_remove8__5)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((UnitClause) (o_testSimplePhoneSATSmall_remove8__5)).getActivity())), 0.1);
        Assert.assertEquals("1", ((UnitClause) (o_testSimplePhoneSATSmall_remove8__5)).toString());
        VecInt clause1 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause1)).toString());
        Assert.assertTrue(((VecInt) (clause1)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove8__9 = clause1.push(1);
        Assert.assertEquals("1", ((VecInt) (o_testSimplePhoneSATSmall_remove8__9)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove8__9)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove8__9)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove8__10 = clause1.push((-2));
        Assert.assertEquals("1,-2", ((VecInt) (o_testSimplePhoneSATSmall_remove8__10)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove8__10)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove8__10)).isEmpty());
        VecInt clause2 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause2)).toString());
        Assert.assertTrue(((VecInt) (clause2)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove8_remove601__22 = clause2.push(2);
        Assert.assertEquals("2", ((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601__22)).toString());
        Assert.assertEquals(2, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601__22)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601__22)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove8_remove601__23 = clause2.push((-1));
        Assert.assertEquals("2,-1", ((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601__23)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601__23)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601__23)).isEmpty());
        VecInt clause3 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause3)).toString());
        Assert.assertTrue(((VecInt) (clause3)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove8_remove601__28 = clause3.push(3);
        Assert.assertEquals("3", ((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601__28)).toString());
        Assert.assertEquals(3, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601__28)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601__28)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove8_remove601__29 = clause3.push((-2));
        Assert.assertEquals("3,-2", ((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601__29)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601__29)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601__29)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove8_remove601__31 = this.solver.addClause(clause3);
        Assert.assertFalse(((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove8_remove601__31)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove8_remove601__31)).getActivity())), 0.1);
        int[] array_647957772 = new int[]{5,6};
        	int[] array_1445861917 = (int[])((org.sat4j.minisat.constraints.cnf.OriginalBinaryClause)o_testSimplePhoneSATSmall_remove8_remove601__31).getLits();
        	for(int ii = 0; ii <array_647957772.length; ii++) {
        		org.junit.Assert.assertEquals(array_647957772[ii], array_1445861917[ii]);
        	};
        Assert.assertEquals("-2[?] 3[?]", ((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove8_remove601__31)).toString());
        Assert.assertEquals(5, ((int) (((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove8_remove601__31)).hashCode())));
        VecInt clause8 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause8)).toString());
        Assert.assertTrue(((VecInt) (clause8)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove8_remove601__34 = clause8.push(2);
        Assert.assertEquals("2", ((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601__34)).toString());
        Assert.assertEquals(2, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601__34)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601__34)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove8_remove601__35 = clause8.push((-3));
        Assert.assertEquals("2,-3", ((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601__35)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601__35)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601__35)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove8_remove601__37 = this.solver.addClause(clause8);
        Assert.assertFalse(((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove8_remove601__37)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove8_remove601__37)).getActivity())), 0.1);
        int[] array_993563436 = new int[]{4,7};
        	int[] array_15742801 = (int[])((org.sat4j.minisat.constraints.cnf.OriginalBinaryClause)o_testSimplePhoneSATSmall_remove8_remove601__37).getLits();
        	for(int ii = 0; ii <array_993563436.length; ii++) {
        		org.junit.Assert.assertEquals(array_993563436[ii], array_15742801[ii]);
        	};
        Assert.assertEquals("2[?] -3[?]", ((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove8_remove601__37)).toString());
        Assert.assertEquals(5, ((int) (((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove8_remove601__37)).hashCode())));
        VecInt clause4 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause4)).toString());
        Assert.assertTrue(((VecInt) (clause4)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove8_remove601__41 = clause4.push((-4));
        Assert.assertEquals("-4", ((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601__41)).toString());
        Assert.assertEquals(-4, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601__41)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601__41)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove8_remove601__43 = clause4.push(1);
        Assert.assertEquals("-4,1", ((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601__43)).toString());
        Assert.assertEquals(-1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601__43)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601__43)).isEmpty());
        this.solver.addClause(clause4);
        VecInt clause5 = new VecInt();
        clause5.push((-5));
        clause5.push(4);
        this.solver.addClause(clause5);
        VecInt clause6 = new VecInt();
        clause6.push((-6));
        clause6.push(4);
        this.solver.addClause(clause6);
        VecInt clause7 = new VecInt();
        clause7.push(5);
        clause7.push(6);
        clause7.push((-4));
        this.solver.addAtLeast(clause6, 1);
        this.solver.isSatisfiable();
        VecInt bound1 = new VecInt();
        bound1.push(3);
        this.solver.findModel(bound1);
        VecInt bound2 = new VecInt();
        bound2.push((-3));
        this.solver.findModel(bound2);
        VecInt bound3 = new VecInt();
        bound3.push(5);
        bound3.push(3);
        this.solver.findModel(bound3);
        VecInt bound4 = new VecInt();
        bound4.push(5);
        bound4.push((-3));
        this.solver.findModel(bound4);
        VecInt bound5 = new VecInt();
        bound5.push(4);
        bound5.push((-3));
        this.solver.findModel(bound5);
        VecInt bound6 = new VecInt();
        bound6.push(4);
        bound6.push(3);
        this.solver.findModel(bound6);
        VecInt bound7 = new VecInt();
        bound7.push(4);
        int[] model = this.solver.findModel(bound7);
        Set<Integer> satisfiedModel = new HashSet<Integer>();
        for (int i : model) {
            satisfiedModel.add(new Integer(i));
        }
        satisfiedModel.contains(new Integer(4));
        satisfiedModel.contains(new Integer(1));
        satisfiedModel.contains(new Integer(2));
    }

    @Test(timeout = 30000)
    public void testSimplePhoneSATSmall_remove8_remove643() throws Exception, ContradictionException, TimeoutException {
        VecInt clause0 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause0)).toString());
        Assert.assertTrue(((VecInt) (clause0)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove8__4 = clause0.push(1);
        Assert.assertEquals("1", ((VecInt) (o_testSimplePhoneSATSmall_remove8__4)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove8__4)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove8__4)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove8__5 = this.solver.addClause(clause0);
        Assert.assertTrue(((UnitClause) (o_testSimplePhoneSATSmall_remove8__5)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((UnitClause) (o_testSimplePhoneSATSmall_remove8__5)).getActivity())), 0.1);
        Assert.assertEquals("1", ((UnitClause) (o_testSimplePhoneSATSmall_remove8__5)).toString());
        VecInt clause1 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause1)).toString());
        Assert.assertTrue(((VecInt) (clause1)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove8__9 = clause1.push(1);
        Assert.assertEquals("1", ((VecInt) (o_testSimplePhoneSATSmall_remove8__9)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove8__9)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove8__9)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove8__10 = clause1.push((-2));
        Assert.assertEquals("1,-2", ((VecInt) (o_testSimplePhoneSATSmall_remove8__10)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove8__10)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove8__10)).isEmpty());
        this.solver.addClause(clause1);
        VecInt clause2 = new VecInt();
        clause2.push(2);
        clause2.push((-1));
        VecInt clause3 = new VecInt();
        clause3.push(3);
        clause3.push((-2));
        this.solver.addClause(clause3);
        VecInt clause8 = new VecInt();
        clause8.push(2);
        clause8.push((-3));
        this.solver.addClause(clause8);
        VecInt clause4 = new VecInt();
        clause4.push((-4));
        clause4.push(1);
        VecInt clause5 = new VecInt();
        clause5.push((-5));
        clause5.push(4);
        this.solver.addClause(clause5);
        VecInt clause6 = new VecInt();
        clause6.push((-6));
        clause6.push(4);
        this.solver.addClause(clause6);
        VecInt clause7 = new VecInt();
        clause7.push(5);
        clause7.push(6);
        clause7.push((-4));
        this.solver.addAtLeast(clause6, 1);
        this.solver.isSatisfiable();
        VecInt bound1 = new VecInt();
        bound1.push(3);
        this.solver.findModel(bound1);
        VecInt bound2 = new VecInt();
        bound2.push((-3));
        this.solver.findModel(bound2);
        VecInt bound3 = new VecInt();
        bound3.push(5);
        bound3.push(3);
        this.solver.findModel(bound3);
        VecInt bound4 = new VecInt();
        bound4.push(5);
        bound4.push((-3));
        this.solver.findModel(bound4);
        VecInt bound5 = new VecInt();
        bound5.push(4);
        bound5.push((-3));
        this.solver.findModel(bound5);
        VecInt bound6 = new VecInt();
        bound6.push(4);
        bound6.push(3);
        this.solver.findModel(bound6);
        VecInt bound7 = new VecInt();
        bound7.push(4);
        int[] model = this.solver.findModel(bound7);
        Set<Integer> satisfiedModel = new HashSet<Integer>();
        for (int i : model) {
            satisfiedModel.add(new Integer(i));
        }
        satisfiedModel.contains(new Integer(4));
        satisfiedModel.contains(new Integer(1));
        satisfiedModel.contains(new Integer(2));
    }

    @Test(timeout = 30000)
    public void testSimplePhoneSATSmall_remove8_remove688() throws Exception, ContradictionException, TimeoutException {
        VecInt clause0 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause0)).toString());
        Assert.assertTrue(((VecInt) (clause0)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove8__4 = clause0.push(1);
        Assert.assertEquals("1", ((VecInt) (o_testSimplePhoneSATSmall_remove8__4)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove8__4)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove8__4)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove8__5 = this.solver.addClause(clause0);
        Assert.assertTrue(((UnitClause) (o_testSimplePhoneSATSmall_remove8__5)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((UnitClause) (o_testSimplePhoneSATSmall_remove8__5)).getActivity())), 0.1);
        Assert.assertEquals("1", ((UnitClause) (o_testSimplePhoneSATSmall_remove8__5)).toString());
        VecInt clause1 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause1)).toString());
        Assert.assertTrue(((VecInt) (clause1)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove8__9 = clause1.push(1);
        Assert.assertEquals("1", ((VecInt) (o_testSimplePhoneSATSmall_remove8__9)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove8__9)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove8__9)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove8__10 = clause1.push((-2));
        Assert.assertEquals("1,-2", ((VecInt) (o_testSimplePhoneSATSmall_remove8__10)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove8__10)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove8__10)).isEmpty());
        this.solver.addClause(clause1);
        VecInt clause2 = new VecInt();
        clause2.push(2);
        clause2.push((-1));
        VecInt clause3 = new VecInt();
        clause3.push(3);
        clause3.push((-2));
        this.solver.addClause(clause3);
        VecInt clause8 = new VecInt();
        clause8.push(2);
        clause8.push((-3));
        this.solver.addClause(clause8);
        VecInt clause4 = new VecInt();
        clause4.push((-4));
        clause4.push(1);
        this.solver.addClause(clause4);
        VecInt clause5 = new VecInt();
        clause5.push((-5));
        clause5.push(4);
        this.solver.addClause(clause5);
        VecInt clause6 = new VecInt();
        clause6.push((-6));
        clause6.push(4);
        this.solver.addClause(clause6);
        VecInt clause7 = new VecInt();
        clause7.push(5);
        clause7.push(6);
        clause7.push((-4));
        this.solver.addAtLeast(clause6, 1);
        VecInt bound1 = new VecInt();
        bound1.push(3);
        this.solver.findModel(bound1);
        VecInt bound2 = new VecInt();
        bound2.push((-3));
        this.solver.findModel(bound2);
        VecInt bound3 = new VecInt();
        bound3.push(5);
        bound3.push(3);
        this.solver.findModel(bound3);
        VecInt bound4 = new VecInt();
        bound4.push(5);
        bound4.push((-3));
        this.solver.findModel(bound4);
        VecInt bound5 = new VecInt();
        bound5.push(4);
        bound5.push((-3));
        this.solver.findModel(bound5);
        VecInt bound6 = new VecInt();
        bound6.push(4);
        bound6.push(3);
        this.solver.findModel(bound6);
        VecInt bound7 = new VecInt();
        bound7.push(4);
        int[] model = this.solver.findModel(bound7);
        Set<Integer> satisfiedModel = new HashSet<Integer>();
        for (int i : model) {
            satisfiedModel.add(new Integer(i));
        }
        satisfiedModel.contains(new Integer(4));
        satisfiedModel.contains(new Integer(1));
        satisfiedModel.contains(new Integer(2));
    }

    @Test(timeout = 30000)
    public void testSimplePhoneSATSmall_remove11_remove512() throws Exception, ContradictionException, TimeoutException {
        VecInt clause0 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause0)).toString());
        Assert.assertTrue(((VecInt) (clause0)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove11__4 = clause0.push(1);
        Assert.assertEquals("1", ((VecInt) (o_testSimplePhoneSATSmall_remove11__4)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove11__4)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove11__4)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove11__5 = this.solver.addClause(clause0);
        Assert.assertTrue(((UnitClause) (o_testSimplePhoneSATSmall_remove11__5)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((UnitClause) (o_testSimplePhoneSATSmall_remove11__5)).getActivity())), 0.1);
        Assert.assertEquals("1", ((UnitClause) (o_testSimplePhoneSATSmall_remove11__5)).toString());
        VecInt clause1 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause1)).toString());
        Assert.assertTrue(((VecInt) (clause1)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove11__9 = clause1.push(1);
        Assert.assertEquals("1", ((VecInt) (o_testSimplePhoneSATSmall_remove11__9)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove11__9)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove11__9)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove11__10 = clause1.push((-2));
        Assert.assertEquals("1,-2", ((VecInt) (o_testSimplePhoneSATSmall_remove11__10)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove11__10)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove11__10)).isEmpty());
        this.solver.addClause(clause1);
        VecInt clause2 = new VecInt();
        clause2.push(2);
        clause2.push((-1));
        this.solver.addClause(clause2);
        VecInt clause3 = new VecInt();
        clause3.push(3);
        clause3.push((-2));
        VecInt clause8 = new VecInt();
        clause8.push(2);
        clause8.push((-3));
        this.solver.addClause(clause8);
        VecInt clause4 = new VecInt();
        clause4.push((-4));
        clause4.push(1);
        this.solver.addClause(clause4);
        VecInt clause5 = new VecInt();
        clause5.push((-5));
        clause5.push(4);
        this.solver.addClause(clause5);
        VecInt clause6 = new VecInt();
        clause6.push((-6));
        clause6.push(4);
        this.solver.addClause(clause6);
        VecInt clause7 = new VecInt();
        clause7.push(5);
        clause7.push(6);
        clause7.push((-4));
        this.solver.isSatisfiable();
        VecInt bound1 = new VecInt();
        bound1.push(3);
        this.solver.findModel(bound1);
        VecInt bound2 = new VecInt();
        bound2.push((-3));
        this.solver.findModel(bound2);
        VecInt bound3 = new VecInt();
        bound3.push(5);
        bound3.push(3);
        this.solver.findModel(bound3);
        VecInt bound4 = new VecInt();
        bound4.push(5);
        bound4.push((-3));
        this.solver.findModel(bound4);
        VecInt bound5 = new VecInt();
        bound5.push(4);
        bound5.push((-3));
        this.solver.findModel(bound5);
        VecInt bound6 = new VecInt();
        bound6.push(4);
        bound6.push(3);
        this.solver.findModel(bound6);
        VecInt bound7 = new VecInt();
        bound7.push(4);
        int[] model = this.solver.findModel(bound7);
        Set<Integer> satisfiedModel = new HashSet<Integer>();
        for (int i : model) {
            satisfiedModel.add(new Integer(i));
        }
        satisfiedModel.contains(new Integer(4));
        satisfiedModel.contains(new Integer(1));
        satisfiedModel.contains(new Integer(2));
    }

    @Test(timeout = 30000)
    public void testSimplePhoneSATSmall_remove27_remove630() throws Exception, ContradictionException, TimeoutException {
        VecInt clause0 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause0)).toString());
        Assert.assertTrue(((VecInt) (clause0)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove27__4 = clause0.push(1);
        Assert.assertEquals("1", ((VecInt) (o_testSimplePhoneSATSmall_remove27__4)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove27__4)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove27__4)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove27__5 = this.solver.addClause(clause0);
        Assert.assertTrue(((UnitClause) (o_testSimplePhoneSATSmall_remove27__5)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((UnitClause) (o_testSimplePhoneSATSmall_remove27__5)).getActivity())), 0.1);
        Assert.assertEquals("1", ((UnitClause) (o_testSimplePhoneSATSmall_remove27__5)).toString());
        VecInt clause1 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause1)).toString());
        Assert.assertTrue(((VecInt) (clause1)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove27__9 = clause1.push(1);
        Assert.assertEquals("1", ((VecInt) (o_testSimplePhoneSATSmall_remove27__9)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove27__9)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove27__9)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove27__10 = clause1.push((-2));
        Assert.assertEquals("1,-2", ((VecInt) (o_testSimplePhoneSATSmall_remove27__10)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove27__10)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove27__10)).isEmpty());
        this.solver.addClause(clause1);
        VecInt clause2 = new VecInt();
        clause2.push(2);
        clause2.push((-1));
        this.solver.addClause(clause2);
        VecInt clause3 = new VecInt();
        clause3.push(3);
        clause3.push((-2));
        this.solver.addClause(clause3);
        VecInt clause8 = new VecInt();
        clause8.push(2);
        clause8.push((-3));
        this.solver.addClause(clause8);
        VecInt clause4 = new VecInt();
        clause4.push((-4));
        clause4.push(1);
        this.solver.addClause(clause4);
        VecInt clause5 = new VecInt();
        clause5.push((-5));
        clause5.push(4);
        this.solver.addClause(clause5);
        VecInt clause6 = new VecInt();
        clause6.push((-6));
        clause6.push(4);
        VecInt clause7 = new VecInt();
        clause7.push(5);
        clause7.push(6);
        clause7.push((-4));
        this.solver.isSatisfiable();
        VecInt bound1 = new VecInt();
        bound1.push(3);
        this.solver.findModel(bound1);
        VecInt bound2 = new VecInt();
        bound2.push((-3));
        this.solver.findModel(bound2);
        VecInt bound3 = new VecInt();
        bound3.push(5);
        bound3.push(3);
        this.solver.findModel(bound3);
        VecInt bound4 = new VecInt();
        bound4.push(5);
        bound4.push((-3));
        this.solver.findModel(bound4);
        VecInt bound5 = new VecInt();
        bound5.push(4);
        bound5.push((-3));
        this.solver.findModel(bound5);
        VecInt bound6 = new VecInt();
        bound6.push(4);
        bound6.push(3);
        this.solver.findModel(bound6);
        VecInt bound7 = new VecInt();
        bound7.push(4);
        int[] model = this.solver.findModel(bound7);
        Set<Integer> satisfiedModel = new HashSet<Integer>();
        for (int i : model) {
            satisfiedModel.add(new Integer(i));
        }
        satisfiedModel.contains(new Integer(4));
        satisfiedModel.contains(new Integer(1));
        satisfiedModel.contains(new Integer(2));
    }

    @Test(timeout = 30000)
    public void testSimplePhoneSATSmall_remove27_remove618() throws Exception, ContradictionException, TimeoutException {
        VecInt clause0 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause0)).toString());
        Assert.assertTrue(((VecInt) (clause0)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove27__4 = clause0.push(1);
        Assert.assertEquals("1", ((VecInt) (o_testSimplePhoneSATSmall_remove27__4)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove27__4)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove27__4)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove27__5 = this.solver.addClause(clause0);
        Assert.assertTrue(((UnitClause) (o_testSimplePhoneSATSmall_remove27__5)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((UnitClause) (o_testSimplePhoneSATSmall_remove27__5)).getActivity())), 0.1);
        Assert.assertEquals("1", ((UnitClause) (o_testSimplePhoneSATSmall_remove27__5)).toString());
        VecInt clause1 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause1)).toString());
        Assert.assertTrue(((VecInt) (clause1)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove27__9 = clause1.push(1);
        Assert.assertEquals("1", ((VecInt) (o_testSimplePhoneSATSmall_remove27__9)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove27__9)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove27__9)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove27__10 = clause1.push((-2));
        Assert.assertEquals("1,-2", ((VecInt) (o_testSimplePhoneSATSmall_remove27__10)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove27__10)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove27__10)).isEmpty());
        this.solver.addClause(clause1);
        VecInt clause2 = new VecInt();
        clause2.push(2);
        clause2.push((-1));
        this.solver.addClause(clause2);
        VecInt clause3 = new VecInt();
        clause3.push(3);
        clause3.push((-2));
        this.solver.addClause(clause3);
        VecInt clause8 = new VecInt();
        clause8.push(2);
        clause8.push((-3));
        this.solver.addClause(clause8);
        VecInt clause4 = new VecInt();
        clause4.push((-4));
        clause4.push(1);
        this.solver.addClause(clause4);
        VecInt clause5 = new VecInt();
        clause5.push((-5));
        clause5.push(4);
        VecInt clause6 = new VecInt();
        clause6.push((-6));
        clause6.push(4);
        this.solver.addClause(clause6);
        VecInt clause7 = new VecInt();
        clause7.push(5);
        clause7.push(6);
        clause7.push((-4));
        this.solver.isSatisfiable();
        VecInt bound1 = new VecInt();
        bound1.push(3);
        this.solver.findModel(bound1);
        VecInt bound2 = new VecInt();
        bound2.push((-3));
        this.solver.findModel(bound2);
        VecInt bound3 = new VecInt();
        bound3.push(5);
        bound3.push(3);
        this.solver.findModel(bound3);
        VecInt bound4 = new VecInt();
        bound4.push(5);
        bound4.push((-3));
        this.solver.findModel(bound4);
        VecInt bound5 = new VecInt();
        bound5.push(4);
        bound5.push((-3));
        this.solver.findModel(bound5);
        VecInt bound6 = new VecInt();
        bound6.push(4);
        bound6.push(3);
        this.solver.findModel(bound6);
        VecInt bound7 = new VecInt();
        bound7.push(4);
        int[] model = this.solver.findModel(bound7);
        Set<Integer> satisfiedModel = new HashSet<Integer>();
        for (int i : model) {
            satisfiedModel.add(new Integer(i));
        }
        satisfiedModel.contains(new Integer(4));
        satisfiedModel.contains(new Integer(1));
        satisfiedModel.contains(new Integer(2));
    }

    @Test(timeout = 30000)
    public void testSimplePhoneSATSmall_remove11_remove491() throws Exception, ContradictionException, TimeoutException {
        VecInt clause0 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause0)).toString());
        Assert.assertTrue(((VecInt) (clause0)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove11__4 = clause0.push(1);
        Assert.assertEquals("1", ((VecInt) (o_testSimplePhoneSATSmall_remove11__4)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove11__4)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove11__4)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove11__5 = this.solver.addClause(clause0);
        Assert.assertTrue(((UnitClause) (o_testSimplePhoneSATSmall_remove11__5)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((UnitClause) (o_testSimplePhoneSATSmall_remove11__5)).getActivity())), 0.1);
        Assert.assertEquals("1", ((UnitClause) (o_testSimplePhoneSATSmall_remove11__5)).toString());
        VecInt clause1 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause1)).toString());
        Assert.assertTrue(((VecInt) (clause1)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove11__9 = clause1.push(1);
        Assert.assertEquals("1", ((VecInt) (o_testSimplePhoneSATSmall_remove11__9)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove11__9)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove11__9)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove11__10 = clause1.push((-2));
        Assert.assertEquals("1,-2", ((VecInt) (o_testSimplePhoneSATSmall_remove11__10)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove11__10)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove11__10)).isEmpty());
        this.solver.addClause(clause1);
        VecInt clause2 = new VecInt();
        clause2.push(2);
        clause2.push((-1));
        this.solver.addClause(clause2);
        VecInt clause3 = new VecInt();
        clause3.push(3);
        clause3.push((-2));
        VecInt clause8 = new VecInt();
        clause8.push(2);
        clause8.push((-3));
        this.solver.addClause(clause8);
        VecInt clause4 = new VecInt();
        clause4.push((-4));
        clause4.push(1);
        this.solver.addClause(clause4);
        VecInt clause5 = new VecInt();
        clause5.push((-5));
        clause5.push(4);
        VecInt clause6 = new VecInt();
        clause6.push((-6));
        clause6.push(4);
        this.solver.addClause(clause6);
        VecInt clause7 = new VecInt();
        clause7.push(5);
        clause7.push(6);
        clause7.push((-4));
        this.solver.addAtLeast(clause6, 1);
        this.solver.isSatisfiable();
        VecInt bound1 = new VecInt();
        bound1.push(3);
        this.solver.findModel(bound1);
        VecInt bound2 = new VecInt();
        bound2.push((-3));
        this.solver.findModel(bound2);
        VecInt bound3 = new VecInt();
        bound3.push(5);
        bound3.push(3);
        this.solver.findModel(bound3);
        VecInt bound4 = new VecInt();
        bound4.push(5);
        bound4.push((-3));
        this.solver.findModel(bound4);
        VecInt bound5 = new VecInt();
        bound5.push(4);
        bound5.push((-3));
        this.solver.findModel(bound5);
        VecInt bound6 = new VecInt();
        bound6.push(4);
        bound6.push(3);
        this.solver.findModel(bound6);
        VecInt bound7 = new VecInt();
        bound7.push(4);
        int[] model = this.solver.findModel(bound7);
        Set<Integer> satisfiedModel = new HashSet<Integer>();
        for (int i : model) {
            satisfiedModel.add(new Integer(i));
        }
        satisfiedModel.contains(new Integer(4));
        satisfiedModel.contains(new Integer(1));
        satisfiedModel.contains(new Integer(2));
    }

    @Test(timeout = 30000)
    public void testSimplePhoneSATSmall_remove27_remove660() throws Exception, ContradictionException, TimeoutException {
        VecInt clause0 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause0)).toString());
        Assert.assertTrue(((VecInt) (clause0)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove27__4 = clause0.push(1);
        Assert.assertEquals("1", ((VecInt) (o_testSimplePhoneSATSmall_remove27__4)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove27__4)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove27__4)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove27__5 = this.solver.addClause(clause0);
        Assert.assertTrue(((UnitClause) (o_testSimplePhoneSATSmall_remove27__5)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((UnitClause) (o_testSimplePhoneSATSmall_remove27__5)).getActivity())), 0.1);
        Assert.assertEquals("1", ((UnitClause) (o_testSimplePhoneSATSmall_remove27__5)).toString());
        VecInt clause1 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause1)).toString());
        Assert.assertTrue(((VecInt) (clause1)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove27__9 = clause1.push(1);
        Assert.assertEquals("1", ((VecInt) (o_testSimplePhoneSATSmall_remove27__9)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove27__9)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove27__9)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove27__10 = clause1.push((-2));
        Assert.assertEquals("1,-2", ((VecInt) (o_testSimplePhoneSATSmall_remove27__10)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove27__10)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove27__10)).isEmpty());
        this.solver.addClause(clause1);
        VecInt clause2 = new VecInt();
        clause2.push(2);
        clause2.push((-1));
        this.solver.addClause(clause2);
        VecInt clause3 = new VecInt();
        clause3.push(3);
        clause3.push((-2));
        this.solver.addClause(clause3);
        VecInt clause8 = new VecInt();
        clause8.push(2);
        clause8.push((-3));
        this.solver.addClause(clause8);
        VecInt clause4 = new VecInt();
        clause4.push((-4));
        clause4.push(1);
        this.solver.addClause(clause4);
        VecInt clause5 = new VecInt();
        clause5.push((-5));
        clause5.push(4);
        this.solver.addClause(clause5);
        VecInt clause6 = new VecInt();
        clause6.push((-6));
        clause6.push(4);
        this.solver.addClause(clause6);
        VecInt clause7 = new VecInt();
        clause7.push(5);
        clause7.push(6);
        clause7.push((-4));
        this.solver.isSatisfiable();
        VecInt bound1 = new VecInt();
        bound1.push(3);
        this.solver.findModel(bound1);
        VecInt bound2 = new VecInt();
        bound2.push((-3));
        VecInt bound3 = new VecInt();
        bound3.push(5);
        bound3.push(3);
        this.solver.findModel(bound3);
        VecInt bound4 = new VecInt();
        bound4.push(5);
        bound4.push((-3));
        this.solver.findModel(bound4);
        VecInt bound5 = new VecInt();
        bound5.push(4);
        bound5.push((-3));
        this.solver.findModel(bound5);
        VecInt bound6 = new VecInt();
        bound6.push(4);
        bound6.push(3);
        this.solver.findModel(bound6);
        VecInt bound7 = new VecInt();
        bound7.push(4);
        int[] model = this.solver.findModel(bound7);
        Set<Integer> satisfiedModel = new HashSet<Integer>();
        for (int i : model) {
            satisfiedModel.add(new Integer(i));
        }
        satisfiedModel.contains(new Integer(4));
        satisfiedModel.contains(new Integer(1));
        satisfiedModel.contains(new Integer(2));
    }

    @Test(timeout = 30000)
    public void testSimplePhoneSATSmall_remove27_remove672() throws Exception, ContradictionException, TimeoutException {
        VecInt clause0 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause0)).toString());
        Assert.assertTrue(((VecInt) (clause0)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove27__4 = clause0.push(1);
        Assert.assertEquals("1", ((VecInt) (o_testSimplePhoneSATSmall_remove27__4)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove27__4)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove27__4)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove27__5 = this.solver.addClause(clause0);
        Assert.assertTrue(((UnitClause) (o_testSimplePhoneSATSmall_remove27__5)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((UnitClause) (o_testSimplePhoneSATSmall_remove27__5)).getActivity())), 0.1);
        Assert.assertEquals("1", ((UnitClause) (o_testSimplePhoneSATSmall_remove27__5)).toString());
        VecInt clause1 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause1)).toString());
        Assert.assertTrue(((VecInt) (clause1)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove27__9 = clause1.push(1);
        Assert.assertEquals("1", ((VecInt) (o_testSimplePhoneSATSmall_remove27__9)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove27__9)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove27__9)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove27__10 = clause1.push((-2));
        Assert.assertEquals("1,-2", ((VecInt) (o_testSimplePhoneSATSmall_remove27__10)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove27__10)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove27__10)).isEmpty());
        this.solver.addClause(clause1);
        VecInt clause2 = new VecInt();
        clause2.push(2);
        clause2.push((-1));
        this.solver.addClause(clause2);
        VecInt clause3 = new VecInt();
        clause3.push(3);
        clause3.push((-2));
        this.solver.addClause(clause3);
        VecInt clause8 = new VecInt();
        clause8.push(2);
        clause8.push((-3));
        this.solver.addClause(clause8);
        VecInt clause4 = new VecInt();
        clause4.push((-4));
        clause4.push(1);
        this.solver.addClause(clause4);
        VecInt clause5 = new VecInt();
        clause5.push((-5));
        clause5.push(4);
        this.solver.addClause(clause5);
        VecInt clause6 = new VecInt();
        clause6.push((-6));
        clause6.push(4);
        this.solver.addClause(clause6);
        VecInt clause7 = new VecInt();
        clause7.push(5);
        clause7.push(6);
        clause7.push((-4));
        this.solver.isSatisfiable();
        VecInt bound1 = new VecInt();
        bound1.push(3);
        this.solver.findModel(bound1);
        VecInt bound2 = new VecInt();
        bound2.push((-3));
        this.solver.findModel(bound2);
        VecInt bound3 = new VecInt();
        bound3.push(5);
        bound3.push(3);
        VecInt bound4 = new VecInt();
        bound4.push(5);
        bound4.push((-3));
        this.solver.findModel(bound4);
        VecInt bound5 = new VecInt();
        bound5.push(4);
        bound5.push((-3));
        this.solver.findModel(bound5);
        VecInt bound6 = new VecInt();
        bound6.push(4);
        bound6.push(3);
        this.solver.findModel(bound6);
        VecInt bound7 = new VecInt();
        bound7.push(4);
        int[] model = this.solver.findModel(bound7);
        Set<Integer> satisfiedModel = new HashSet<Integer>();
        for (int i : model) {
            satisfiedModel.add(new Integer(i));
        }
        satisfiedModel.contains(new Integer(4));
        satisfiedModel.contains(new Integer(1));
        satisfiedModel.contains(new Integer(2));
    }

    @Test(timeout = 30000)
    public void testSimplePhoneSATSmall_remove27_remove682() throws Exception, ContradictionException, TimeoutException {
        VecInt clause0 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause0)).toString());
        Assert.assertTrue(((VecInt) (clause0)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove27__4 = clause0.push(1);
        Assert.assertEquals("1", ((VecInt) (o_testSimplePhoneSATSmall_remove27__4)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove27__4)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove27__4)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove27__5 = this.solver.addClause(clause0);
        Assert.assertTrue(((UnitClause) (o_testSimplePhoneSATSmall_remove27__5)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((UnitClause) (o_testSimplePhoneSATSmall_remove27__5)).getActivity())), 0.1);
        Assert.assertEquals("1", ((UnitClause) (o_testSimplePhoneSATSmall_remove27__5)).toString());
        VecInt clause1 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause1)).toString());
        Assert.assertTrue(((VecInt) (clause1)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove27__9 = clause1.push(1);
        Assert.assertEquals("1", ((VecInt) (o_testSimplePhoneSATSmall_remove27__9)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove27__9)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove27__9)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove27__10 = clause1.push((-2));
        Assert.assertEquals("1,-2", ((VecInt) (o_testSimplePhoneSATSmall_remove27__10)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove27__10)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove27__10)).isEmpty());
        this.solver.addClause(clause1);
        VecInt clause2 = new VecInt();
        clause2.push(2);
        clause2.push((-1));
        this.solver.addClause(clause2);
        VecInt clause3 = new VecInt();
        clause3.push(3);
        clause3.push((-2));
        this.solver.addClause(clause3);
        VecInt clause8 = new VecInt();
        clause8.push(2);
        clause8.push((-3));
        this.solver.addClause(clause8);
        VecInt clause4 = new VecInt();
        clause4.push((-4));
        clause4.push(1);
        this.solver.addClause(clause4);
        VecInt clause5 = new VecInt();
        clause5.push((-5));
        clause5.push(4);
        this.solver.addClause(clause5);
        VecInt clause6 = new VecInt();
        clause6.push((-6));
        clause6.push(4);
        this.solver.addClause(clause6);
        VecInt clause7 = new VecInt();
        clause7.push(5);
        clause7.push(6);
        clause7.push((-4));
        this.solver.isSatisfiable();
        VecInt bound1 = new VecInt();
        bound1.push(3);
        this.solver.findModel(bound1);
        VecInt bound2 = new VecInt();
        bound2.push((-3));
        this.solver.findModel(bound2);
        VecInt bound3 = new VecInt();
        bound3.push(5);
        bound3.push(3);
        this.solver.findModel(bound3);
        VecInt bound4 = new VecInt();
        bound4.push(5);
        bound4.push((-3));
        VecInt bound5 = new VecInt();
        bound5.push(4);
        bound5.push((-3));
        this.solver.findModel(bound5);
        VecInt bound6 = new VecInt();
        bound6.push(4);
        bound6.push(3);
        this.solver.findModel(bound6);
        VecInt bound7 = new VecInt();
        bound7.push(4);
        int[] model = this.solver.findModel(bound7);
        Set<Integer> satisfiedModel = new HashSet<Integer>();
        for (int i : model) {
            satisfiedModel.add(new Integer(i));
        }
        satisfiedModel.contains(new Integer(4));
        satisfiedModel.contains(new Integer(1));
        satisfiedModel.contains(new Integer(2));
    }

    @Test(timeout = 30000)
    public void testSimplePhoneSATSmall_remove27_remove692() throws Exception, ContradictionException, TimeoutException {
        VecInt clause0 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause0)).toString());
        Assert.assertTrue(((VecInt) (clause0)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove27__4 = clause0.push(1);
        Assert.assertEquals("1", ((VecInt) (o_testSimplePhoneSATSmall_remove27__4)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove27__4)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove27__4)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove27__5 = this.solver.addClause(clause0);
        Assert.assertTrue(((UnitClause) (o_testSimplePhoneSATSmall_remove27__5)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((UnitClause) (o_testSimplePhoneSATSmall_remove27__5)).getActivity())), 0.1);
        Assert.assertEquals("1", ((UnitClause) (o_testSimplePhoneSATSmall_remove27__5)).toString());
        VecInt clause1 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause1)).toString());
        Assert.assertTrue(((VecInt) (clause1)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove27__9 = clause1.push(1);
        Assert.assertEquals("1", ((VecInt) (o_testSimplePhoneSATSmall_remove27__9)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove27__9)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove27__9)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove27__10 = clause1.push((-2));
        Assert.assertEquals("1,-2", ((VecInt) (o_testSimplePhoneSATSmall_remove27__10)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove27__10)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove27__10)).isEmpty());
        this.solver.addClause(clause1);
        VecInt clause2 = new VecInt();
        clause2.push(2);
        clause2.push((-1));
        this.solver.addClause(clause2);
        VecInt clause3 = new VecInt();
        clause3.push(3);
        clause3.push((-2));
        this.solver.addClause(clause3);
        VecInt clause8 = new VecInt();
        clause8.push(2);
        clause8.push((-3));
        this.solver.addClause(clause8);
        VecInt clause4 = new VecInt();
        clause4.push((-4));
        clause4.push(1);
        this.solver.addClause(clause4);
        VecInt clause5 = new VecInt();
        clause5.push((-5));
        clause5.push(4);
        this.solver.addClause(clause5);
        VecInt clause6 = new VecInt();
        clause6.push((-6));
        clause6.push(4);
        this.solver.addClause(clause6);
        VecInt clause7 = new VecInt();
        clause7.push(5);
        clause7.push(6);
        clause7.push((-4));
        this.solver.isSatisfiable();
        VecInt bound1 = new VecInt();
        bound1.push(3);
        this.solver.findModel(bound1);
        VecInt bound2 = new VecInt();
        bound2.push((-3));
        this.solver.findModel(bound2);
        VecInt bound3 = new VecInt();
        bound3.push(5);
        bound3.push(3);
        this.solver.findModel(bound3);
        VecInt bound4 = new VecInt();
        bound4.push(5);
        bound4.push((-3));
        this.solver.findModel(bound4);
        VecInt bound5 = new VecInt();
        bound5.push(4);
        bound5.push((-3));
        VecInt bound6 = new VecInt();
        bound6.push(4);
        bound6.push(3);
        this.solver.findModel(bound6);
        VecInt bound7 = new VecInt();
        bound7.push(4);
        int[] model = this.solver.findModel(bound7);
        Set<Integer> satisfiedModel = new HashSet<Integer>();
        for (int i : model) {
            satisfiedModel.add(new Integer(i));
        }
        satisfiedModel.contains(new Integer(4));
        satisfiedModel.contains(new Integer(1));
        satisfiedModel.contains(new Integer(2));
    }

    @Test(timeout = 30000)
    public void testSimplePhoneSATSmall_remove11_remove498() throws Exception, ContradictionException, TimeoutException {
        VecInt clause0 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause0)).toString());
        Assert.assertTrue(((VecInt) (clause0)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove11__4 = clause0.push(1);
        Assert.assertEquals("1", ((VecInt) (o_testSimplePhoneSATSmall_remove11__4)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove11__4)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove11__4)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove11__5 = this.solver.addClause(clause0);
        Assert.assertTrue(((UnitClause) (o_testSimplePhoneSATSmall_remove11__5)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((UnitClause) (o_testSimplePhoneSATSmall_remove11__5)).getActivity())), 0.1);
        Assert.assertEquals("1", ((UnitClause) (o_testSimplePhoneSATSmall_remove11__5)).toString());
        VecInt clause1 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause1)).toString());
        Assert.assertTrue(((VecInt) (clause1)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove11__9 = clause1.push(1);
        Assert.assertEquals("1", ((VecInt) (o_testSimplePhoneSATSmall_remove11__9)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove11__9)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove11__9)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove11__10 = clause1.push((-2));
        Assert.assertEquals("1,-2", ((VecInt) (o_testSimplePhoneSATSmall_remove11__10)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove11__10)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove11__10)).isEmpty());
        this.solver.addClause(clause1);
        VecInt clause2 = new VecInt();
        clause2.push(2);
        clause2.push((-1));
        this.solver.addClause(clause2);
        VecInt clause3 = new VecInt();
        clause3.push(3);
        clause3.push((-2));
        VecInt clause8 = new VecInt();
        clause8.push(2);
        clause8.push((-3));
        this.solver.addClause(clause8);
        VecInt clause4 = new VecInt();
        clause4.push((-4));
        clause4.push(1);
        this.solver.addClause(clause4);
        VecInt clause5 = new VecInt();
        clause5.push((-5));
        clause5.push(4);
        this.solver.addClause(clause5);
        VecInt clause6 = new VecInt();
        clause6.push((-6));
        clause6.push(4);
        VecInt clause7 = new VecInt();
        clause7.push(5);
        clause7.push(6);
        clause7.push((-4));
        this.solver.addAtLeast(clause6, 1);
        this.solver.isSatisfiable();
        VecInt bound1 = new VecInt();
        bound1.push(3);
        this.solver.findModel(bound1);
        VecInt bound2 = new VecInt();
        bound2.push((-3));
        this.solver.findModel(bound2);
        VecInt bound3 = new VecInt();
        bound3.push(5);
        bound3.push(3);
        this.solver.findModel(bound3);
        VecInt bound4 = new VecInt();
        bound4.push(5);
        bound4.push((-3));
        this.solver.findModel(bound4);
        VecInt bound5 = new VecInt();
        bound5.push(4);
        bound5.push((-3));
        this.solver.findModel(bound5);
        VecInt bound6 = new VecInt();
        bound6.push(4);
        bound6.push(3);
        this.solver.findModel(bound6);
        VecInt bound7 = new VecInt();
        bound7.push(4);
        int[] model = this.solver.findModel(bound7);
        Set<Integer> satisfiedModel = new HashSet<Integer>();
        for (int i : model) {
            satisfiedModel.add(new Integer(i));
        }
        satisfiedModel.contains(new Integer(4));
        satisfiedModel.contains(new Integer(1));
        satisfiedModel.contains(new Integer(2));
    }

    @Test(timeout = 30000)
    public void testSimplePhoneSATSmall_remove27_remove645() throws Exception, ContradictionException, TimeoutException {
        VecInt clause0 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause0)).toString());
        Assert.assertTrue(((VecInt) (clause0)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove27__4 = clause0.push(1);
        Assert.assertEquals("1", ((VecInt) (o_testSimplePhoneSATSmall_remove27__4)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove27__4)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove27__4)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove27__5 = this.solver.addClause(clause0);
        Assert.assertTrue(((UnitClause) (o_testSimplePhoneSATSmall_remove27__5)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((UnitClause) (o_testSimplePhoneSATSmall_remove27__5)).getActivity())), 0.1);
        Assert.assertEquals("1", ((UnitClause) (o_testSimplePhoneSATSmall_remove27__5)).toString());
        VecInt clause1 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause1)).toString());
        Assert.assertTrue(((VecInt) (clause1)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove27__9 = clause1.push(1);
        Assert.assertEquals("1", ((VecInt) (o_testSimplePhoneSATSmall_remove27__9)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove27__9)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove27__9)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove27__10 = clause1.push((-2));
        Assert.assertEquals("1,-2", ((VecInt) (o_testSimplePhoneSATSmall_remove27__10)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove27__10)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove27__10)).isEmpty());
        this.solver.addClause(clause1);
        VecInt clause2 = new VecInt();
        clause2.push(2);
        clause2.push((-1));
        this.solver.addClause(clause2);
        VecInt clause3 = new VecInt();
        clause3.push(3);
        clause3.push((-2));
        this.solver.addClause(clause3);
        VecInt clause8 = new VecInt();
        clause8.push(2);
        clause8.push((-3));
        this.solver.addClause(clause8);
        VecInt clause4 = new VecInt();
        clause4.push((-4));
        clause4.push(1);
        this.solver.addClause(clause4);
        VecInt clause5 = new VecInt();
        clause5.push((-5));
        clause5.push(4);
        this.solver.addClause(clause5);
        VecInt clause6 = new VecInt();
        clause6.push((-6));
        clause6.push(4);
        this.solver.addClause(clause6);
        VecInt clause7 = new VecInt();
        clause7.push(5);
        clause7.push(6);
        clause7.push((-4));
        VecInt bound1 = new VecInt();
        bound1.push(3);
        this.solver.findModel(bound1);
        VecInt bound2 = new VecInt();
        bound2.push((-3));
        this.solver.findModel(bound2);
        VecInt bound3 = new VecInt();
        bound3.push(5);
        bound3.push(3);
        this.solver.findModel(bound3);
        VecInt bound4 = new VecInt();
        bound4.push(5);
        bound4.push((-3));
        this.solver.findModel(bound4);
        VecInt bound5 = new VecInt();
        bound5.push(4);
        bound5.push((-3));
        this.solver.findModel(bound5);
        VecInt bound6 = new VecInt();
        bound6.push(4);
        bound6.push(3);
        this.solver.findModel(bound6);
        VecInt bound7 = new VecInt();
        bound7.push(4);
        int[] model = this.solver.findModel(bound7);
        Set<Integer> satisfiedModel = new HashSet<Integer>();
        for (int i : model) {
            satisfiedModel.add(new Integer(i));
        }
        satisfiedModel.contains(new Integer(4));
        satisfiedModel.contains(new Integer(1));
        satisfiedModel.contains(new Integer(2));
    }

    @Test(timeout = 30000)
    public void testSimplePhoneSATSmall_remove11_remove515() throws Exception, ContradictionException, TimeoutException {
        VecInt clause0 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause0)).toString());
        Assert.assertTrue(((VecInt) (clause0)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove11__4 = clause0.push(1);
        Assert.assertEquals("1", ((VecInt) (o_testSimplePhoneSATSmall_remove11__4)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove11__4)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove11__4)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove11__5 = this.solver.addClause(clause0);
        Assert.assertTrue(((UnitClause) (o_testSimplePhoneSATSmall_remove11__5)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((UnitClause) (o_testSimplePhoneSATSmall_remove11__5)).getActivity())), 0.1);
        Assert.assertEquals("1", ((UnitClause) (o_testSimplePhoneSATSmall_remove11__5)).toString());
        VecInt clause1 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause1)).toString());
        Assert.assertTrue(((VecInt) (clause1)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove11__9 = clause1.push(1);
        Assert.assertEquals("1", ((VecInt) (o_testSimplePhoneSATSmall_remove11__9)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove11__9)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove11__9)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove11__10 = clause1.push((-2));
        Assert.assertEquals("1,-2", ((VecInt) (o_testSimplePhoneSATSmall_remove11__10)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove11__10)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove11__10)).isEmpty());
        this.solver.addClause(clause1);
        VecInt clause2 = new VecInt();
        clause2.push(2);
        clause2.push((-1));
        this.solver.addClause(clause2);
        VecInt clause3 = new VecInt();
        clause3.push(3);
        clause3.push((-2));
        VecInt clause8 = new VecInt();
        clause8.push(2);
        clause8.push((-3));
        this.solver.addClause(clause8);
        VecInt clause4 = new VecInt();
        clause4.push((-4));
        clause4.push(1);
        this.solver.addClause(clause4);
        VecInt clause5 = new VecInt();
        clause5.push((-5));
        clause5.push(4);
        this.solver.addClause(clause5);
        VecInt clause6 = new VecInt();
        clause6.push((-6));
        clause6.push(4);
        this.solver.addClause(clause6);
        VecInt clause7 = new VecInt();
        clause7.push(5);
        clause7.push(6);
        clause7.push((-4));
        this.solver.addAtLeast(clause6, 1);
        VecInt bound1 = new VecInt();
        bound1.push(3);
        this.solver.findModel(bound1);
        VecInt bound2 = new VecInt();
        bound2.push((-3));
        this.solver.findModel(bound2);
        VecInt bound3 = new VecInt();
        bound3.push(5);
        bound3.push(3);
        this.solver.findModel(bound3);
        VecInt bound4 = new VecInt();
        bound4.push(5);
        bound4.push((-3));
        this.solver.findModel(bound4);
        VecInt bound5 = new VecInt();
        bound5.push(4);
        bound5.push((-3));
        this.solver.findModel(bound5);
        VecInt bound6 = new VecInt();
        bound6.push(4);
        bound6.push(3);
        this.solver.findModel(bound6);
        VecInt bound7 = new VecInt();
        bound7.push(4);
        int[] model = this.solver.findModel(bound7);
        Set<Integer> satisfiedModel = new HashSet<Integer>();
        for (int i : model) {
            satisfiedModel.add(new Integer(i));
        }
        satisfiedModel.contains(new Integer(4));
        satisfiedModel.contains(new Integer(1));
        satisfiedModel.contains(new Integer(2));
    }

    @Test(timeout = 30000)
    public void testSimplePhoneSATSmall_remove8_remove627() throws Exception, ContradictionException, TimeoutException {
        VecInt clause0 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause0)).toString());
        Assert.assertTrue(((VecInt) (clause0)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove8__4 = clause0.push(1);
        Assert.assertEquals("1", ((VecInt) (o_testSimplePhoneSATSmall_remove8__4)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove8__4)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove8__4)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove8__5 = this.solver.addClause(clause0);
        Assert.assertTrue(((UnitClause) (o_testSimplePhoneSATSmall_remove8__5)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((UnitClause) (o_testSimplePhoneSATSmall_remove8__5)).getActivity())), 0.1);
        Assert.assertEquals("1", ((UnitClause) (o_testSimplePhoneSATSmall_remove8__5)).toString());
        VecInt clause1 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause1)).toString());
        Assert.assertTrue(((VecInt) (clause1)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove8__9 = clause1.push(1);
        Assert.assertEquals("1", ((VecInt) (o_testSimplePhoneSATSmall_remove8__9)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove8__9)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove8__9)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove8__10 = clause1.push((-2));
        Assert.assertEquals("1,-2", ((VecInt) (o_testSimplePhoneSATSmall_remove8__10)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove8__10)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove8__10)).isEmpty());
        this.solver.addClause(clause1);
        VecInt clause2 = new VecInt();
        clause2.push(2);
        clause2.push((-1));
        VecInt clause3 = new VecInt();
        clause3.push(3);
        clause3.push((-2));
        this.solver.addClause(clause3);
        VecInt clause8 = new VecInt();
        clause8.push(2);
        this.solver.addClause(clause8);
        VecInt clause4 = new VecInt();
        clause4.push((-4));
        clause4.push(1);
        this.solver.addClause(clause4);
        VecInt clause5 = new VecInt();
        clause5.push((-5));
        clause5.push(4);
        this.solver.addClause(clause5);
        VecInt clause6 = new VecInt();
        clause6.push((-6));
        clause6.push(4);
        this.solver.addClause(clause6);
        VecInt clause7 = new VecInt();
        clause7.push(5);
        clause7.push(6);
        clause7.push((-4));
        this.solver.addAtLeast(clause6, 1);
        this.solver.isSatisfiable();
        VecInt bound1 = new VecInt();
        bound1.push(3);
        this.solver.findModel(bound1);
        VecInt bound2 = new VecInt();
        bound2.push((-3));
        this.solver.findModel(bound2);
        VecInt bound3 = new VecInt();
        bound3.push(5);
        bound3.push(3);
        this.solver.findModel(bound3);
        VecInt bound4 = new VecInt();
        bound4.push(5);
        bound4.push((-3));
        this.solver.findModel(bound4);
        VecInt bound5 = new VecInt();
        bound5.push(4);
        bound5.push((-3));
        this.solver.findModel(bound5);
        VecInt bound6 = new VecInt();
        bound6.push(4);
        bound6.push(3);
        this.solver.findModel(bound6);
        VecInt bound7 = new VecInt();
        bound7.push(4);
        int[] model = this.solver.findModel(bound7);
        Set<Integer> satisfiedModel = new HashSet<Integer>();
        for (int i : model) {
            satisfiedModel.add(new Integer(i));
        }
        satisfiedModel.contains(new Integer(4));
        satisfiedModel.contains(new Integer(1));
        satisfiedModel.contains(new Integer(2));
    }

    @Test(timeout = 30000)
    public void testSimplePhoneSATSmall_remove8_remove647() throws Exception, ContradictionException, TimeoutException {
        VecInt clause0 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause0)).toString());
        Assert.assertTrue(((VecInt) (clause0)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove8__4 = clause0.push(1);
        Assert.assertEquals("1", ((VecInt) (o_testSimplePhoneSATSmall_remove8__4)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove8__4)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove8__4)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove8__5 = this.solver.addClause(clause0);
        Assert.assertTrue(((UnitClause) (o_testSimplePhoneSATSmall_remove8__5)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((UnitClause) (o_testSimplePhoneSATSmall_remove8__5)).getActivity())), 0.1);
        Assert.assertEquals("1", ((UnitClause) (o_testSimplePhoneSATSmall_remove8__5)).toString());
        VecInt clause1 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause1)).toString());
        Assert.assertTrue(((VecInt) (clause1)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove8__9 = clause1.push(1);
        Assert.assertEquals("1", ((VecInt) (o_testSimplePhoneSATSmall_remove8__9)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove8__9)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove8__9)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove8__10 = clause1.push((-2));
        Assert.assertEquals("1,-2", ((VecInt) (o_testSimplePhoneSATSmall_remove8__10)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove8__10)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove8__10)).isEmpty());
        this.solver.addClause(clause1);
        VecInt clause2 = new VecInt();
        clause2.push(2);
        clause2.push((-1));
        VecInt clause3 = new VecInt();
        clause3.push(3);
        clause3.push((-2));
        this.solver.addClause(clause3);
        VecInt clause8 = new VecInt();
        clause8.push(2);
        clause8.push((-3));
        this.solver.addClause(clause8);
        VecInt clause4 = new VecInt();
        clause4.push((-4));
        clause4.push(1);
        this.solver.addClause(clause4);
        VecInt clause5 = new VecInt();
        clause5.push(4);
        this.solver.addClause(clause5);
        VecInt clause6 = new VecInt();
        clause6.push((-6));
        clause6.push(4);
        this.solver.addClause(clause6);
        VecInt clause7 = new VecInt();
        clause7.push(5);
        clause7.push(6);
        clause7.push((-4));
        this.solver.addAtLeast(clause6, 1);
        this.solver.isSatisfiable();
        VecInt bound1 = new VecInt();
        bound1.push(3);
        this.solver.findModel(bound1);
        VecInt bound2 = new VecInt();
        bound2.push((-3));
        this.solver.findModel(bound2);
        VecInt bound3 = new VecInt();
        bound3.push(5);
        bound3.push(3);
        this.solver.findModel(bound3);
        VecInt bound4 = new VecInt();
        bound4.push(5);
        bound4.push((-3));
        this.solver.findModel(bound4);
        VecInt bound5 = new VecInt();
        bound5.push(4);
        bound5.push((-3));
        this.solver.findModel(bound5);
        VecInt bound6 = new VecInt();
        bound6.push(4);
        bound6.push(3);
        this.solver.findModel(bound6);
        VecInt bound7 = new VecInt();
        bound7.push(4);
        int[] model = this.solver.findModel(bound7);
        Set<Integer> satisfiedModel = new HashSet<Integer>();
        for (int i : model) {
            satisfiedModel.add(new Integer(i));
        }
        satisfiedModel.contains(new Integer(4));
        satisfiedModel.contains(new Integer(1));
        satisfiedModel.contains(new Integer(2));
    }

    @Test(timeout = 30000)
    public void testSimplePhoneSATSmall_remove8_remove659() throws Exception, ContradictionException, TimeoutException {
        VecInt clause0 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause0)).toString());
        Assert.assertTrue(((VecInt) (clause0)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove8__4 = clause0.push(1);
        Assert.assertEquals("1", ((VecInt) (o_testSimplePhoneSATSmall_remove8__4)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove8__4)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove8__4)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove8__5 = this.solver.addClause(clause0);
        Assert.assertTrue(((UnitClause) (o_testSimplePhoneSATSmall_remove8__5)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((UnitClause) (o_testSimplePhoneSATSmall_remove8__5)).getActivity())), 0.1);
        Assert.assertEquals("1", ((UnitClause) (o_testSimplePhoneSATSmall_remove8__5)).toString());
        VecInt clause1 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause1)).toString());
        Assert.assertTrue(((VecInt) (clause1)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove8__9 = clause1.push(1);
        Assert.assertEquals("1", ((VecInt) (o_testSimplePhoneSATSmall_remove8__9)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove8__9)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove8__9)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove8__10 = clause1.push((-2));
        Assert.assertEquals("1,-2", ((VecInt) (o_testSimplePhoneSATSmall_remove8__10)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove8__10)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove8__10)).isEmpty());
        this.solver.addClause(clause1);
        VecInt clause2 = new VecInt();
        clause2.push(2);
        clause2.push((-1));
        VecInt clause3 = new VecInt();
        clause3.push(3);
        clause3.push((-2));
        this.solver.addClause(clause3);
        VecInt clause8 = new VecInt();
        clause8.push(2);
        clause8.push((-3));
        this.solver.addClause(clause8);
        VecInt clause4 = new VecInt();
        clause4.push((-4));
        clause4.push(1);
        this.solver.addClause(clause4);
        VecInt clause5 = new VecInt();
        clause5.push((-5));
        clause5.push(4);
        this.solver.addClause(clause5);
        VecInt clause6 = new VecInt();
        clause6.push(4);
        this.solver.addClause(clause6);
        VecInt clause7 = new VecInt();
        clause7.push(5);
        clause7.push(6);
        clause7.push((-4));
        this.solver.addAtLeast(clause6, 1);
        this.solver.isSatisfiable();
        VecInt bound1 = new VecInt();
        bound1.push(3);
        this.solver.findModel(bound1);
        VecInt bound2 = new VecInt();
        bound2.push((-3));
        this.solver.findModel(bound2);
        VecInt bound3 = new VecInt();
        bound3.push(5);
        bound3.push(3);
        this.solver.findModel(bound3);
        VecInt bound4 = new VecInt();
        bound4.push(5);
        bound4.push((-3));
        this.solver.findModel(bound4);
        VecInt bound5 = new VecInt();
        bound5.push(4);
        bound5.push((-3));
        this.solver.findModel(bound5);
        VecInt bound6 = new VecInt();
        bound6.push(4);
        bound6.push(3);
        this.solver.findModel(bound6);
        VecInt bound7 = new VecInt();
        bound7.push(4);
        int[] model = this.solver.findModel(bound7);
        Set<Integer> satisfiedModel = new HashSet<Integer>();
        for (int i : model) {
            satisfiedModel.add(new Integer(i));
        }
        satisfiedModel.contains(new Integer(4));
        satisfiedModel.contains(new Integer(1));
        satisfiedModel.contains(new Integer(2));
    }

    @Test(timeout = 30000)
    public void testSimplePhoneSATSmall_remove8_remove651() throws Exception, ContradictionException, TimeoutException {
        VecInt clause0 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause0)).toString());
        Assert.assertTrue(((VecInt) (clause0)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove8__4 = clause0.push(1);
        Assert.assertEquals("1", ((VecInt) (o_testSimplePhoneSATSmall_remove8__4)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove8__4)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove8__4)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove8__5 = this.solver.addClause(clause0);
        Assert.assertTrue(((UnitClause) (o_testSimplePhoneSATSmall_remove8__5)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((UnitClause) (o_testSimplePhoneSATSmall_remove8__5)).getActivity())), 0.1);
        Assert.assertEquals("1", ((UnitClause) (o_testSimplePhoneSATSmall_remove8__5)).toString());
        VecInt clause1 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause1)).toString());
        Assert.assertTrue(((VecInt) (clause1)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove8__9 = clause1.push(1);
        Assert.assertEquals("1", ((VecInt) (o_testSimplePhoneSATSmall_remove8__9)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove8__9)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove8__9)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove8__10 = clause1.push((-2));
        Assert.assertEquals("1,-2", ((VecInt) (o_testSimplePhoneSATSmall_remove8__10)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove8__10)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove8__10)).isEmpty());
        this.solver.addClause(clause1);
        VecInt clause2 = new VecInt();
        clause2.push(2);
        clause2.push((-1));
        VecInt clause3 = new VecInt();
        clause3.push(3);
        clause3.push((-2));
        this.solver.addClause(clause3);
        VecInt clause8 = new VecInt();
        clause8.push(2);
        clause8.push((-3));
        this.solver.addClause(clause8);
        VecInt clause4 = new VecInt();
        clause4.push((-4));
        clause4.push(1);
        this.solver.addClause(clause4);
        VecInt clause5 = new VecInt();
        clause5.push((-5));
        this.solver.addClause(clause5);
        VecInt clause6 = new VecInt();
        clause6.push((-6));
        clause6.push(4);
        this.solver.addClause(clause6);
        VecInt clause7 = new VecInt();
        clause7.push(5);
        clause7.push(6);
        clause7.push((-4));
        this.solver.addAtLeast(clause6, 1);
        this.solver.isSatisfiable();
        VecInt bound1 = new VecInt();
        bound1.push(3);
        this.solver.findModel(bound1);
        VecInt bound2 = new VecInt();
        bound2.push((-3));
        this.solver.findModel(bound2);
        VecInt bound3 = new VecInt();
        bound3.push(5);
        bound3.push(3);
        this.solver.findModel(bound3);
        VecInt bound4 = new VecInt();
        bound4.push(5);
        bound4.push((-3));
        this.solver.findModel(bound4);
        VecInt bound5 = new VecInt();
        bound5.push(4);
        bound5.push((-3));
        this.solver.findModel(bound5);
        VecInt bound6 = new VecInt();
        bound6.push(4);
        bound6.push(3);
        this.solver.findModel(bound6);
        VecInt bound7 = new VecInt();
        bound7.push(4);
        int[] model = this.solver.findModel(bound7);
        Set<Integer> satisfiedModel = new HashSet<Integer>();
        for (int i : model) {
            satisfiedModel.add(new Integer(i));
        }
        satisfiedModel.contains(new Integer(4));
        satisfiedModel.contains(new Integer(1));
        satisfiedModel.contains(new Integer(2));
    }

    @Test(timeout = 30000)
    public void testSimplePhoneSATSmall_remove5_remove307_failAssert6() throws Exception, ContradictionException, TimeoutException {
        try {
            VecInt clause0 = new VecInt();
            IVecInt o_testSimplePhoneSATSmall_remove5__4 = clause0.push(1);
            IConstr o_testSimplePhoneSATSmall_remove5__5 = this.solver.addClause(clause0);
            VecInt clause1 = new VecInt();
            IVecInt o_testSimplePhoneSATSmall_remove5__9 = clause1.push(1);
            IVecInt o_testSimplePhoneSATSmall_remove5__10 = clause1.push((-2));
            VecInt clause2 = new VecInt();
            IVecInt o_testSimplePhoneSATSmall_remove5__14 = clause2.push(2);
            IVecInt o_testSimplePhoneSATSmall_remove5__15 = clause2.push((-1));
            IConstr o_testSimplePhoneSATSmall_remove5__17 = this.solver.addClause(clause2);
            VecInt clause3 = new VecInt();
            IVecInt o_testSimplePhoneSATSmall_remove5__21 = clause3.push(3);
            IVecInt o_testSimplePhoneSATSmall_remove5__22 = clause3.push((-2));
            IConstr o_testSimplePhoneSATSmall_remove5__24 = this.solver.addClause(clause3);
            VecInt clause8 = new VecInt();
            IVecInt o_testSimplePhoneSATSmall_remove5__27 = clause8.push(2);
            IVecInt o_testSimplePhoneSATSmall_remove5__28 = clause8.push((-3));
            this.solver.addClause(clause8);
            VecInt clause4 = new VecInt();
            clause4.push((-4));
            this.solver.addClause(clause4);
            VecInt clause5 = new VecInt();
            clause5.push((-5));
            clause5.push(4);
            this.solver.addClause(clause5);
            VecInt clause6 = new VecInt();
            clause6.push((-6));
            clause6.push(4);
            this.solver.addClause(clause6);
            VecInt clause7 = new VecInt();
            clause7.push(5);
            clause7.push(6);
            clause7.push((-4));
            this.solver.addAtLeast(clause6, 1);
            this.solver.isSatisfiable();
            VecInt bound1 = new VecInt();
            bound1.push(3);
            this.solver.findModel(bound1);
            VecInt bound2 = new VecInt();
            bound2.push((-3));
            this.solver.findModel(bound2);
            VecInt bound3 = new VecInt();
            bound3.push(5);
            bound3.push(3);
            this.solver.findModel(bound3);
            VecInt bound4 = new VecInt();
            bound4.push(5);
            bound4.push((-3));
            this.solver.findModel(bound4);
            VecInt bound5 = new VecInt();
            bound5.push(4);
            bound5.push((-3));
            this.solver.findModel(bound5);
            VecInt bound6 = new VecInt();
            bound6.push(4);
            bound6.push(3);
            this.solver.findModel(bound6);
            VecInt bound7 = new VecInt();
            bound7.push(4);
            int[] model = this.solver.findModel(bound7);
            Set<Integer> satisfiedModel = new HashSet<Integer>();
            for (int i : model) {
                satisfiedModel.add(new Integer(i));
            }
            satisfiedModel.contains(new Integer(4));
            satisfiedModel.contains(new Integer(1));
            satisfiedModel.contains(new Integer(2));
            org.junit.Assert.fail("testSimplePhoneSATSmall_remove5_remove307 should have thrown NullPointerException");
        } catch (NullPointerException expected) {
            Assert.assertEquals(null, expected.getMessage());
        }
    }

    @Test(timeout = 30000)
    public void testSimplePhoneSATSmall_remove4_remove413_failAssert7() throws Exception, ContradictionException, TimeoutException {
        try {
            VecInt clause0 = new VecInt();
            IVecInt o_testSimplePhoneSATSmall_remove4__4 = clause0.push(1);
            IConstr o_testSimplePhoneSATSmall_remove4__5 = this.solver.addClause(clause0);
            VecInt clause1 = new VecInt();
            IVecInt o_testSimplePhoneSATSmall_remove4__9 = clause1.push(1);
            this.solver.addClause(clause1);
            VecInt clause2 = new VecInt();
            clause2.push(2);
            clause2.push((-1));
            this.solver.addClause(clause2);
            VecInt clause3 = new VecInt();
            clause3.push(3);
            clause3.push((-2));
            this.solver.addClause(clause3);
            VecInt clause8 = new VecInt();
            clause8.push((-3));
            this.solver.addClause(clause8);
            VecInt clause4 = new VecInt();
            clause4.push((-4));
            clause4.push(1);
            this.solver.addClause(clause4);
            VecInt clause5 = new VecInt();
            clause5.push((-5));
            clause5.push(4);
            this.solver.addClause(clause5);
            VecInt clause6 = new VecInt();
            clause6.push((-6));
            clause6.push(4);
            this.solver.addClause(clause6);
            VecInt clause7 = new VecInt();
            clause7.push(5);
            clause7.push(6);
            clause7.push((-4));
            this.solver.addAtLeast(clause6, 1);
            this.solver.isSatisfiable();
            VecInt bound1 = new VecInt();
            bound1.push(3);
            this.solver.findModel(bound1);
            VecInt bound2 = new VecInt();
            bound2.push((-3));
            this.solver.findModel(bound2);
            VecInt bound3 = new VecInt();
            bound3.push(5);
            bound3.push(3);
            this.solver.findModel(bound3);
            VecInt bound4 = new VecInt();
            bound4.push(5);
            bound4.push((-3));
            this.solver.findModel(bound4);
            VecInt bound5 = new VecInt();
            bound5.push(4);
            bound5.push((-3));
            this.solver.findModel(bound5);
            VecInt bound6 = new VecInt();
            bound6.push(4);
            bound6.push(3);
            this.solver.findModel(bound6);
            VecInt bound7 = new VecInt();
            bound7.push(4);
            int[] model = this.solver.findModel(bound7);
            Set<Integer> satisfiedModel = new HashSet<Integer>();
            for (int i : model) {
                satisfiedModel.add(new Integer(i));
            }
            satisfiedModel.contains(new Integer(4));
            satisfiedModel.contains(new Integer(1));
            satisfiedModel.contains(new Integer(2));
            org.junit.Assert.fail("testSimplePhoneSATSmall_remove4_remove413 should have thrown ContradictionException");
        } catch (ContradictionException expected) {
            Assert.assertEquals("Creating Empty clause ?", expected.getMessage());
        }
    }

    @Test(timeout = 30000)
    public void testSimplePhoneSATSmall_remove4_remove425_failAssert9() throws Exception, ContradictionException, TimeoutException {
        try {
            VecInt clause0 = new VecInt();
            IVecInt o_testSimplePhoneSATSmall_remove4__4 = clause0.push(1);
            IConstr o_testSimplePhoneSATSmall_remove4__5 = this.solver.addClause(clause0);
            VecInt clause1 = new VecInt();
            IVecInt o_testSimplePhoneSATSmall_remove4__9 = clause1.push(1);
            this.solver.addClause(clause1);
            VecInt clause2 = new VecInt();
            clause2.push(2);
            clause2.push((-1));
            this.solver.addClause(clause2);
            VecInt clause3 = new VecInt();
            clause3.push(3);
            clause3.push((-2));
            this.solver.addClause(clause3);
            VecInt clause8 = new VecInt();
            clause8.push(2);
            clause8.push((-3));
            this.solver.addClause(clause8);
            VecInt clause4 = new VecInt();
            clause4.push((-4));
            this.solver.addClause(clause4);
            VecInt clause5 = new VecInt();
            clause5.push((-5));
            clause5.push(4);
            this.solver.addClause(clause5);
            VecInt clause6 = new VecInt();
            clause6.push((-6));
            clause6.push(4);
            this.solver.addClause(clause6);
            VecInt clause7 = new VecInt();
            clause7.push(5);
            clause7.push(6);
            clause7.push((-4));
            this.solver.addAtLeast(clause6, 1);
            this.solver.isSatisfiable();
            VecInt bound1 = new VecInt();
            bound1.push(3);
            this.solver.findModel(bound1);
            VecInt bound2 = new VecInt();
            bound2.push((-3));
            this.solver.findModel(bound2);
            VecInt bound3 = new VecInt();
            bound3.push(5);
            bound3.push(3);
            this.solver.findModel(bound3);
            VecInt bound4 = new VecInt();
            bound4.push(5);
            bound4.push((-3));
            this.solver.findModel(bound4);
            VecInt bound5 = new VecInt();
            bound5.push(4);
            bound5.push((-3));
            this.solver.findModel(bound5);
            VecInt bound6 = new VecInt();
            bound6.push(4);
            bound6.push(3);
            this.solver.findModel(bound6);
            VecInt bound7 = new VecInt();
            bound7.push(4);
            int[] model = this.solver.findModel(bound7);
            Set<Integer> satisfiedModel = new HashSet<Integer>();
            for (int i : model) {
                satisfiedModel.add(new Integer(i));
            }
            satisfiedModel.contains(new Integer(4));
            satisfiedModel.contains(new Integer(1));
            satisfiedModel.contains(new Integer(2));
            org.junit.Assert.fail("testSimplePhoneSATSmall_remove4_remove425 should have thrown NullPointerException");
        } catch (NullPointerException expected) {
            Assert.assertEquals(null, expected.getMessage());
        }
    }

    @Test(timeout = 30000)
    public void testSimplePhoneSATSmall_remove4_remove392_failAssert10() throws Exception, ContradictionException, TimeoutException {
        try {
            VecInt clause0 = new VecInt();
            IVecInt o_testSimplePhoneSATSmall_remove4__4 = clause0.push(1);
            IConstr o_testSimplePhoneSATSmall_remove4__5 = this.solver.addClause(clause0);
            VecInt clause1 = new VecInt();
            IVecInt o_testSimplePhoneSATSmall_remove4__9 = clause1.push(1);
            this.solver.addClause(clause1);
            VecInt clause2 = new VecInt();
            clause2.push((-1));
            this.solver.addClause(clause2);
            VecInt clause3 = new VecInt();
            clause3.push(3);
            clause3.push((-2));
            this.solver.addClause(clause3);
            VecInt clause8 = new VecInt();
            clause8.push(2);
            clause8.push((-3));
            this.solver.addClause(clause8);
            VecInt clause4 = new VecInt();
            clause4.push((-4));
            clause4.push(1);
            this.solver.addClause(clause4);
            VecInt clause5 = new VecInt();
            clause5.push((-5));
            clause5.push(4);
            this.solver.addClause(clause5);
            VecInt clause6 = new VecInt();
            clause6.push((-6));
            clause6.push(4);
            this.solver.addClause(clause6);
            VecInt clause7 = new VecInt();
            clause7.push(5);
            clause7.push(6);
            clause7.push((-4));
            this.solver.addAtLeast(clause6, 1);
            this.solver.isSatisfiable();
            VecInt bound1 = new VecInt();
            bound1.push(3);
            this.solver.findModel(bound1);
            VecInt bound2 = new VecInt();
            bound2.push((-3));
            this.solver.findModel(bound2);
            VecInt bound3 = new VecInt();
            bound3.push(5);
            bound3.push(3);
            this.solver.findModel(bound3);
            VecInt bound4 = new VecInt();
            bound4.push(5);
            bound4.push((-3));
            this.solver.findModel(bound4);
            VecInt bound5 = new VecInt();
            bound5.push(4);
            bound5.push((-3));
            this.solver.findModel(bound5);
            VecInt bound6 = new VecInt();
            bound6.push(4);
            bound6.push(3);
            this.solver.findModel(bound6);
            VecInt bound7 = new VecInt();
            bound7.push(4);
            int[] model = this.solver.findModel(bound7);
            Set<Integer> satisfiedModel = new HashSet<Integer>();
            for (int i : model) {
                satisfiedModel.add(new Integer(i));
            }
            satisfiedModel.contains(new Integer(4));
            satisfiedModel.contains(new Integer(1));
            satisfiedModel.contains(new Integer(2));
            org.junit.Assert.fail("testSimplePhoneSATSmall_remove4_remove392 should have thrown ContradictionException");
        } catch (ContradictionException expected) {
            Assert.assertEquals("Creating Empty clause ?", expected.getMessage());
        }
    }

    @Test(timeout = 30000)
    public void testSimplePhoneSATSmall_remove8_remove639_failAssert11() throws Exception, ContradictionException, TimeoutException {
        try {
            VecInt clause0 = new VecInt();
            IVecInt o_testSimplePhoneSATSmall_remove8__4 = clause0.push(1);
            IConstr o_testSimplePhoneSATSmall_remove8__5 = this.solver.addClause(clause0);
            VecInt clause1 = new VecInt();
            IVecInt o_testSimplePhoneSATSmall_remove8__9 = clause1.push(1);
            IVecInt o_testSimplePhoneSATSmall_remove8__10 = clause1.push((-2));
            this.solver.addClause(clause1);
            VecInt clause2 = new VecInt();
            clause2.push(2);
            clause2.push((-1));
            VecInt clause3 = new VecInt();
            clause3.push(3);
            clause3.push((-2));
            this.solver.addClause(clause3);
            VecInt clause8 = new VecInt();
            clause8.push(2);
            clause8.push((-3));
            this.solver.addClause(clause8);
            VecInt clause4 = new VecInt();
            clause4.push((-4));
            this.solver.addClause(clause4);
            VecInt clause5 = new VecInt();
            clause5.push((-5));
            clause5.push(4);
            this.solver.addClause(clause5);
            VecInt clause6 = new VecInt();
            clause6.push((-6));
            clause6.push(4);
            this.solver.addClause(clause6);
            VecInt clause7 = new VecInt();
            clause7.push(5);
            clause7.push(6);
            clause7.push((-4));
            this.solver.addAtLeast(clause6, 1);
            this.solver.isSatisfiable();
            VecInt bound1 = new VecInt();
            bound1.push(3);
            this.solver.findModel(bound1);
            VecInt bound2 = new VecInt();
            bound2.push((-3));
            this.solver.findModel(bound2);
            VecInt bound3 = new VecInt();
            bound3.push(5);
            bound3.push(3);
            this.solver.findModel(bound3);
            VecInt bound4 = new VecInt();
            bound4.push(5);
            bound4.push((-3));
            this.solver.findModel(bound4);
            VecInt bound5 = new VecInt();
            bound5.push(4);
            bound5.push((-3));
            this.solver.findModel(bound5);
            VecInt bound6 = new VecInt();
            bound6.push(4);
            bound6.push(3);
            this.solver.findModel(bound6);
            VecInt bound7 = new VecInt();
            bound7.push(4);
            int[] model = this.solver.findModel(bound7);
            Set<Integer> satisfiedModel = new HashSet<Integer>();
            for (int i : model) {
                satisfiedModel.add(new Integer(i));
            }
            satisfiedModel.contains(new Integer(4));
            satisfiedModel.contains(new Integer(1));
            satisfiedModel.contains(new Integer(2));
            org.junit.Assert.fail("testSimplePhoneSATSmall_remove8_remove639 should have thrown NullPointerException");
        } catch (NullPointerException expected) {
            Assert.assertEquals(null, expected.getMessage());
        }
    }

    @Test(timeout = 30000)
    public void testSimplePhoneSATSmall_remove2_remove495_remove2919() throws Exception, ContradictionException, TimeoutException {
        VecInt clause0 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause0)).toString());
        Assert.assertTrue(((VecInt) (clause0)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove2__4 = clause0.push(1);
        Assert.assertEquals("1", ((VecInt) (o_testSimplePhoneSATSmall_remove2__4)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove2__4)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove2__4)).isEmpty());
        VecInt clause1 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause1)).toString());
        Assert.assertTrue(((VecInt) (clause1)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove2__8 = clause1.push(1);
        Assert.assertEquals("1", ((VecInt) (o_testSimplePhoneSATSmall_remove2__8)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove2__8)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove2__8)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove2__9 = clause1.push((-2));
        Assert.assertEquals("1,-2", ((VecInt) (o_testSimplePhoneSATSmall_remove2__9)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove2__9)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove2__9)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove2__11 = this.solver.addClause(clause1);
        Assert.assertFalse(((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove2__11)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove2__11)).getActivity())), 0.1);
        int[] array_532606755 = new int[]{2,5};
        	int[] array_36448589 = (int[])((org.sat4j.minisat.constraints.cnf.OriginalBinaryClause)o_testSimplePhoneSATSmall_remove2__11).getLits();
        	for(int ii = 0; ii <array_532606755.length; ii++) {
        		org.junit.Assert.assertEquals(array_532606755[ii], array_36448589[ii]);
        	};
        Assert.assertEquals("1[?] -2[?]", ((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove2__11)).toString());
        Assert.assertEquals(3, ((int) (((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove2__11)).hashCode())));
        int[] array_156732309 = new int[]{2,5};
        	int[] array_987012541 = (int[])((org.sat4j.minisat.constraints.cnf.OriginalBinaryClause)o_testSimplePhoneSATSmall_remove2__11).getLits();
        	for(int ii = 0; ii <array_156732309.length; ii++) {
        		org.junit.Assert.assertEquals(array_156732309[ii], array_987012541[ii]);
        	};
        int[] array_1890173107 = new int[]{2,5};
        	int[] array_11404287 = (int[])((org.sat4j.minisat.constraints.cnf.OriginalBinaryClause)o_testSimplePhoneSATSmall_remove2__11).getLits();
        	for(int ii = 0; ii <array_1890173107.length; ii++) {
        		org.junit.Assert.assertEquals(array_1890173107[ii], array_11404287[ii]);
        	};
        VecInt clause2 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause2)).toString());
        Assert.assertTrue(((VecInt) (clause2)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove2__14 = clause2.push(2);
        Assert.assertEquals("2", ((VecInt) (o_testSimplePhoneSATSmall_remove2__14)).toString());
        Assert.assertEquals(2, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove2__14)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove2__14)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove2__15 = clause2.push((-1));
        Assert.assertEquals("2,-1", ((VecInt) (o_testSimplePhoneSATSmall_remove2__15)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove2__15)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove2__15)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove2__17 = this.solver.addClause(clause2);
        Assert.assertFalse(((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove2__17)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove2__17)).getActivity())), 0.1);
        int[] array_2116977430 = new int[]{3,4};
        	int[] array_310636155 = (int[])((org.sat4j.minisat.constraints.cnf.OriginalBinaryClause)o_testSimplePhoneSATSmall_remove2__17).getLits();
        	for(int ii = 0; ii <array_2116977430.length; ii++) {
        		org.junit.Assert.assertEquals(array_2116977430[ii], array_310636155[ii]);
        	};
        Assert.assertEquals("-1[?] 2[?]", ((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove2__17)).toString());
        Assert.assertEquals(3, ((int) (((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove2__17)).hashCode())));
        int[] array_662312966 = new int[]{3,4};
        	int[] array_1358729053 = (int[])((org.sat4j.minisat.constraints.cnf.OriginalBinaryClause)o_testSimplePhoneSATSmall_remove2__17).getLits();
        	for(int ii = 0; ii <array_662312966.length; ii++) {
        		org.junit.Assert.assertEquals(array_662312966[ii], array_1358729053[ii]);
        	};
        int[] array_1916443389 = new int[]{3,4};
        	int[] array_116830369 = (int[])((org.sat4j.minisat.constraints.cnf.OriginalBinaryClause)o_testSimplePhoneSATSmall_remove2__17).getLits();
        	for(int ii = 0; ii <array_1916443389.length; ii++) {
        		org.junit.Assert.assertEquals(array_1916443389[ii], array_116830369[ii]);
        	};
        VecInt clause3 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause3)).toString());
        Assert.assertTrue(((VecInt) (clause3)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove2__21 = clause3.push(3);
        Assert.assertEquals("3", ((VecInt) (o_testSimplePhoneSATSmall_remove2__21)).toString());
        Assert.assertEquals(3, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove2__21)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove2__21)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove2__22 = clause3.push((-2));
        Assert.assertEquals("3,-2", ((VecInt) (o_testSimplePhoneSATSmall_remove2__22)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove2__22)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove2__22)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove2__24 = this.solver.addClause(clause3);
        Assert.assertFalse(((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove2__24)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove2__24)).getActivity())), 0.1);
        int[] array_1528007919 = new int[]{5,6};
        	int[] array_26550814 = (int[])((org.sat4j.minisat.constraints.cnf.OriginalBinaryClause)o_testSimplePhoneSATSmall_remove2__24).getLits();
        	for(int ii = 0; ii <array_1528007919.length; ii++) {
        		org.junit.Assert.assertEquals(array_1528007919[ii], array_26550814[ii]);
        	};
        Assert.assertEquals("-2[?] 3[?]", ((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove2__24)).toString());
        Assert.assertEquals(5, ((int) (((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove2__24)).hashCode())));
        int[] array_620499818 = new int[]{5,6};
        	int[] array_1416786863 = (int[])((org.sat4j.minisat.constraints.cnf.OriginalBinaryClause)o_testSimplePhoneSATSmall_remove2__24).getLits();
        	for(int ii = 0; ii <array_620499818.length; ii++) {
        		org.junit.Assert.assertEquals(array_620499818[ii], array_1416786863[ii]);
        	};
        int[] array_215630225 = new int[]{5,6};
        	int[] array_1507503842 = (int[])((org.sat4j.minisat.constraints.cnf.OriginalBinaryClause)o_testSimplePhoneSATSmall_remove2__24).getLits();
        	for(int ii = 0; ii <array_215630225.length; ii++) {
        		org.junit.Assert.assertEquals(array_215630225[ii], array_1507503842[ii]);
        	};
        VecInt clause8 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause8)).toString());
        Assert.assertTrue(((VecInt) (clause8)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove2__27 = clause8.push(2);
        Assert.assertEquals("2", ((VecInt) (o_testSimplePhoneSATSmall_remove2__27)).toString());
        Assert.assertEquals(2, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove2__27)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove2__27)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove2__28 = clause8.push((-3));
        Assert.assertEquals("2,-3", ((VecInt) (o_testSimplePhoneSATSmall_remove2__28)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove2__28)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove2__28)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove2__30 = this.solver.addClause(clause8);
        Assert.assertFalse(((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove2__30)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove2__30)).getActivity())), 0.1);
        int[] array_1900932695 = new int[]{4,7};
        	int[] array_494709928 = (int[])((org.sat4j.minisat.constraints.cnf.OriginalBinaryClause)o_testSimplePhoneSATSmall_remove2__30).getLits();
        	for(int ii = 0; ii <array_1900932695.length; ii++) {
        		org.junit.Assert.assertEquals(array_1900932695[ii], array_494709928[ii]);
        	};
        Assert.assertEquals("2[?] -3[?]", ((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove2__30)).toString());
        Assert.assertEquals(5, ((int) (((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove2__30)).hashCode())));
        int[] array_1488859737 = new int[]{4,7};
        	int[] array_660147378 = (int[])((org.sat4j.minisat.constraints.cnf.OriginalBinaryClause)o_testSimplePhoneSATSmall_remove2__30).getLits();
        	for(int ii = 0; ii <array_1488859737.length; ii++) {
        		org.junit.Assert.assertEquals(array_1488859737[ii], array_660147378[ii]);
        	};
        int[] array_399465337 = new int[]{4,7};
        	int[] array_429322718 = (int[])((org.sat4j.minisat.constraints.cnf.OriginalBinaryClause)o_testSimplePhoneSATSmall_remove2__30).getLits();
        	for(int ii = 0; ii <array_399465337.length; ii++) {
        		org.junit.Assert.assertEquals(array_399465337[ii], array_429322718[ii]);
        	};
        VecInt clause4 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause4)).toString());
        Assert.assertTrue(((VecInt) (clause4)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove2__34 = clause4.push((-4));
        Assert.assertEquals("-4", ((VecInt) (o_testSimplePhoneSATSmall_remove2__34)).toString());
        Assert.assertEquals(-4, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove2__34)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove2__34)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove2__36 = clause4.push(1);
        Assert.assertEquals("-4,1", ((VecInt) (o_testSimplePhoneSATSmall_remove2__36)).toString());
        Assert.assertEquals(-1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove2__36)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove2__36)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove2__37 = this.solver.addClause(clause4);
        Assert.assertFalse(((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove2__37)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove2__37)).getActivity())), 0.1);
        int[] array_576102991 = new int[]{2,9};
        	int[] array_1231192765 = (int[])((org.sat4j.minisat.constraints.cnf.OriginalBinaryClause)o_testSimplePhoneSATSmall_remove2__37).getLits();
        	for(int ii = 0; ii <array_576102991.length; ii++) {
        		org.junit.Assert.assertEquals(array_576102991[ii], array_1231192765[ii]);
        	};
        Assert.assertEquals("1[?] -4[?]", ((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove2__37)).toString());
        Assert.assertEquals(5, ((int) (((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove2__37)).hashCode())));
        int[] array_253353865 = new int[]{2,9};
        	int[] array_369828323 = (int[])((org.sat4j.minisat.constraints.cnf.OriginalBinaryClause)o_testSimplePhoneSATSmall_remove2__37).getLits();
        	for(int ii = 0; ii <array_253353865.length; ii++) {
        		org.junit.Assert.assertEquals(array_253353865[ii], array_369828323[ii]);
        	};
        int[] array_123192235 = new int[]{2,9};
        	int[] array_528171170 = (int[])((org.sat4j.minisat.constraints.cnf.OriginalBinaryClause)o_testSimplePhoneSATSmall_remove2__37).getLits();
        	for(int ii = 0; ii <array_123192235.length; ii++) {
        		org.junit.Assert.assertEquals(array_123192235[ii], array_528171170[ii]);
        	};
        VecInt clause5 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause5)).toString());
        Assert.assertTrue(((VecInt) (clause5)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove2__41 = clause5.push((-5));
        Assert.assertEquals("-5", ((VecInt) (o_testSimplePhoneSATSmall_remove2__41)).toString());
        Assert.assertEquals(-5, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove2__41)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove2__41)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove2__43 = clause5.push(4);
        Assert.assertEquals("-5,4", ((VecInt) (o_testSimplePhoneSATSmall_remove2__43)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove2__43)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove2__43)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove2__44 = this.solver.addClause(clause5);
        Assert.assertFalse(((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove2__44)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove2__44)).getActivity())), 0.1);
        int[] array_1054401339 = new int[]{8,11};
        	int[] array_1091766163 = (int[])((org.sat4j.minisat.constraints.cnf.OriginalBinaryClause)o_testSimplePhoneSATSmall_remove2__44).getLits();
        	for(int ii = 0; ii <array_1054401339.length; ii++) {
        		org.junit.Assert.assertEquals(array_1054401339[ii], array_1091766163[ii]);
        	};
        Assert.assertEquals("4[?] -5[?]", ((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove2__44)).toString());
        Assert.assertEquals(9, ((int) (((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove2__44)).hashCode())));
        int[] array_12042372 = new int[]{8,11};
        	int[] array_1816104876 = (int[])((org.sat4j.minisat.constraints.cnf.OriginalBinaryClause)o_testSimplePhoneSATSmall_remove2__44).getLits();
        	for(int ii = 0; ii <array_12042372.length; ii++) {
        		org.junit.Assert.assertEquals(array_12042372[ii], array_1816104876[ii]);
        	};
        int[] array_2007119514 = new int[]{8,11};
        	int[] array_1743183821 = (int[])((org.sat4j.minisat.constraints.cnf.OriginalBinaryClause)o_testSimplePhoneSATSmall_remove2__44).getLits();
        	for(int ii = 0; ii <array_2007119514.length; ii++) {
        		org.junit.Assert.assertEquals(array_2007119514[ii], array_1743183821[ii]);
        	};
        VecInt clause6 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause6)).toString());
        Assert.assertTrue(((VecInt) (clause6)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove2__47 = clause6.push((-6));
        Assert.assertEquals("-6", ((VecInt) (o_testSimplePhoneSATSmall_remove2__47)).toString());
        Assert.assertEquals(-6, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove2__47)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove2__47)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove2__49 = clause6.push(4);
        Assert.assertEquals("-6,4", ((VecInt) (o_testSimplePhoneSATSmall_remove2__49)).toString());
        Assert.assertEquals(-1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove2__49)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove2__49)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove2__50 = this.solver.addClause(clause6);
        Assert.assertFalse(((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove2__50)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove2__50)).getActivity())), 0.1);
        int[] array_1602472789 = new int[]{8,13};
        	int[] array_585964304 = (int[])((org.sat4j.minisat.constraints.cnf.OriginalBinaryClause)o_testSimplePhoneSATSmall_remove2__50).getLits();
        	for(int ii = 0; ii <array_1602472789.length; ii++) {
        		org.junit.Assert.assertEquals(array_1602472789[ii], array_585964304[ii]);
        	};
        Assert.assertEquals("4[?] -6[?]", ((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove2__50)).toString());
        Assert.assertEquals(10, ((int) (((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove2__50)).hashCode())));
        int[] array_1120601571 = new int[]{8,13};
        	int[] array_1663853611 = (int[])((org.sat4j.minisat.constraints.cnf.OriginalBinaryClause)o_testSimplePhoneSATSmall_remove2__50).getLits();
        	for(int ii = 0; ii <array_1120601571.length; ii++) {
        		org.junit.Assert.assertEquals(array_1120601571[ii], array_1663853611[ii]);
        	};
        int[] array_1503854603 = new int[]{8,13};
        	int[] array_1866619758 = (int[])((org.sat4j.minisat.constraints.cnf.OriginalBinaryClause)o_testSimplePhoneSATSmall_remove2__50).getLits();
        	for(int ii = 0; ii <array_1503854603.length; ii++) {
        		org.junit.Assert.assertEquals(array_1503854603[ii], array_1866619758[ii]);
        	};
        VecInt clause7 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause7)).toString());
        Assert.assertTrue(((VecInt) (clause7)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove2__53 = clause7.push(5);
        Assert.assertEquals("5", ((VecInt) (o_testSimplePhoneSATSmall_remove2__53)).toString());
        Assert.assertEquals(5, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove2__53)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove2__53)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove2__54 = clause7.push(6);
        Assert.assertEquals("5,6", ((VecInt) (o_testSimplePhoneSATSmall_remove2__54)).toString());
        Assert.assertEquals(5, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove2__54)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove2__54)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove2__55 = clause7.push((-4));
        Assert.assertEquals("5,6,-4", ((VecInt) (o_testSimplePhoneSATSmall_remove2__55)).toString());
        Assert.assertEquals(2, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove2__55)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove2__55)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove2__57 = this.solver.addAtLeast(clause6, 1);
        Assert.assertFalse(((OriginalWLClause) (o_testSimplePhoneSATSmall_remove2__57)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((OriginalWLClause) (o_testSimplePhoneSATSmall_remove2__57)).getActivity())), 0.1);
        int[] array_549656660 = new int[]{8,13};
        	int[] array_1004691632 = (int[])((org.sat4j.minisat.constraints.cnf.OriginalWLClause)o_testSimplePhoneSATSmall_remove2__57).getLits();
        	for(int ii = 0; ii <array_549656660.length; ii++) {
        		org.junit.Assert.assertEquals(array_549656660[ii], array_1004691632[ii]);
        	};
        Assert.assertEquals("4[?] -6[?] ", ((OriginalWLClause) (o_testSimplePhoneSATSmall_remove2__57)).toString());
        Assert.assertEquals(10, ((int) (((OriginalWLClause) (o_testSimplePhoneSATSmall_remove2__57)).hashCode())));
        int[] array_591417951 = new int[]{8,13};
        	int[] array_1120127527 = (int[])((org.sat4j.minisat.constraints.cnf.OriginalWLClause)o_testSimplePhoneSATSmall_remove2__57).getLits();
        	for(int ii = 0; ii <array_591417951.length; ii++) {
        		org.junit.Assert.assertEquals(array_591417951[ii], array_1120127527[ii]);
        	};
        int[] array_1043498900 = new int[]{8,13};
        	int[] array_1706630214 = (int[])((org.sat4j.minisat.constraints.cnf.OriginalWLClause)o_testSimplePhoneSATSmall_remove2__57).getLits();
        	for(int ii = 0; ii <array_1043498900.length; ii++) {
        		org.junit.Assert.assertEquals(array_1043498900[ii], array_1706630214[ii]);
        	};
        this.solver.isSatisfiable();
        VecInt bound1 = new VecInt();
        Assert.assertEquals("", ((VecInt) (bound1)).toString());
        Assert.assertTrue(((VecInt) (bound1)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove2__61 = bound1.push(3);
        Assert.assertEquals("3", ((VecInt) (o_testSimplePhoneSATSmall_remove2__61)).toString());
        Assert.assertEquals(3, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove2__61)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove2__61)).isEmpty());
        int[] o_testSimplePhoneSATSmall_remove2__62 = this.solver.findModel(bound1);
        int[] array_1576904691 = new int[]{1,2,3,-4,-5,-6};
        	int[] array_1362946453 = (int[])o_testSimplePhoneSATSmall_remove2__62;
        	for(int ii = 0; ii <array_1576904691.length; ii++) {
        		org.junit.Assert.assertEquals(array_1576904691[ii], array_1362946453[ii]);
        	};
        VecInt bound2 = new VecInt();
        Assert.assertEquals("", ((VecInt) (bound2)).toString());
        Assert.assertTrue(((VecInt) (bound2)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove2__65 = bound2.push((-3));
        Assert.assertEquals("-3", ((VecInt) (o_testSimplePhoneSATSmall_remove2__65)).toString());
        Assert.assertEquals(-3, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove2__65)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove2__65)).isEmpty());
        int[] o_testSimplePhoneSATSmall_remove2__67 = this.solver.findModel(bound2);
        int[] array_668687851 = new int[]{-1,-2,-3,-4,-5,-6};
        	int[] array_1038895465 = (int[])o_testSimplePhoneSATSmall_remove2__67;
        	for(int ii = 0; ii <array_668687851.length; ii++) {
        		org.junit.Assert.assertEquals(array_668687851[ii], array_1038895465[ii]);
        	};
        VecInt bound3 = new VecInt();
        Assert.assertEquals("", ((VecInt) (bound3)).toString());
        Assert.assertTrue(((VecInt) (bound3)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove2__70 = bound3.push(5);
        Assert.assertEquals("5", ((VecInt) (o_testSimplePhoneSATSmall_remove2__70)).toString());
        Assert.assertEquals(5, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove2__70)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove2__70)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove2__71 = bound3.push(3);
        Assert.assertEquals("5,3", ((VecInt) (o_testSimplePhoneSATSmall_remove2__71)).toString());
        Assert.assertEquals(4, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove2__71)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove2__71)).isEmpty());
        int[] o_testSimplePhoneSATSmall_remove2__72 = this.solver.findModel(bound3);
        int[] array_1275732480 = new int[]{1,2,3,4,5,-6};
        	int[] array_1197870923 = (int[])o_testSimplePhoneSATSmall_remove2__72;
        	for(int ii = 0; ii <array_1275732480.length; ii++) {
        		org.junit.Assert.assertEquals(array_1275732480[ii], array_1197870923[ii]);
        	};
        VecInt bound4 = new VecInt();
        Assert.assertEquals("", ((VecInt) (bound4)).toString());
        Assert.assertTrue(((VecInt) (bound4)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove2__75 = bound4.push(5);
        Assert.assertEquals("5", ((VecInt) (o_testSimplePhoneSATSmall_remove2__75)).toString());
        Assert.assertEquals(5, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove2__75)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove2__75)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove2__76 = bound4.push((-3));
        Assert.assertEquals("5,-3", ((VecInt) (o_testSimplePhoneSATSmall_remove2__76)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove2__76)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove2__76)).isEmpty());
        this.solver.findModel(bound4);
        VecInt bound5 = new VecInt();
        bound5.push(4);
        bound5.push((-3));
        this.solver.findModel(bound5);
        VecInt bound6 = new VecInt();
        this.solver.findModel(bound6);
        VecInt bound7 = new VecInt();
        bound7.push(4);
        int[] model = this.solver.findModel(bound7);
        Set<Integer> satisfiedModel = new HashSet<Integer>();
        for (int i : model) {
            satisfiedModel.add(new Integer(i));
        }
        satisfiedModel.contains(new Integer(4));
        satisfiedModel.contains(new Integer(1));
        satisfiedModel.contains(new Integer(2));
    }

    @Test(timeout = 30000)
    public void testSimplePhoneSATSmall_remove2_remove455_remove2985() throws Exception, ContradictionException, TimeoutException {
        VecInt clause0 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause0)).toString());
        Assert.assertTrue(((VecInt) (clause0)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove2__4 = clause0.push(1);
        Assert.assertEquals("1", ((VecInt) (o_testSimplePhoneSATSmall_remove2__4)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove2__4)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove2__4)).isEmpty());
        VecInt clause1 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause1)).toString());
        Assert.assertTrue(((VecInt) (clause1)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove2__8 = clause1.push(1);
        Assert.assertEquals("1", ((VecInt) (o_testSimplePhoneSATSmall_remove2__8)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove2__8)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove2__8)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove2__9 = clause1.push((-2));
        Assert.assertEquals("1,-2", ((VecInt) (o_testSimplePhoneSATSmall_remove2__9)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove2__9)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove2__9)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove2__11 = this.solver.addClause(clause1);
        Assert.assertFalse(((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove2__11)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove2__11)).getActivity())), 0.1);
        int[] array_438592082 = new int[]{2,5};
        	int[] array_819402914 = (int[])((org.sat4j.minisat.constraints.cnf.OriginalBinaryClause)o_testSimplePhoneSATSmall_remove2__11).getLits();
        	for(int ii = 0; ii <array_438592082.length; ii++) {
        		org.junit.Assert.assertEquals(array_438592082[ii], array_819402914[ii]);
        	};
        Assert.assertEquals("1[?] -2[?]", ((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove2__11)).toString());
        Assert.assertEquals(3, ((int) (((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove2__11)).hashCode())));
        int[] array_1281021855 = new int[]{2,5};
        	int[] array_55488140 = (int[])((org.sat4j.minisat.constraints.cnf.OriginalBinaryClause)o_testSimplePhoneSATSmall_remove2__11).getLits();
        	for(int ii = 0; ii <array_1281021855.length; ii++) {
        		org.junit.Assert.assertEquals(array_1281021855[ii], array_55488140[ii]);
        	};
        int[] array_1890173107 = new int[]{2,5};
        	int[] array_11404287 = (int[])((org.sat4j.minisat.constraints.cnf.OriginalBinaryClause)o_testSimplePhoneSATSmall_remove2__11).getLits();
        	for(int ii = 0; ii <array_1890173107.length; ii++) {
        		org.junit.Assert.assertEquals(array_1890173107[ii], array_11404287[ii]);
        	};
        VecInt clause2 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause2)).toString());
        Assert.assertTrue(((VecInt) (clause2)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove2__14 = clause2.push(2);
        Assert.assertEquals("2", ((VecInt) (o_testSimplePhoneSATSmall_remove2__14)).toString());
        Assert.assertEquals(2, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove2__14)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove2__14)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove2__15 = clause2.push((-1));
        Assert.assertEquals("2,-1", ((VecInt) (o_testSimplePhoneSATSmall_remove2__15)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove2__15)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove2__15)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove2__17 = this.solver.addClause(clause2);
        Assert.assertFalse(((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove2__17)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove2__17)).getActivity())), 0.1);
        int[] array_2007825892 = new int[]{3,4};
        	int[] array_1653048859 = (int[])((org.sat4j.minisat.constraints.cnf.OriginalBinaryClause)o_testSimplePhoneSATSmall_remove2__17).getLits();
        	for(int ii = 0; ii <array_2007825892.length; ii++) {
        		org.junit.Assert.assertEquals(array_2007825892[ii], array_1653048859[ii]);
        	};
        Assert.assertEquals("-1[?] 2[?]", ((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove2__17)).toString());
        Assert.assertEquals(3, ((int) (((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove2__17)).hashCode())));
        int[] array_626781088 = new int[]{3,4};
        	int[] array_278377876 = (int[])((org.sat4j.minisat.constraints.cnf.OriginalBinaryClause)o_testSimplePhoneSATSmall_remove2__17).getLits();
        	for(int ii = 0; ii <array_626781088.length; ii++) {
        		org.junit.Assert.assertEquals(array_626781088[ii], array_278377876[ii]);
        	};
        int[] array_1916443389 = new int[]{3,4};
        	int[] array_116830369 = (int[])((org.sat4j.minisat.constraints.cnf.OriginalBinaryClause)o_testSimplePhoneSATSmall_remove2__17).getLits();
        	for(int ii = 0; ii <array_1916443389.length; ii++) {
        		org.junit.Assert.assertEquals(array_1916443389[ii], array_116830369[ii]);
        	};
        VecInt clause3 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause3)).toString());
        Assert.assertTrue(((VecInt) (clause3)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove2__21 = clause3.push(3);
        Assert.assertEquals("3", ((VecInt) (o_testSimplePhoneSATSmall_remove2__21)).toString());
        Assert.assertEquals(3, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove2__21)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove2__21)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove2__22 = clause3.push((-2));
        Assert.assertEquals("3,-2", ((VecInt) (o_testSimplePhoneSATSmall_remove2__22)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove2__22)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove2__22)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove2__24 = this.solver.addClause(clause3);
        Assert.assertFalse(((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove2__24)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove2__24)).getActivity())), 0.1);
        int[] array_1611946726 = new int[]{5,6};
        	int[] array_1774515359 = (int[])((org.sat4j.minisat.constraints.cnf.OriginalBinaryClause)o_testSimplePhoneSATSmall_remove2__24).getLits();
        	for(int ii = 0; ii <array_1611946726.length; ii++) {
        		org.junit.Assert.assertEquals(array_1611946726[ii], array_1774515359[ii]);
        	};
        Assert.assertEquals("-2[?] 3[?]", ((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove2__24)).toString());
        Assert.assertEquals(5, ((int) (((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove2__24)).hashCode())));
        int[] array_1974961709 = new int[]{5,6};
        	int[] array_384921724 = (int[])((org.sat4j.minisat.constraints.cnf.OriginalBinaryClause)o_testSimplePhoneSATSmall_remove2__24).getLits();
        	for(int ii = 0; ii <array_1974961709.length; ii++) {
        		org.junit.Assert.assertEquals(array_1974961709[ii], array_384921724[ii]);
        	};
        int[] array_215630225 = new int[]{5,6};
        	int[] array_1507503842 = (int[])((org.sat4j.minisat.constraints.cnf.OriginalBinaryClause)o_testSimplePhoneSATSmall_remove2__24).getLits();
        	for(int ii = 0; ii <array_215630225.length; ii++) {
        		org.junit.Assert.assertEquals(array_215630225[ii], array_1507503842[ii]);
        	};
        VecInt clause8 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause8)).toString());
        Assert.assertTrue(((VecInt) (clause8)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove2__27 = clause8.push(2);
        Assert.assertEquals("2", ((VecInt) (o_testSimplePhoneSATSmall_remove2__27)).toString());
        Assert.assertEquals(2, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove2__27)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove2__27)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove2__28 = clause8.push((-3));
        Assert.assertEquals("2,-3", ((VecInt) (o_testSimplePhoneSATSmall_remove2__28)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove2__28)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove2__28)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove2__30 = this.solver.addClause(clause8);
        Assert.assertFalse(((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove2__30)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove2__30)).getActivity())), 0.1);
        int[] array_156117801 = new int[]{4,7};
        	int[] array_520020805 = (int[])((org.sat4j.minisat.constraints.cnf.OriginalBinaryClause)o_testSimplePhoneSATSmall_remove2__30).getLits();
        	for(int ii = 0; ii <array_156117801.length; ii++) {
        		org.junit.Assert.assertEquals(array_156117801[ii], array_520020805[ii]);
        	};
        Assert.assertEquals("2[?] -3[?]", ((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove2__30)).toString());
        Assert.assertEquals(5, ((int) (((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove2__30)).hashCode())));
        int[] array_1987896797 = new int[]{4,7};
        	int[] array_1662530941 = (int[])((org.sat4j.minisat.constraints.cnf.OriginalBinaryClause)o_testSimplePhoneSATSmall_remove2__30).getLits();
        	for(int ii = 0; ii <array_1987896797.length; ii++) {
        		org.junit.Assert.assertEquals(array_1987896797[ii], array_1662530941[ii]);
        	};
        int[] array_399465337 = new int[]{4,7};
        	int[] array_429322718 = (int[])((org.sat4j.minisat.constraints.cnf.OriginalBinaryClause)o_testSimplePhoneSATSmall_remove2__30).getLits();
        	for(int ii = 0; ii <array_399465337.length; ii++) {
        		org.junit.Assert.assertEquals(array_399465337[ii], array_429322718[ii]);
        	};
        VecInt clause4 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause4)).toString());
        Assert.assertTrue(((VecInt) (clause4)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove2__34 = clause4.push((-4));
        Assert.assertEquals("-4", ((VecInt) (o_testSimplePhoneSATSmall_remove2__34)).toString());
        Assert.assertEquals(-4, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove2__34)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove2__34)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove2__36 = clause4.push(1);
        Assert.assertEquals("-4,1", ((VecInt) (o_testSimplePhoneSATSmall_remove2__36)).toString());
        Assert.assertEquals(-1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove2__36)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove2__36)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove2__37 = this.solver.addClause(clause4);
        Assert.assertFalse(((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove2__37)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove2__37)).getActivity())), 0.1);
        int[] array_502760949 = new int[]{2,9};
        	int[] array_724787150 = (int[])((org.sat4j.minisat.constraints.cnf.OriginalBinaryClause)o_testSimplePhoneSATSmall_remove2__37).getLits();
        	for(int ii = 0; ii <array_502760949.length; ii++) {
        		org.junit.Assert.assertEquals(array_502760949[ii], array_724787150[ii]);
        	};
        Assert.assertEquals("1[?] -4[?]", ((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove2__37)).toString());
        Assert.assertEquals(5, ((int) (((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove2__37)).hashCode())));
        int[] array_972509826 = new int[]{2,9};
        	int[] array_643907857 = (int[])((org.sat4j.minisat.constraints.cnf.OriginalBinaryClause)o_testSimplePhoneSATSmall_remove2__37).getLits();
        	for(int ii = 0; ii <array_972509826.length; ii++) {
        		org.junit.Assert.assertEquals(array_972509826[ii], array_643907857[ii]);
        	};
        int[] array_123192235 = new int[]{2,9};
        	int[] array_528171170 = (int[])((org.sat4j.minisat.constraints.cnf.OriginalBinaryClause)o_testSimplePhoneSATSmall_remove2__37).getLits();
        	for(int ii = 0; ii <array_123192235.length; ii++) {
        		org.junit.Assert.assertEquals(array_123192235[ii], array_528171170[ii]);
        	};
        VecInt clause5 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause5)).toString());
        Assert.assertTrue(((VecInt) (clause5)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove2__41 = clause5.push((-5));
        Assert.assertEquals("-5", ((VecInt) (o_testSimplePhoneSATSmall_remove2__41)).toString());
        Assert.assertEquals(-5, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove2__41)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove2__41)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove2__43 = clause5.push(4);
        Assert.assertEquals("-5,4", ((VecInt) (o_testSimplePhoneSATSmall_remove2__43)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove2__43)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove2__43)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove2__44 = this.solver.addClause(clause5);
        Assert.assertFalse(((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove2__44)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove2__44)).getActivity())), 0.1);
        int[] array_1182630891 = new int[]{8,11};
        	int[] array_1504346020 = (int[])((org.sat4j.minisat.constraints.cnf.OriginalBinaryClause)o_testSimplePhoneSATSmall_remove2__44).getLits();
        	for(int ii = 0; ii <array_1182630891.length; ii++) {
        		org.junit.Assert.assertEquals(array_1182630891[ii], array_1504346020[ii]);
        	};
        Assert.assertEquals("4[?] -5[?]", ((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove2__44)).toString());
        Assert.assertEquals(9, ((int) (((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove2__44)).hashCode())));
        int[] array_1345460158 = new int[]{8,11};
        	int[] array_387626152 = (int[])((org.sat4j.minisat.constraints.cnf.OriginalBinaryClause)o_testSimplePhoneSATSmall_remove2__44).getLits();
        	for(int ii = 0; ii <array_1345460158.length; ii++) {
        		org.junit.Assert.assertEquals(array_1345460158[ii], array_387626152[ii]);
        	};
        int[] array_2007119514 = new int[]{8,11};
        	int[] array_1743183821 = (int[])((org.sat4j.minisat.constraints.cnf.OriginalBinaryClause)o_testSimplePhoneSATSmall_remove2__44).getLits();
        	for(int ii = 0; ii <array_2007119514.length; ii++) {
        		org.junit.Assert.assertEquals(array_2007119514[ii], array_1743183821[ii]);
        	};
        VecInt clause6 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause6)).toString());
        Assert.assertTrue(((VecInt) (clause6)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove2__47 = clause6.push((-6));
        Assert.assertEquals("-6", ((VecInt) (o_testSimplePhoneSATSmall_remove2__47)).toString());
        Assert.assertEquals(-6, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove2__47)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove2__47)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove2__49 = clause6.push(4);
        Assert.assertEquals("-6,4", ((VecInt) (o_testSimplePhoneSATSmall_remove2__49)).toString());
        Assert.assertEquals(-1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove2__49)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove2__49)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove2__50 = this.solver.addClause(clause6);
        Assert.assertFalse(((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove2__50)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove2__50)).getActivity())), 0.1);
        int[] array_1047317914 = new int[]{8,13};
        	int[] array_439855425 = (int[])((org.sat4j.minisat.constraints.cnf.OriginalBinaryClause)o_testSimplePhoneSATSmall_remove2__50).getLits();
        	for(int ii = 0; ii <array_1047317914.length; ii++) {
        		org.junit.Assert.assertEquals(array_1047317914[ii], array_439855425[ii]);
        	};
        Assert.assertEquals("4[?] -6[?]", ((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove2__50)).toString());
        Assert.assertEquals(10, ((int) (((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove2__50)).hashCode())));
        int[] array_885048381 = new int[]{8,13};
        	int[] array_1858485617 = (int[])((org.sat4j.minisat.constraints.cnf.OriginalBinaryClause)o_testSimplePhoneSATSmall_remove2__50).getLits();
        	for(int ii = 0; ii <array_885048381.length; ii++) {
        		org.junit.Assert.assertEquals(array_885048381[ii], array_1858485617[ii]);
        	};
        int[] array_1503854603 = new int[]{8,13};
        	int[] array_1866619758 = (int[])((org.sat4j.minisat.constraints.cnf.OriginalBinaryClause)o_testSimplePhoneSATSmall_remove2__50).getLits();
        	for(int ii = 0; ii <array_1503854603.length; ii++) {
        		org.junit.Assert.assertEquals(array_1503854603[ii], array_1866619758[ii]);
        	};
        VecInt clause7 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause7)).toString());
        Assert.assertTrue(((VecInt) (clause7)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove2__53 = clause7.push(5);
        Assert.assertEquals("5", ((VecInt) (o_testSimplePhoneSATSmall_remove2__53)).toString());
        Assert.assertEquals(5, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove2__53)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove2__53)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove2__54 = clause7.push(6);
        Assert.assertEquals("5,6", ((VecInt) (o_testSimplePhoneSATSmall_remove2__54)).toString());
        Assert.assertEquals(5, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove2__54)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove2__54)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove2__55 = clause7.push((-4));
        Assert.assertEquals("5,6,-4", ((VecInt) (o_testSimplePhoneSATSmall_remove2__55)).toString());
        Assert.assertEquals(2, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove2__55)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove2__55)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove2__57 = this.solver.addAtLeast(clause6, 1);
        Assert.assertFalse(((OriginalWLClause) (o_testSimplePhoneSATSmall_remove2__57)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((OriginalWLClause) (o_testSimplePhoneSATSmall_remove2__57)).getActivity())), 0.1);
        int[] array_869353972 = new int[]{8,13};
        	int[] array_998921636 = (int[])((org.sat4j.minisat.constraints.cnf.OriginalWLClause)o_testSimplePhoneSATSmall_remove2__57).getLits();
        	for(int ii = 0; ii <array_869353972.length; ii++) {
        		org.junit.Assert.assertEquals(array_869353972[ii], array_998921636[ii]);
        	};
        Assert.assertEquals("4[?] -6[?] ", ((OriginalWLClause) (o_testSimplePhoneSATSmall_remove2__57)).toString());
        Assert.assertEquals(10, ((int) (((OriginalWLClause) (o_testSimplePhoneSATSmall_remove2__57)).hashCode())));
        int[] array_325140373 = new int[]{8,13};
        	int[] array_1177665243 = (int[])((org.sat4j.minisat.constraints.cnf.OriginalWLClause)o_testSimplePhoneSATSmall_remove2__57).getLits();
        	for(int ii = 0; ii <array_325140373.length; ii++) {
        		org.junit.Assert.assertEquals(array_325140373[ii], array_1177665243[ii]);
        	};
        int[] array_1043498900 = new int[]{8,13};
        	int[] array_1706630214 = (int[])((org.sat4j.minisat.constraints.cnf.OriginalWLClause)o_testSimplePhoneSATSmall_remove2__57).getLits();
        	for(int ii = 0; ii <array_1043498900.length; ii++) {
        		org.junit.Assert.assertEquals(array_1043498900[ii], array_1706630214[ii]);
        	};
        VecInt bound1 = new VecInt();
        Assert.assertEquals("", ((VecInt) (bound1)).toString());
        Assert.assertTrue(((VecInt) (bound1)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove2__61 = bound1.push(3);
        Assert.assertEquals("3", ((VecInt) (o_testSimplePhoneSATSmall_remove2__61)).toString());
        Assert.assertEquals(3, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove2__61)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove2__61)).isEmpty());
        int[] o_testSimplePhoneSATSmall_remove2__62 = this.solver.findModel(bound1);
        int[] array_1576904691 = new int[]{1,2,3,-4,-5,-6};
        	int[] array_1362946453 = (int[])o_testSimplePhoneSATSmall_remove2__62;
        	for(int ii = 0; ii <array_1576904691.length; ii++) {
        		org.junit.Assert.assertEquals(array_1576904691[ii], array_1362946453[ii]);
        	};
        VecInt bound2 = new VecInt();
        Assert.assertEquals("", ((VecInt) (bound2)).toString());
        Assert.assertTrue(((VecInt) (bound2)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove2__65 = bound2.push((-3));
        Assert.assertEquals("-3", ((VecInt) (o_testSimplePhoneSATSmall_remove2__65)).toString());
        Assert.assertEquals(-3, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove2__65)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove2__65)).isEmpty());
        int[] o_testSimplePhoneSATSmall_remove2__67 = this.solver.findModel(bound2);
        int[] array_668687851 = new int[]{-1,-2,-3,-4,-5,-6};
        	int[] array_1038895465 = (int[])o_testSimplePhoneSATSmall_remove2__67;
        	for(int ii = 0; ii <array_668687851.length; ii++) {
        		org.junit.Assert.assertEquals(array_668687851[ii], array_1038895465[ii]);
        	};
        VecInt bound3 = new VecInt();
        Assert.assertEquals("", ((VecInt) (bound3)).toString());
        Assert.assertTrue(((VecInt) (bound3)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove2__70 = bound3.push(5);
        Assert.assertEquals("5", ((VecInt) (o_testSimplePhoneSATSmall_remove2__70)).toString());
        Assert.assertEquals(5, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove2__70)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove2__70)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove2__71 = bound3.push(3);
        Assert.assertEquals("5,3", ((VecInt) (o_testSimplePhoneSATSmall_remove2__71)).toString());
        Assert.assertEquals(4, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove2__71)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove2__71)).isEmpty());
        int[] o_testSimplePhoneSATSmall_remove2__72 = this.solver.findModel(bound3);
        int[] array_1275732480 = new int[]{1,2,3,4,5,-6};
        	int[] array_1197870923 = (int[])o_testSimplePhoneSATSmall_remove2__72;
        	for(int ii = 0; ii <array_1275732480.length; ii++) {
        		org.junit.Assert.assertEquals(array_1275732480[ii], array_1197870923[ii]);
        	};
        VecInt bound4 = new VecInt();
        Assert.assertEquals("", ((VecInt) (bound4)).toString());
        Assert.assertTrue(((VecInt) (bound4)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove2__75 = bound4.push(5);
        Assert.assertEquals("5", ((VecInt) (o_testSimplePhoneSATSmall_remove2__75)).toString());
        Assert.assertEquals(5, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove2__75)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove2__75)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove2__76 = bound4.push((-3));
        Assert.assertEquals("5,-3", ((VecInt) (o_testSimplePhoneSATSmall_remove2__76)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove2__76)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove2__76)).isEmpty());
        this.solver.findModel(bound4);
        VecInt bound5 = new VecInt();
        bound5.push((-3));
        this.solver.findModel(bound5);
        VecInt bound6 = new VecInt();
        bound6.push(4);
        bound6.push(3);
        this.solver.findModel(bound6);
        VecInt bound7 = new VecInt();
        bound7.push(4);
        int[] model = this.solver.findModel(bound7);
        Set<Integer> satisfiedModel = new HashSet<Integer>();
        for (int i : model) {
            satisfiedModel.add(new Integer(i));
        }
        satisfiedModel.contains(new Integer(4));
        satisfiedModel.contains(new Integer(1));
        satisfiedModel.contains(new Integer(2));
    }

    @Test(timeout = 30000)
    public void testSimplePhoneSATSmall_remove2_remove455_remove3027() throws Exception, ContradictionException, TimeoutException {
        VecInt clause0 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause0)).toString());
        Assert.assertTrue(((VecInt) (clause0)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove2__4 = clause0.push(1);
        Assert.assertEquals("1", ((VecInt) (o_testSimplePhoneSATSmall_remove2__4)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove2__4)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove2__4)).isEmpty());
        VecInt clause1 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause1)).toString());
        Assert.assertTrue(((VecInt) (clause1)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove2__8 = clause1.push(1);
        Assert.assertEquals("1", ((VecInt) (o_testSimplePhoneSATSmall_remove2__8)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove2__8)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove2__8)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove2__9 = clause1.push((-2));
        Assert.assertEquals("1,-2", ((VecInt) (o_testSimplePhoneSATSmall_remove2__9)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove2__9)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove2__9)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove2__11 = this.solver.addClause(clause1);
        Assert.assertFalse(((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove2__11)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove2__11)).getActivity())), 0.1);
        int[] array_709812319 = new int[]{2,5};
        	int[] array_825386600 = (int[])((org.sat4j.minisat.constraints.cnf.OriginalBinaryClause)o_testSimplePhoneSATSmall_remove2__11).getLits();
        	for(int ii = 0; ii <array_709812319.length; ii++) {
        		org.junit.Assert.assertEquals(array_709812319[ii], array_825386600[ii]);
        	};
        Assert.assertEquals("1[?] -2[?]", ((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove2__11)).toString());
        Assert.assertEquals(3, ((int) (((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove2__11)).hashCode())));
        int[] array_1281021855 = new int[]{2,5};
        	int[] array_55488140 = (int[])((org.sat4j.minisat.constraints.cnf.OriginalBinaryClause)o_testSimplePhoneSATSmall_remove2__11).getLits();
        	for(int ii = 0; ii <array_1281021855.length; ii++) {
        		org.junit.Assert.assertEquals(array_1281021855[ii], array_55488140[ii]);
        	};
        int[] array_1890173107 = new int[]{2,5};
        	int[] array_11404287 = (int[])((org.sat4j.minisat.constraints.cnf.OriginalBinaryClause)o_testSimplePhoneSATSmall_remove2__11).getLits();
        	for(int ii = 0; ii <array_1890173107.length; ii++) {
        		org.junit.Assert.assertEquals(array_1890173107[ii], array_11404287[ii]);
        	};
        VecInt clause2 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause2)).toString());
        Assert.assertTrue(((VecInt) (clause2)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove2__14 = clause2.push(2);
        Assert.assertEquals("2", ((VecInt) (o_testSimplePhoneSATSmall_remove2__14)).toString());
        Assert.assertEquals(2, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove2__14)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove2__14)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove2__15 = clause2.push((-1));
        Assert.assertEquals("2,-1", ((VecInt) (o_testSimplePhoneSATSmall_remove2__15)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove2__15)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove2__15)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove2__17 = this.solver.addClause(clause2);
        Assert.assertFalse(((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove2__17)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove2__17)).getActivity())), 0.1);
        int[] array_49275796 = new int[]{3,4};
        	int[] array_1124508583 = (int[])((org.sat4j.minisat.constraints.cnf.OriginalBinaryClause)o_testSimplePhoneSATSmall_remove2__17).getLits();
        	for(int ii = 0; ii <array_49275796.length; ii++) {
        		org.junit.Assert.assertEquals(array_49275796[ii], array_1124508583[ii]);
        	};
        Assert.assertEquals("-1[?] 2[?]", ((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove2__17)).toString());
        Assert.assertEquals(3, ((int) (((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove2__17)).hashCode())));
        int[] array_626781088 = new int[]{3,4};
        	int[] array_278377876 = (int[])((org.sat4j.minisat.constraints.cnf.OriginalBinaryClause)o_testSimplePhoneSATSmall_remove2__17).getLits();
        	for(int ii = 0; ii <array_626781088.length; ii++) {
        		org.junit.Assert.assertEquals(array_626781088[ii], array_278377876[ii]);
        	};
        int[] array_1916443389 = new int[]{3,4};
        	int[] array_116830369 = (int[])((org.sat4j.minisat.constraints.cnf.OriginalBinaryClause)o_testSimplePhoneSATSmall_remove2__17).getLits();
        	for(int ii = 0; ii <array_1916443389.length; ii++) {
        		org.junit.Assert.assertEquals(array_1916443389[ii], array_116830369[ii]);
        	};
        VecInt clause3 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause3)).toString());
        Assert.assertTrue(((VecInt) (clause3)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove2__21 = clause3.push(3);
        Assert.assertEquals("3", ((VecInt) (o_testSimplePhoneSATSmall_remove2__21)).toString());
        Assert.assertEquals(3, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove2__21)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove2__21)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove2__22 = clause3.push((-2));
        Assert.assertEquals("3,-2", ((VecInt) (o_testSimplePhoneSATSmall_remove2__22)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove2__22)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove2__22)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove2__24 = this.solver.addClause(clause3);
        Assert.assertFalse(((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove2__24)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove2__24)).getActivity())), 0.1);
        int[] array_1249551933 = new int[]{5,6};
        	int[] array_144160874 = (int[])((org.sat4j.minisat.constraints.cnf.OriginalBinaryClause)o_testSimplePhoneSATSmall_remove2__24).getLits();
        	for(int ii = 0; ii <array_1249551933.length; ii++) {
        		org.junit.Assert.assertEquals(array_1249551933[ii], array_144160874[ii]);
        	};
        Assert.assertEquals("-2[?] 3[?]", ((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove2__24)).toString());
        Assert.assertEquals(5, ((int) (((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove2__24)).hashCode())));
        int[] array_1974961709 = new int[]{5,6};
        	int[] array_384921724 = (int[])((org.sat4j.minisat.constraints.cnf.OriginalBinaryClause)o_testSimplePhoneSATSmall_remove2__24).getLits();
        	for(int ii = 0; ii <array_1974961709.length; ii++) {
        		org.junit.Assert.assertEquals(array_1974961709[ii], array_384921724[ii]);
        	};
        int[] array_215630225 = new int[]{5,6};
        	int[] array_1507503842 = (int[])((org.sat4j.minisat.constraints.cnf.OriginalBinaryClause)o_testSimplePhoneSATSmall_remove2__24).getLits();
        	for(int ii = 0; ii <array_215630225.length; ii++) {
        		org.junit.Assert.assertEquals(array_215630225[ii], array_1507503842[ii]);
        	};
        VecInt clause8 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause8)).toString());
        Assert.assertTrue(((VecInt) (clause8)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove2__27 = clause8.push(2);
        Assert.assertEquals("2", ((VecInt) (o_testSimplePhoneSATSmall_remove2__27)).toString());
        Assert.assertEquals(2, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove2__27)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove2__27)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove2__28 = clause8.push((-3));
        Assert.assertEquals("2,-3", ((VecInt) (o_testSimplePhoneSATSmall_remove2__28)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove2__28)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove2__28)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove2__30 = this.solver.addClause(clause8);
        Assert.assertFalse(((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove2__30)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove2__30)).getActivity())), 0.1);
        int[] array_748098940 = new int[]{4,7};
        	int[] array_245896805 = (int[])((org.sat4j.minisat.constraints.cnf.OriginalBinaryClause)o_testSimplePhoneSATSmall_remove2__30).getLits();
        	for(int ii = 0; ii <array_748098940.length; ii++) {
        		org.junit.Assert.assertEquals(array_748098940[ii], array_245896805[ii]);
        	};
        Assert.assertEquals("2[?] -3[?]", ((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove2__30)).toString());
        Assert.assertEquals(5, ((int) (((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove2__30)).hashCode())));
        int[] array_1987896797 = new int[]{4,7};
        	int[] array_1662530941 = (int[])((org.sat4j.minisat.constraints.cnf.OriginalBinaryClause)o_testSimplePhoneSATSmall_remove2__30).getLits();
        	for(int ii = 0; ii <array_1987896797.length; ii++) {
        		org.junit.Assert.assertEquals(array_1987896797[ii], array_1662530941[ii]);
        	};
        int[] array_399465337 = new int[]{4,7};
        	int[] array_429322718 = (int[])((org.sat4j.minisat.constraints.cnf.OriginalBinaryClause)o_testSimplePhoneSATSmall_remove2__30).getLits();
        	for(int ii = 0; ii <array_399465337.length; ii++) {
        		org.junit.Assert.assertEquals(array_399465337[ii], array_429322718[ii]);
        	};
        VecInt clause4 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause4)).toString());
        Assert.assertTrue(((VecInt) (clause4)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove2__34 = clause4.push((-4));
        Assert.assertEquals("-4", ((VecInt) (o_testSimplePhoneSATSmall_remove2__34)).toString());
        Assert.assertEquals(-4, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove2__34)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove2__34)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove2__36 = clause4.push(1);
        Assert.assertEquals("-4,1", ((VecInt) (o_testSimplePhoneSATSmall_remove2__36)).toString());
        Assert.assertEquals(-1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove2__36)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove2__36)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove2__37 = this.solver.addClause(clause4);
        Assert.assertFalse(((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove2__37)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove2__37)).getActivity())), 0.1);
        int[] array_508309831 = new int[]{2,9};
        	int[] array_1074653261 = (int[])((org.sat4j.minisat.constraints.cnf.OriginalBinaryClause)o_testSimplePhoneSATSmall_remove2__37).getLits();
        	for(int ii = 0; ii <array_508309831.length; ii++) {
        		org.junit.Assert.assertEquals(array_508309831[ii], array_1074653261[ii]);
        	};
        Assert.assertEquals("1[?] -4[?]", ((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove2__37)).toString());
        Assert.assertEquals(5, ((int) (((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove2__37)).hashCode())));
        int[] array_972509826 = new int[]{2,9};
        	int[] array_643907857 = (int[])((org.sat4j.minisat.constraints.cnf.OriginalBinaryClause)o_testSimplePhoneSATSmall_remove2__37).getLits();
        	for(int ii = 0; ii <array_972509826.length; ii++) {
        		org.junit.Assert.assertEquals(array_972509826[ii], array_643907857[ii]);
        	};
        int[] array_123192235 = new int[]{2,9};
        	int[] array_528171170 = (int[])((org.sat4j.minisat.constraints.cnf.OriginalBinaryClause)o_testSimplePhoneSATSmall_remove2__37).getLits();
        	for(int ii = 0; ii <array_123192235.length; ii++) {
        		org.junit.Assert.assertEquals(array_123192235[ii], array_528171170[ii]);
        	};
        VecInt clause5 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause5)).toString());
        Assert.assertTrue(((VecInt) (clause5)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove2__41 = clause5.push((-5));
        Assert.assertEquals("-5", ((VecInt) (o_testSimplePhoneSATSmall_remove2__41)).toString());
        Assert.assertEquals(-5, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove2__41)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove2__41)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove2__43 = clause5.push(4);
        Assert.assertEquals("-5,4", ((VecInt) (o_testSimplePhoneSATSmall_remove2__43)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove2__43)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove2__43)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove2__44 = this.solver.addClause(clause5);
        Assert.assertFalse(((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove2__44)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove2__44)).getActivity())), 0.1);
        int[] array_1966561588 = new int[]{8,11};
        	int[] array_2111982053 = (int[])((org.sat4j.minisat.constraints.cnf.OriginalBinaryClause)o_testSimplePhoneSATSmall_remove2__44).getLits();
        	for(int ii = 0; ii <array_1966561588.length; ii++) {
        		org.junit.Assert.assertEquals(array_1966561588[ii], array_2111982053[ii]);
        	};
        Assert.assertEquals("4[?] -5[?]", ((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove2__44)).toString());
        Assert.assertEquals(9, ((int) (((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove2__44)).hashCode())));
        int[] array_1345460158 = new int[]{8,11};
        	int[] array_387626152 = (int[])((org.sat4j.minisat.constraints.cnf.OriginalBinaryClause)o_testSimplePhoneSATSmall_remove2__44).getLits();
        	for(int ii = 0; ii <array_1345460158.length; ii++) {
        		org.junit.Assert.assertEquals(array_1345460158[ii], array_387626152[ii]);
        	};
        int[] array_2007119514 = new int[]{8,11};
        	int[] array_1743183821 = (int[])((org.sat4j.minisat.constraints.cnf.OriginalBinaryClause)o_testSimplePhoneSATSmall_remove2__44).getLits();
        	for(int ii = 0; ii <array_2007119514.length; ii++) {
        		org.junit.Assert.assertEquals(array_2007119514[ii], array_1743183821[ii]);
        	};
        VecInt clause6 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause6)).toString());
        Assert.assertTrue(((VecInt) (clause6)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove2__47 = clause6.push((-6));
        Assert.assertEquals("-6", ((VecInt) (o_testSimplePhoneSATSmall_remove2__47)).toString());
        Assert.assertEquals(-6, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove2__47)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove2__47)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove2__49 = clause6.push(4);
        Assert.assertEquals("-6,4", ((VecInt) (o_testSimplePhoneSATSmall_remove2__49)).toString());
        Assert.assertEquals(-1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove2__49)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove2__49)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove2__50 = this.solver.addClause(clause6);
        Assert.assertFalse(((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove2__50)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove2__50)).getActivity())), 0.1);
        int[] array_781669035 = new int[]{8,13};
        	int[] array_2018401948 = (int[])((org.sat4j.minisat.constraints.cnf.OriginalBinaryClause)o_testSimplePhoneSATSmall_remove2__50).getLits();
        	for(int ii = 0; ii <array_781669035.length; ii++) {
        		org.junit.Assert.assertEquals(array_781669035[ii], array_2018401948[ii]);
        	};
        Assert.assertEquals("4[?] -6[?]", ((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove2__50)).toString());
        Assert.assertEquals(10, ((int) (((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove2__50)).hashCode())));
        int[] array_885048381 = new int[]{8,13};
        	int[] array_1858485617 = (int[])((org.sat4j.minisat.constraints.cnf.OriginalBinaryClause)o_testSimplePhoneSATSmall_remove2__50).getLits();
        	for(int ii = 0; ii <array_885048381.length; ii++) {
        		org.junit.Assert.assertEquals(array_885048381[ii], array_1858485617[ii]);
        	};
        int[] array_1503854603 = new int[]{8,13};
        	int[] array_1866619758 = (int[])((org.sat4j.minisat.constraints.cnf.OriginalBinaryClause)o_testSimplePhoneSATSmall_remove2__50).getLits();
        	for(int ii = 0; ii <array_1503854603.length; ii++) {
        		org.junit.Assert.assertEquals(array_1503854603[ii], array_1866619758[ii]);
        	};
        VecInt clause7 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause7)).toString());
        Assert.assertTrue(((VecInt) (clause7)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove2__53 = clause7.push(5);
        Assert.assertEquals("5", ((VecInt) (o_testSimplePhoneSATSmall_remove2__53)).toString());
        Assert.assertEquals(5, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove2__53)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove2__53)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove2__54 = clause7.push(6);
        Assert.assertEquals("5,6", ((VecInt) (o_testSimplePhoneSATSmall_remove2__54)).toString());
        Assert.assertEquals(5, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove2__54)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove2__54)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove2__55 = clause7.push((-4));
        Assert.assertEquals("5,6,-4", ((VecInt) (o_testSimplePhoneSATSmall_remove2__55)).toString());
        Assert.assertEquals(2, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove2__55)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove2__55)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove2__57 = this.solver.addAtLeast(clause6, 1);
        Assert.assertFalse(((OriginalWLClause) (o_testSimplePhoneSATSmall_remove2__57)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((OriginalWLClause) (o_testSimplePhoneSATSmall_remove2__57)).getActivity())), 0.1);
        int[] array_716195297 = new int[]{8,13};
        	int[] array_1911146178 = (int[])((org.sat4j.minisat.constraints.cnf.OriginalWLClause)o_testSimplePhoneSATSmall_remove2__57).getLits();
        	for(int ii = 0; ii <array_716195297.length; ii++) {
        		org.junit.Assert.assertEquals(array_716195297[ii], array_1911146178[ii]);
        	};
        Assert.assertEquals("4[?] -6[?] ", ((OriginalWLClause) (o_testSimplePhoneSATSmall_remove2__57)).toString());
        Assert.assertEquals(10, ((int) (((OriginalWLClause) (o_testSimplePhoneSATSmall_remove2__57)).hashCode())));
        int[] array_325140373 = new int[]{8,13};
        	int[] array_1177665243 = (int[])((org.sat4j.minisat.constraints.cnf.OriginalWLClause)o_testSimplePhoneSATSmall_remove2__57).getLits();
        	for(int ii = 0; ii <array_325140373.length; ii++) {
        		org.junit.Assert.assertEquals(array_325140373[ii], array_1177665243[ii]);
        	};
        int[] array_1043498900 = new int[]{8,13};
        	int[] array_1706630214 = (int[])((org.sat4j.minisat.constraints.cnf.OriginalWLClause)o_testSimplePhoneSATSmall_remove2__57).getLits();
        	for(int ii = 0; ii <array_1043498900.length; ii++) {
        		org.junit.Assert.assertEquals(array_1043498900[ii], array_1706630214[ii]);
        	};
        VecInt bound1 = new VecInt();
        Assert.assertEquals("", ((VecInt) (bound1)).toString());
        Assert.assertTrue(((VecInt) (bound1)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove2__61 = bound1.push(3);
        Assert.assertEquals("3", ((VecInt) (o_testSimplePhoneSATSmall_remove2__61)).toString());
        Assert.assertEquals(3, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove2__61)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove2__61)).isEmpty());
        int[] o_testSimplePhoneSATSmall_remove2__62 = this.solver.findModel(bound1);
        int[] array_1576904691 = new int[]{1,2,3,-4,-5,-6};
        	int[] array_1362946453 = (int[])o_testSimplePhoneSATSmall_remove2__62;
        	for(int ii = 0; ii <array_1576904691.length; ii++) {
        		org.junit.Assert.assertEquals(array_1576904691[ii], array_1362946453[ii]);
        	};
        VecInt bound2 = new VecInt();
        Assert.assertEquals("", ((VecInt) (bound2)).toString());
        Assert.assertTrue(((VecInt) (bound2)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove2__65 = bound2.push((-3));
        Assert.assertEquals("-3", ((VecInt) (o_testSimplePhoneSATSmall_remove2__65)).toString());
        Assert.assertEquals(-3, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove2__65)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove2__65)).isEmpty());
        int[] o_testSimplePhoneSATSmall_remove2__67 = this.solver.findModel(bound2);
        int[] array_668687851 = new int[]{-1,-2,-3,-4,-5,-6};
        	int[] array_1038895465 = (int[])o_testSimplePhoneSATSmall_remove2__67;
        	for(int ii = 0; ii <array_668687851.length; ii++) {
        		org.junit.Assert.assertEquals(array_668687851[ii], array_1038895465[ii]);
        	};
        VecInt bound3 = new VecInt();
        Assert.assertEquals("", ((VecInt) (bound3)).toString());
        Assert.assertTrue(((VecInt) (bound3)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove2__70 = bound3.push(5);
        Assert.assertEquals("5", ((VecInt) (o_testSimplePhoneSATSmall_remove2__70)).toString());
        Assert.assertEquals(5, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove2__70)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove2__70)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove2__71 = bound3.push(3);
        Assert.assertEquals("5,3", ((VecInt) (o_testSimplePhoneSATSmall_remove2__71)).toString());
        Assert.assertEquals(4, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove2__71)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove2__71)).isEmpty());
        int[] o_testSimplePhoneSATSmall_remove2__72 = this.solver.findModel(bound3);
        int[] array_1275732480 = new int[]{1,2,3,4,5,-6};
        	int[] array_1197870923 = (int[])o_testSimplePhoneSATSmall_remove2__72;
        	for(int ii = 0; ii <array_1275732480.length; ii++) {
        		org.junit.Assert.assertEquals(array_1275732480[ii], array_1197870923[ii]);
        	};
        VecInt bound4 = new VecInt();
        Assert.assertEquals("", ((VecInt) (bound4)).toString());
        Assert.assertTrue(((VecInt) (bound4)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove2__75 = bound4.push(5);
        Assert.assertEquals("5", ((VecInt) (o_testSimplePhoneSATSmall_remove2__75)).toString());
        Assert.assertEquals(5, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove2__75)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove2__75)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove2__76 = bound4.push((-3));
        Assert.assertEquals("5,-3", ((VecInt) (o_testSimplePhoneSATSmall_remove2__76)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove2__76)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove2__76)).isEmpty());
        this.solver.findModel(bound4);
        VecInt bound5 = new VecInt();
        bound5.push(4);
        bound5.push((-3));
        this.solver.findModel(bound5);
        VecInt bound6 = new VecInt();
        bound6.push(4);
        bound6.push(3);
        this.solver.findModel(bound6);
        VecInt bound7 = new VecInt();
        int[] model = this.solver.findModel(bound7);
        Set<Integer> satisfiedModel = new HashSet<Integer>();
        for (int i : model) {
            satisfiedModel.add(new Integer(i));
        }
        satisfiedModel.contains(new Integer(4));
        satisfiedModel.contains(new Integer(1));
        satisfiedModel.contains(new Integer(2));
    }

    @Test(timeout = 30000)
    public void testSimplePhoneSATSmall_remove8_remove601_remove2627() throws Exception, ContradictionException, TimeoutException {
        VecInt clause0 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause0)).toString());
        Assert.assertTrue(((VecInt) (clause0)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove8__4 = clause0.push(1);
        Assert.assertEquals("1", ((VecInt) (o_testSimplePhoneSATSmall_remove8__4)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove8__4)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove8__4)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove8__5 = this.solver.addClause(clause0);
        Assert.assertTrue(((UnitClause) (o_testSimplePhoneSATSmall_remove8__5)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((UnitClause) (o_testSimplePhoneSATSmall_remove8__5)).getActivity())), 0.1);
        Assert.assertEquals("1", ((UnitClause) (o_testSimplePhoneSATSmall_remove8__5)).toString());
        VecInt clause1 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause1)).toString());
        Assert.assertTrue(((VecInt) (clause1)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove8__9 = clause1.push(1);
        Assert.assertEquals("1", ((VecInt) (o_testSimplePhoneSATSmall_remove8__9)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove8__9)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove8__9)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove8__10 = clause1.push((-2));
        Assert.assertEquals("1,-2", ((VecInt) (o_testSimplePhoneSATSmall_remove8__10)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove8__10)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove8__10)).isEmpty());
        VecInt clause2 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause2)).toString());
        Assert.assertTrue(((VecInt) (clause2)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove8_remove601__22 = clause2.push(2);
        Assert.assertEquals("2", ((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601__22)).toString());
        Assert.assertEquals(2, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601__22)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601__22)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove8_remove601__23 = clause2.push((-1));
        Assert.assertEquals("2,-1", ((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601__23)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601__23)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601__23)).isEmpty());
        VecInt clause3 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause3)).toString());
        Assert.assertTrue(((VecInt) (clause3)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove8_remove601__28 = clause3.push(3);
        Assert.assertEquals("3", ((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601__28)).toString());
        Assert.assertEquals(3, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601__28)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601__28)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove8_remove601__29 = clause3.push((-2));
        Assert.assertEquals("3,-2", ((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601__29)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601__29)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601__29)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove8_remove601__31 = this.solver.addClause(clause3);
        Assert.assertFalse(((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove8_remove601__31)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove8_remove601__31)).getActivity())), 0.1);
        int[] array_433642770 = new int[]{5,6};
        	int[] array_585025440 = (int[])((org.sat4j.minisat.constraints.cnf.OriginalBinaryClause)o_testSimplePhoneSATSmall_remove8_remove601__31).getLits();
        	for(int ii = 0; ii <array_433642770.length; ii++) {
        		org.junit.Assert.assertEquals(array_433642770[ii], array_585025440[ii]);
        	};
        Assert.assertEquals("-2[?] 3[?]", ((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove8_remove601__31)).toString());
        Assert.assertEquals(5, ((int) (((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove8_remove601__31)).hashCode())));
        int[] array_647957772 = new int[]{5,6};
        	int[] array_1445861917 = (int[])((org.sat4j.minisat.constraints.cnf.OriginalBinaryClause)o_testSimplePhoneSATSmall_remove8_remove601__31).getLits();
        	for(int ii = 0; ii <array_647957772.length; ii++) {
        		org.junit.Assert.assertEquals(array_647957772[ii], array_1445861917[ii]);
        	};
        VecInt clause8 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause8)).toString());
        Assert.assertTrue(((VecInt) (clause8)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove8_remove601__34 = clause8.push(2);
        Assert.assertEquals("2", ((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601__34)).toString());
        Assert.assertEquals(2, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601__34)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601__34)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove8_remove601__35 = clause8.push((-3));
        Assert.assertEquals("2,-3", ((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601__35)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601__35)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601__35)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove8_remove601__37 = this.solver.addClause(clause8);
        Assert.assertFalse(((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove8_remove601__37)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove8_remove601__37)).getActivity())), 0.1);
        int[] array_596786893 = new int[]{4,7};
        	int[] array_879187128 = (int[])((org.sat4j.minisat.constraints.cnf.OriginalBinaryClause)o_testSimplePhoneSATSmall_remove8_remove601__37).getLits();
        	for(int ii = 0; ii <array_596786893.length; ii++) {
        		org.junit.Assert.assertEquals(array_596786893[ii], array_879187128[ii]);
        	};
        Assert.assertEquals("2[?] -3[?]", ((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove8_remove601__37)).toString());
        Assert.assertEquals(5, ((int) (((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove8_remove601__37)).hashCode())));
        int[] array_993563436 = new int[]{4,7};
        	int[] array_15742801 = (int[])((org.sat4j.minisat.constraints.cnf.OriginalBinaryClause)o_testSimplePhoneSATSmall_remove8_remove601__37).getLits();
        	for(int ii = 0; ii <array_993563436.length; ii++) {
        		org.junit.Assert.assertEquals(array_993563436[ii], array_15742801[ii]);
        	};
        VecInt clause4 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause4)).toString());
        Assert.assertTrue(((VecInt) (clause4)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove8_remove601__41 = clause4.push((-4));
        Assert.assertEquals("-4", ((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601__41)).toString());
        Assert.assertEquals(-4, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601__41)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601__41)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove8_remove601__43 = clause4.push(1);
        Assert.assertEquals("-4,1", ((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601__43)).toString());
        Assert.assertEquals(-1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601__43)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601__43)).isEmpty());
        this.solver.addClause(clause4);
        VecInt clause5 = new VecInt();
        clause5.push((-5));
        clause5.push(4);
        this.solver.addClause(clause5);
        VecInt clause6 = new VecInt();
        clause6.push((-6));
        clause6.push(4);
        this.solver.addClause(clause6);
        VecInt clause7 = new VecInt();
        clause7.push(5);
        clause7.push(6);
        clause7.push((-4));
        this.solver.addAtLeast(clause6, 1);
        this.solver.isSatisfiable();
        VecInt bound1 = new VecInt();
        bound1.push(3);
        this.solver.findModel(bound1);
        VecInt bound2 = new VecInt();
        bound2.push((-3));
        this.solver.findModel(bound2);
        VecInt bound3 = new VecInt();
        bound3.push(5);
        this.solver.findModel(bound3);
        VecInt bound4 = new VecInt();
        bound4.push(5);
        bound4.push((-3));
        this.solver.findModel(bound4);
        VecInt bound5 = new VecInt();
        bound5.push(4);
        bound5.push((-3));
        this.solver.findModel(bound5);
        VecInt bound6 = new VecInt();
        bound6.push(4);
        bound6.push(3);
        this.solver.findModel(bound6);
        VecInt bound7 = new VecInt();
        bound7.push(4);
        int[] model = this.solver.findModel(bound7);
        Set<Integer> satisfiedModel = new HashSet<Integer>();
        for (int i : model) {
            satisfiedModel.add(new Integer(i));
        }
        satisfiedModel.contains(new Integer(4));
        satisfiedModel.contains(new Integer(1));
        satisfiedModel.contains(new Integer(2));
    }

    @Test(timeout = 30000)
    public void testSimplePhoneSATSmall_remove8_remove601_remove2566() throws Exception, ContradictionException, TimeoutException {
        VecInt clause0 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause0)).toString());
        Assert.assertTrue(((VecInt) (clause0)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove8__4 = clause0.push(1);
        Assert.assertEquals("1", ((VecInt) (o_testSimplePhoneSATSmall_remove8__4)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove8__4)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove8__4)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove8__5 = this.solver.addClause(clause0);
        Assert.assertTrue(((UnitClause) (o_testSimplePhoneSATSmall_remove8__5)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((UnitClause) (o_testSimplePhoneSATSmall_remove8__5)).getActivity())), 0.1);
        Assert.assertEquals("1", ((UnitClause) (o_testSimplePhoneSATSmall_remove8__5)).toString());
        VecInt clause1 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause1)).toString());
        Assert.assertTrue(((VecInt) (clause1)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove8__9 = clause1.push(1);
        Assert.assertEquals("1", ((VecInt) (o_testSimplePhoneSATSmall_remove8__9)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove8__9)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove8__9)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove8__10 = clause1.push((-2));
        Assert.assertEquals("1,-2", ((VecInt) (o_testSimplePhoneSATSmall_remove8__10)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove8__10)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove8__10)).isEmpty());
        VecInt clause2 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause2)).toString());
        Assert.assertTrue(((VecInt) (clause2)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove8_remove601__22 = clause2.push(2);
        Assert.assertEquals("2", ((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601__22)).toString());
        Assert.assertEquals(2, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601__22)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601__22)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove8_remove601__23 = clause2.push((-1));
        Assert.assertEquals("2,-1", ((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601__23)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601__23)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601__23)).isEmpty());
        VecInt clause3 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause3)).toString());
        Assert.assertTrue(((VecInt) (clause3)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove8_remove601__28 = clause3.push(3);
        Assert.assertEquals("3", ((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601__28)).toString());
        Assert.assertEquals(3, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601__28)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601__28)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove8_remove601__29 = clause3.push((-2));
        Assert.assertEquals("3,-2", ((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601__29)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601__29)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601__29)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove8_remove601__31 = this.solver.addClause(clause3);
        Assert.assertFalse(((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove8_remove601__31)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove8_remove601__31)).getActivity())), 0.1);
        int[] array_529324187 = new int[]{5,6};
        	int[] array_1941079130 = (int[])((org.sat4j.minisat.constraints.cnf.OriginalBinaryClause)o_testSimplePhoneSATSmall_remove8_remove601__31).getLits();
        	for(int ii = 0; ii <array_529324187.length; ii++) {
        		org.junit.Assert.assertEquals(array_529324187[ii], array_1941079130[ii]);
        	};
        Assert.assertEquals("-2[?] 3[?]", ((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove8_remove601__31)).toString());
        Assert.assertEquals(5, ((int) (((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove8_remove601__31)).hashCode())));
        int[] array_647957772 = new int[]{5,6};
        	int[] array_1445861917 = (int[])((org.sat4j.minisat.constraints.cnf.OriginalBinaryClause)o_testSimplePhoneSATSmall_remove8_remove601__31).getLits();
        	for(int ii = 0; ii <array_647957772.length; ii++) {
        		org.junit.Assert.assertEquals(array_647957772[ii], array_1445861917[ii]);
        	};
        VecInt clause8 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause8)).toString());
        Assert.assertTrue(((VecInt) (clause8)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove8_remove601__34 = clause8.push(2);
        Assert.assertEquals("2", ((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601__34)).toString());
        Assert.assertEquals(2, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601__34)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601__34)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove8_remove601__35 = clause8.push((-3));
        Assert.assertEquals("2,-3", ((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601__35)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601__35)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601__35)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove8_remove601__37 = this.solver.addClause(clause8);
        Assert.assertFalse(((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove8_remove601__37)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove8_remove601__37)).getActivity())), 0.1);
        int[] array_322590741 = new int[]{4,7};
        	int[] array_386236172 = (int[])((org.sat4j.minisat.constraints.cnf.OriginalBinaryClause)o_testSimplePhoneSATSmall_remove8_remove601__37).getLits();
        	for(int ii = 0; ii <array_322590741.length; ii++) {
        		org.junit.Assert.assertEquals(array_322590741[ii], array_386236172[ii]);
        	};
        Assert.assertEquals("2[?] -3[?]", ((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove8_remove601__37)).toString());
        Assert.assertEquals(5, ((int) (((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove8_remove601__37)).hashCode())));
        int[] array_993563436 = new int[]{4,7};
        	int[] array_15742801 = (int[])((org.sat4j.minisat.constraints.cnf.OriginalBinaryClause)o_testSimplePhoneSATSmall_remove8_remove601__37).getLits();
        	for(int ii = 0; ii <array_993563436.length; ii++) {
        		org.junit.Assert.assertEquals(array_993563436[ii], array_15742801[ii]);
        	};
        VecInt clause4 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause4)).toString());
        Assert.assertTrue(((VecInt) (clause4)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove8_remove601__41 = clause4.push((-4));
        Assert.assertEquals("-4", ((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601__41)).toString());
        Assert.assertEquals(-4, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601__41)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601__41)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove8_remove601__43 = clause4.push(1);
        Assert.assertEquals("-4,1", ((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601__43)).toString());
        Assert.assertEquals(-1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601__43)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601__43)).isEmpty());
        this.solver.addClause(clause4);
        VecInt clause5 = new VecInt();
        clause5.push((-5));
        clause5.push(4);
        this.solver.addClause(clause5);
        VecInt clause6 = new VecInt();
        clause6.push((-6));
        this.solver.addClause(clause6);
        VecInt clause7 = new VecInt();
        clause7.push(5);
        clause7.push(6);
        clause7.push((-4));
        this.solver.addAtLeast(clause6, 1);
        this.solver.isSatisfiable();
        VecInt bound1 = new VecInt();
        bound1.push(3);
        this.solver.findModel(bound1);
        VecInt bound2 = new VecInt();
        bound2.push((-3));
        this.solver.findModel(bound2);
        VecInt bound3 = new VecInt();
        bound3.push(5);
        bound3.push(3);
        this.solver.findModel(bound3);
        VecInt bound4 = new VecInt();
        bound4.push(5);
        bound4.push((-3));
        this.solver.findModel(bound4);
        VecInt bound5 = new VecInt();
        bound5.push(4);
        bound5.push((-3));
        this.solver.findModel(bound5);
        VecInt bound6 = new VecInt();
        bound6.push(4);
        bound6.push(3);
        this.solver.findModel(bound6);
        VecInt bound7 = new VecInt();
        bound7.push(4);
        int[] model = this.solver.findModel(bound7);
        Set<Integer> satisfiedModel = new HashSet<Integer>();
        for (int i : model) {
            satisfiedModel.add(new Integer(i));
        }
        satisfiedModel.contains(new Integer(4));
        satisfiedModel.contains(new Integer(1));
        satisfiedModel.contains(new Integer(2));
    }

    @Test(timeout = 30000)
    public void testSimplePhoneSATSmall_remove8_remove601_remove2550() throws Exception, ContradictionException, TimeoutException {
        VecInt clause0 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause0)).toString());
        Assert.assertTrue(((VecInt) (clause0)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove8__4 = clause0.push(1);
        Assert.assertEquals("1", ((VecInt) (o_testSimplePhoneSATSmall_remove8__4)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove8__4)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove8__4)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove8__5 = this.solver.addClause(clause0);
        Assert.assertTrue(((UnitClause) (o_testSimplePhoneSATSmall_remove8__5)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((UnitClause) (o_testSimplePhoneSATSmall_remove8__5)).getActivity())), 0.1);
        Assert.assertEquals("1", ((UnitClause) (o_testSimplePhoneSATSmall_remove8__5)).toString());
        VecInt clause1 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause1)).toString());
        Assert.assertTrue(((VecInt) (clause1)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove8__9 = clause1.push(1);
        Assert.assertEquals("1", ((VecInt) (o_testSimplePhoneSATSmall_remove8__9)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove8__9)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove8__9)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove8__10 = clause1.push((-2));
        Assert.assertEquals("1,-2", ((VecInt) (o_testSimplePhoneSATSmall_remove8__10)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove8__10)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove8__10)).isEmpty());
        VecInt clause2 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause2)).toString());
        Assert.assertTrue(((VecInt) (clause2)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove8_remove601__22 = clause2.push(2);
        Assert.assertEquals("2", ((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601__22)).toString());
        Assert.assertEquals(2, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601__22)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601__22)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove8_remove601__23 = clause2.push((-1));
        Assert.assertEquals("2,-1", ((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601__23)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601__23)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601__23)).isEmpty());
        VecInt clause3 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause3)).toString());
        Assert.assertTrue(((VecInt) (clause3)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove8_remove601__28 = clause3.push(3);
        Assert.assertEquals("3", ((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601__28)).toString());
        Assert.assertEquals(3, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601__28)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601__28)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove8_remove601__29 = clause3.push((-2));
        Assert.assertEquals("3,-2", ((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601__29)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601__29)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601__29)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove8_remove601__31 = this.solver.addClause(clause3);
        Assert.assertFalse(((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove8_remove601__31)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove8_remove601__31)).getActivity())), 0.1);
        int[] array_723499066 = new int[]{5,6};
        	int[] array_1801536478 = (int[])((org.sat4j.minisat.constraints.cnf.OriginalBinaryClause)o_testSimplePhoneSATSmall_remove8_remove601__31).getLits();
        	for(int ii = 0; ii <array_723499066.length; ii++) {
        		org.junit.Assert.assertEquals(array_723499066[ii], array_1801536478[ii]);
        	};
        Assert.assertEquals("-2[?] 3[?]", ((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove8_remove601__31)).toString());
        Assert.assertEquals(5, ((int) (((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove8_remove601__31)).hashCode())));
        int[] array_647957772 = new int[]{5,6};
        	int[] array_1445861917 = (int[])((org.sat4j.minisat.constraints.cnf.OriginalBinaryClause)o_testSimplePhoneSATSmall_remove8_remove601__31).getLits();
        	for(int ii = 0; ii <array_647957772.length; ii++) {
        		org.junit.Assert.assertEquals(array_647957772[ii], array_1445861917[ii]);
        	};
        VecInt clause8 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause8)).toString());
        Assert.assertTrue(((VecInt) (clause8)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove8_remove601__34 = clause8.push(2);
        Assert.assertEquals("2", ((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601__34)).toString());
        Assert.assertEquals(2, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601__34)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601__34)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove8_remove601__35 = clause8.push((-3));
        Assert.assertEquals("2,-3", ((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601__35)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601__35)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601__35)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove8_remove601__37 = this.solver.addClause(clause8);
        Assert.assertFalse(((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove8_remove601__37)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove8_remove601__37)).getActivity())), 0.1);
        int[] array_1897626312 = new int[]{4,7};
        	int[] array_1101067695 = (int[])((org.sat4j.minisat.constraints.cnf.OriginalBinaryClause)o_testSimplePhoneSATSmall_remove8_remove601__37).getLits();
        	for(int ii = 0; ii <array_1897626312.length; ii++) {
        		org.junit.Assert.assertEquals(array_1897626312[ii], array_1101067695[ii]);
        	};
        Assert.assertEquals("2[?] -3[?]", ((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove8_remove601__37)).toString());
        Assert.assertEquals(5, ((int) (((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove8_remove601__37)).hashCode())));
        int[] array_993563436 = new int[]{4,7};
        	int[] array_15742801 = (int[])((org.sat4j.minisat.constraints.cnf.OriginalBinaryClause)o_testSimplePhoneSATSmall_remove8_remove601__37).getLits();
        	for(int ii = 0; ii <array_993563436.length; ii++) {
        		org.junit.Assert.assertEquals(array_993563436[ii], array_15742801[ii]);
        	};
        VecInt clause4 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause4)).toString());
        Assert.assertTrue(((VecInt) (clause4)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove8_remove601__41 = clause4.push((-4));
        Assert.assertEquals("-4", ((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601__41)).toString());
        Assert.assertEquals(-4, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601__41)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601__41)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove8_remove601__43 = clause4.push(1);
        Assert.assertEquals("-4,1", ((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601__43)).toString());
        Assert.assertEquals(-1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601__43)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601__43)).isEmpty());
        this.solver.addClause(clause4);
        VecInt clause5 = new VecInt();
        clause5.push((-5));
        this.solver.addClause(clause5);
        VecInt clause6 = new VecInt();
        clause6.push((-6));
        clause6.push(4);
        this.solver.addClause(clause6);
        VecInt clause7 = new VecInt();
        clause7.push(5);
        clause7.push(6);
        clause7.push((-4));
        this.solver.addAtLeast(clause6, 1);
        this.solver.isSatisfiable();
        VecInt bound1 = new VecInt();
        bound1.push(3);
        this.solver.findModel(bound1);
        VecInt bound2 = new VecInt();
        bound2.push((-3));
        this.solver.findModel(bound2);
        VecInt bound3 = new VecInt();
        bound3.push(5);
        bound3.push(3);
        this.solver.findModel(bound3);
        VecInt bound4 = new VecInt();
        bound4.push(5);
        bound4.push((-3));
        this.solver.findModel(bound4);
        VecInt bound5 = new VecInt();
        bound5.push(4);
        bound5.push((-3));
        this.solver.findModel(bound5);
        VecInt bound6 = new VecInt();
        bound6.push(4);
        bound6.push(3);
        this.solver.findModel(bound6);
        VecInt bound7 = new VecInt();
        bound7.push(4);
        int[] model = this.solver.findModel(bound7);
        Set<Integer> satisfiedModel = new HashSet<Integer>();
        for (int i : model) {
            satisfiedModel.add(new Integer(i));
        }
        satisfiedModel.contains(new Integer(4));
        satisfiedModel.contains(new Integer(1));
        satisfiedModel.contains(new Integer(2));
    }

    @Test(timeout = 30000)
    public void testSimplePhoneSATSmall_remove8_remove601_remove2545() throws Exception, ContradictionException, TimeoutException {
        VecInt clause0 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause0)).toString());
        Assert.assertTrue(((VecInt) (clause0)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove8__4 = clause0.push(1);
        Assert.assertEquals("1", ((VecInt) (o_testSimplePhoneSATSmall_remove8__4)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove8__4)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove8__4)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove8__5 = this.solver.addClause(clause0);
        Assert.assertTrue(((UnitClause) (o_testSimplePhoneSATSmall_remove8__5)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((UnitClause) (o_testSimplePhoneSATSmall_remove8__5)).getActivity())), 0.1);
        Assert.assertEquals("1", ((UnitClause) (o_testSimplePhoneSATSmall_remove8__5)).toString());
        VecInt clause1 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause1)).toString());
        Assert.assertTrue(((VecInt) (clause1)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove8__9 = clause1.push(1);
        Assert.assertEquals("1", ((VecInt) (o_testSimplePhoneSATSmall_remove8__9)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove8__9)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove8__9)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove8__10 = clause1.push((-2));
        Assert.assertEquals("1,-2", ((VecInt) (o_testSimplePhoneSATSmall_remove8__10)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove8__10)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove8__10)).isEmpty());
        VecInt clause2 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause2)).toString());
        Assert.assertTrue(((VecInt) (clause2)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove8_remove601__22 = clause2.push(2);
        Assert.assertEquals("2", ((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601__22)).toString());
        Assert.assertEquals(2, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601__22)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601__22)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove8_remove601__23 = clause2.push((-1));
        Assert.assertEquals("2,-1", ((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601__23)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601__23)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601__23)).isEmpty());
        VecInt clause3 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause3)).toString());
        Assert.assertTrue(((VecInt) (clause3)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove8_remove601__28 = clause3.push(3);
        Assert.assertEquals("3", ((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601__28)).toString());
        Assert.assertEquals(3, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601__28)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601__28)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove8_remove601__29 = clause3.push((-2));
        Assert.assertEquals("3,-2", ((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601__29)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601__29)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601__29)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove8_remove601__31 = this.solver.addClause(clause3);
        Assert.assertFalse(((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove8_remove601__31)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove8_remove601__31)).getActivity())), 0.1);
        int[] array_1900382884 = new int[]{5,6};
        	int[] array_1778163488 = (int[])((org.sat4j.minisat.constraints.cnf.OriginalBinaryClause)o_testSimplePhoneSATSmall_remove8_remove601__31).getLits();
        	for(int ii = 0; ii <array_1900382884.length; ii++) {
        		org.junit.Assert.assertEquals(array_1900382884[ii], array_1778163488[ii]);
        	};
        Assert.assertEquals("-2[?] 3[?]", ((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove8_remove601__31)).toString());
        Assert.assertEquals(5, ((int) (((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove8_remove601__31)).hashCode())));
        int[] array_647957772 = new int[]{5,6};
        	int[] array_1445861917 = (int[])((org.sat4j.minisat.constraints.cnf.OriginalBinaryClause)o_testSimplePhoneSATSmall_remove8_remove601__31).getLits();
        	for(int ii = 0; ii <array_647957772.length; ii++) {
        		org.junit.Assert.assertEquals(array_647957772[ii], array_1445861917[ii]);
        	};
        VecInt clause8 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause8)).toString());
        Assert.assertTrue(((VecInt) (clause8)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove8_remove601__34 = clause8.push(2);
        Assert.assertEquals("2", ((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601__34)).toString());
        Assert.assertEquals(2, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601__34)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601__34)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove8_remove601__35 = clause8.push((-3));
        Assert.assertEquals("2,-3", ((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601__35)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601__35)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601__35)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove8_remove601__37 = this.solver.addClause(clause8);
        Assert.assertFalse(((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove8_remove601__37)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove8_remove601__37)).getActivity())), 0.1);
        int[] array_540142073 = new int[]{4,7};
        	int[] array_406099007 = (int[])((org.sat4j.minisat.constraints.cnf.OriginalBinaryClause)o_testSimplePhoneSATSmall_remove8_remove601__37).getLits();
        	for(int ii = 0; ii <array_540142073.length; ii++) {
        		org.junit.Assert.assertEquals(array_540142073[ii], array_406099007[ii]);
        	};
        Assert.assertEquals("2[?] -3[?]", ((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove8_remove601__37)).toString());
        Assert.assertEquals(5, ((int) (((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove8_remove601__37)).hashCode())));
        int[] array_993563436 = new int[]{4,7};
        	int[] array_15742801 = (int[])((org.sat4j.minisat.constraints.cnf.OriginalBinaryClause)o_testSimplePhoneSATSmall_remove8_remove601__37).getLits();
        	for(int ii = 0; ii <array_993563436.length; ii++) {
        		org.junit.Assert.assertEquals(array_993563436[ii], array_15742801[ii]);
        	};
        VecInt clause4 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause4)).toString());
        Assert.assertTrue(((VecInt) (clause4)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove8_remove601__41 = clause4.push((-4));
        Assert.assertEquals("-4", ((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601__41)).toString());
        Assert.assertEquals(-4, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601__41)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601__41)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove8_remove601__43 = clause4.push(1);
        Assert.assertEquals("-4,1", ((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601__43)).toString());
        Assert.assertEquals(-1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601__43)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601__43)).isEmpty());
        this.solver.addClause(clause4);
        VecInt clause5 = new VecInt();
        clause5.push(4);
        this.solver.addClause(clause5);
        VecInt clause6 = new VecInt();
        clause6.push((-6));
        clause6.push(4);
        this.solver.addClause(clause6);
        VecInt clause7 = new VecInt();
        clause7.push(5);
        clause7.push(6);
        clause7.push((-4));
        this.solver.addAtLeast(clause6, 1);
        this.solver.isSatisfiable();
        VecInt bound1 = new VecInt();
        bound1.push(3);
        this.solver.findModel(bound1);
        VecInt bound2 = new VecInt();
        bound2.push((-3));
        this.solver.findModel(bound2);
        VecInt bound3 = new VecInt();
        bound3.push(5);
        bound3.push(3);
        this.solver.findModel(bound3);
        VecInt bound4 = new VecInt();
        bound4.push(5);
        bound4.push((-3));
        this.solver.findModel(bound4);
        VecInt bound5 = new VecInt();
        bound5.push(4);
        bound5.push((-3));
        this.solver.findModel(bound5);
        VecInt bound6 = new VecInt();
        bound6.push(4);
        bound6.push(3);
        this.solver.findModel(bound6);
        VecInt bound7 = new VecInt();
        bound7.push(4);
        int[] model = this.solver.findModel(bound7);
        Set<Integer> satisfiedModel = new HashSet<Integer>();
        for (int i : model) {
            satisfiedModel.add(new Integer(i));
        }
        satisfiedModel.contains(new Integer(4));
        satisfiedModel.contains(new Integer(1));
        satisfiedModel.contains(new Integer(2));
    }

    @Test(timeout = 30000)
    public void testSimplePhoneSATSmall_remove8_remove601_remove2600() throws Exception, ContradictionException, TimeoutException {
        VecInt clause0 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause0)).toString());
        Assert.assertTrue(((VecInt) (clause0)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove8__4 = clause0.push(1);
        Assert.assertEquals("1", ((VecInt) (o_testSimplePhoneSATSmall_remove8__4)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove8__4)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove8__4)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove8__5 = this.solver.addClause(clause0);
        Assert.assertTrue(((UnitClause) (o_testSimplePhoneSATSmall_remove8__5)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((UnitClause) (o_testSimplePhoneSATSmall_remove8__5)).getActivity())), 0.1);
        Assert.assertEquals("1", ((UnitClause) (o_testSimplePhoneSATSmall_remove8__5)).toString());
        VecInt clause1 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause1)).toString());
        Assert.assertTrue(((VecInt) (clause1)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove8__9 = clause1.push(1);
        Assert.assertEquals("1", ((VecInt) (o_testSimplePhoneSATSmall_remove8__9)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove8__9)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove8__9)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove8__10 = clause1.push((-2));
        Assert.assertEquals("1,-2", ((VecInt) (o_testSimplePhoneSATSmall_remove8__10)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove8__10)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove8__10)).isEmpty());
        VecInt clause2 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause2)).toString());
        Assert.assertTrue(((VecInt) (clause2)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove8_remove601__22 = clause2.push(2);
        Assert.assertEquals("2", ((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601__22)).toString());
        Assert.assertEquals(2, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601__22)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601__22)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove8_remove601__23 = clause2.push((-1));
        Assert.assertEquals("2,-1", ((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601__23)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601__23)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601__23)).isEmpty());
        VecInt clause3 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause3)).toString());
        Assert.assertTrue(((VecInt) (clause3)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove8_remove601__28 = clause3.push(3);
        Assert.assertEquals("3", ((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601__28)).toString());
        Assert.assertEquals(3, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601__28)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601__28)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove8_remove601__29 = clause3.push((-2));
        Assert.assertEquals("3,-2", ((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601__29)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601__29)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601__29)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove8_remove601__31 = this.solver.addClause(clause3);
        Assert.assertFalse(((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove8_remove601__31)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove8_remove601__31)).getActivity())), 0.1);
        int[] array_2062186369 = new int[]{5,6};
        	int[] array_1813723066 = (int[])((org.sat4j.minisat.constraints.cnf.OriginalBinaryClause)o_testSimplePhoneSATSmall_remove8_remove601__31).getLits();
        	for(int ii = 0; ii <array_2062186369.length; ii++) {
        		org.junit.Assert.assertEquals(array_2062186369[ii], array_1813723066[ii]);
        	};
        Assert.assertEquals("-2[?] 3[?]", ((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove8_remove601__31)).toString());
        Assert.assertEquals(5, ((int) (((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove8_remove601__31)).hashCode())));
        int[] array_647957772 = new int[]{5,6};
        	int[] array_1445861917 = (int[])((org.sat4j.minisat.constraints.cnf.OriginalBinaryClause)o_testSimplePhoneSATSmall_remove8_remove601__31).getLits();
        	for(int ii = 0; ii <array_647957772.length; ii++) {
        		org.junit.Assert.assertEquals(array_647957772[ii], array_1445861917[ii]);
        	};
        VecInt clause8 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause8)).toString());
        Assert.assertTrue(((VecInt) (clause8)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove8_remove601__34 = clause8.push(2);
        Assert.assertEquals("2", ((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601__34)).toString());
        Assert.assertEquals(2, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601__34)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601__34)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove8_remove601__35 = clause8.push((-3));
        Assert.assertEquals("2,-3", ((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601__35)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601__35)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601__35)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove8_remove601__37 = this.solver.addClause(clause8);
        Assert.assertFalse(((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove8_remove601__37)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove8_remove601__37)).getActivity())), 0.1);
        int[] array_1922221755 = new int[]{4,7};
        	int[] array_140128835 = (int[])((org.sat4j.minisat.constraints.cnf.OriginalBinaryClause)o_testSimplePhoneSATSmall_remove8_remove601__37).getLits();
        	for(int ii = 0; ii <array_1922221755.length; ii++) {
        		org.junit.Assert.assertEquals(array_1922221755[ii], array_140128835[ii]);
        	};
        Assert.assertEquals("2[?] -3[?]", ((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove8_remove601__37)).toString());
        Assert.assertEquals(5, ((int) (((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove8_remove601__37)).hashCode())));
        int[] array_993563436 = new int[]{4,7};
        	int[] array_15742801 = (int[])((org.sat4j.minisat.constraints.cnf.OriginalBinaryClause)o_testSimplePhoneSATSmall_remove8_remove601__37).getLits();
        	for(int ii = 0; ii <array_993563436.length; ii++) {
        		org.junit.Assert.assertEquals(array_993563436[ii], array_15742801[ii]);
        	};
        VecInt clause4 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause4)).toString());
        Assert.assertTrue(((VecInt) (clause4)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove8_remove601__41 = clause4.push((-4));
        Assert.assertEquals("-4", ((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601__41)).toString());
        Assert.assertEquals(-4, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601__41)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601__41)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove8_remove601__43 = clause4.push(1);
        Assert.assertEquals("-4,1", ((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601__43)).toString());
        Assert.assertEquals(-1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601__43)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601__43)).isEmpty());
        this.solver.addClause(clause4);
        VecInt clause5 = new VecInt();
        clause5.push((-5));
        clause5.push(4);
        this.solver.addClause(clause5);
        VecInt clause6 = new VecInt();
        clause6.push((-6));
        clause6.push(4);
        this.solver.addClause(clause6);
        VecInt clause7 = new VecInt();
        clause7.push(5);
        clause7.push(6);
        clause7.push((-4));
        this.solver.addAtLeast(clause6, 1);
        VecInt bound1 = new VecInt();
        bound1.push(3);
        this.solver.findModel(bound1);
        VecInt bound2 = new VecInt();
        bound2.push((-3));
        this.solver.findModel(bound2);
        VecInt bound3 = new VecInt();
        bound3.push(5);
        bound3.push(3);
        this.solver.findModel(bound3);
        VecInt bound4 = new VecInt();
        bound4.push(5);
        bound4.push((-3));
        this.solver.findModel(bound4);
        VecInt bound5 = new VecInt();
        bound5.push(4);
        bound5.push((-3));
        this.solver.findModel(bound5);
        VecInt bound6 = new VecInt();
        bound6.push(4);
        bound6.push(3);
        this.solver.findModel(bound6);
        VecInt bound7 = new VecInt();
        bound7.push(4);
        int[] model = this.solver.findModel(bound7);
        Set<Integer> satisfiedModel = new HashSet<Integer>();
        for (int i : model) {
            satisfiedModel.add(new Integer(i));
        }
        satisfiedModel.contains(new Integer(4));
        satisfiedModel.contains(new Integer(1));
        satisfiedModel.contains(new Integer(2));
    }

    @Test(timeout = 30000)
    public void testSimplePhoneSATSmall_remove8_remove601_remove2541() throws Exception, ContradictionException, TimeoutException {
        VecInt clause0 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause0)).toString());
        Assert.assertTrue(((VecInt) (clause0)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove8__4 = clause0.push(1);
        Assert.assertEquals("1", ((VecInt) (o_testSimplePhoneSATSmall_remove8__4)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove8__4)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove8__4)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove8__5 = this.solver.addClause(clause0);
        Assert.assertTrue(((UnitClause) (o_testSimplePhoneSATSmall_remove8__5)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((UnitClause) (o_testSimplePhoneSATSmall_remove8__5)).getActivity())), 0.1);
        Assert.assertEquals("1", ((UnitClause) (o_testSimplePhoneSATSmall_remove8__5)).toString());
        VecInt clause1 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause1)).toString());
        Assert.assertTrue(((VecInt) (clause1)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove8__9 = clause1.push(1);
        Assert.assertEquals("1", ((VecInt) (o_testSimplePhoneSATSmall_remove8__9)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove8__9)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove8__9)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove8__10 = clause1.push((-2));
        Assert.assertEquals("1,-2", ((VecInt) (o_testSimplePhoneSATSmall_remove8__10)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove8__10)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove8__10)).isEmpty());
        VecInt clause2 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause2)).toString());
        Assert.assertTrue(((VecInt) (clause2)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove8_remove601__22 = clause2.push(2);
        Assert.assertEquals("2", ((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601__22)).toString());
        Assert.assertEquals(2, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601__22)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601__22)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove8_remove601__23 = clause2.push((-1));
        Assert.assertEquals("2,-1", ((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601__23)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601__23)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601__23)).isEmpty());
        VecInt clause3 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause3)).toString());
        Assert.assertTrue(((VecInt) (clause3)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove8_remove601__28 = clause3.push(3);
        Assert.assertEquals("3", ((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601__28)).toString());
        Assert.assertEquals(3, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601__28)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601__28)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove8_remove601__29 = clause3.push((-2));
        Assert.assertEquals("3,-2", ((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601__29)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601__29)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601__29)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove8_remove601__31 = this.solver.addClause(clause3);
        Assert.assertFalse(((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove8_remove601__31)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove8_remove601__31)).getActivity())), 0.1);
        int[] array_1062308521 = new int[]{5,6};
        	int[] array_1090167672 = (int[])((org.sat4j.minisat.constraints.cnf.OriginalBinaryClause)o_testSimplePhoneSATSmall_remove8_remove601__31).getLits();
        	for(int ii = 0; ii <array_1062308521.length; ii++) {
        		org.junit.Assert.assertEquals(array_1062308521[ii], array_1090167672[ii]);
        	};
        Assert.assertEquals("-2[?] 3[?]", ((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove8_remove601__31)).toString());
        Assert.assertEquals(5, ((int) (((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove8_remove601__31)).hashCode())));
        int[] array_647957772 = new int[]{5,6};
        	int[] array_1445861917 = (int[])((org.sat4j.minisat.constraints.cnf.OriginalBinaryClause)o_testSimplePhoneSATSmall_remove8_remove601__31).getLits();
        	for(int ii = 0; ii <array_647957772.length; ii++) {
        		org.junit.Assert.assertEquals(array_647957772[ii], array_1445861917[ii]);
        	};
        VecInt clause8 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause8)).toString());
        Assert.assertTrue(((VecInt) (clause8)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove8_remove601__34 = clause8.push(2);
        Assert.assertEquals("2", ((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601__34)).toString());
        Assert.assertEquals(2, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601__34)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601__34)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove8_remove601__35 = clause8.push((-3));
        Assert.assertEquals("2,-3", ((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601__35)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601__35)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601__35)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove8_remove601__37 = this.solver.addClause(clause8);
        Assert.assertFalse(((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove8_remove601__37)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove8_remove601__37)).getActivity())), 0.1);
        int[] array_255710100 = new int[]{4,7};
        	int[] array_277525003 = (int[])((org.sat4j.minisat.constraints.cnf.OriginalBinaryClause)o_testSimplePhoneSATSmall_remove8_remove601__37).getLits();
        	for(int ii = 0; ii <array_255710100.length; ii++) {
        		org.junit.Assert.assertEquals(array_255710100[ii], array_277525003[ii]);
        	};
        Assert.assertEquals("2[?] -3[?]", ((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove8_remove601__37)).toString());
        Assert.assertEquals(5, ((int) (((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove8_remove601__37)).hashCode())));
        int[] array_993563436 = new int[]{4,7};
        	int[] array_15742801 = (int[])((org.sat4j.minisat.constraints.cnf.OriginalBinaryClause)o_testSimplePhoneSATSmall_remove8_remove601__37).getLits();
        	for(int ii = 0; ii <array_993563436.length; ii++) {
        		org.junit.Assert.assertEquals(array_993563436[ii], array_15742801[ii]);
        	};
        VecInt clause4 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause4)).toString());
        Assert.assertTrue(((VecInt) (clause4)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove8_remove601__41 = clause4.push((-4));
        Assert.assertEquals("-4", ((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601__41)).toString());
        Assert.assertEquals(-4, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601__41)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601__41)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove8_remove601__43 = clause4.push(1);
        Assert.assertEquals("-4,1", ((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601__43)).toString());
        Assert.assertEquals(-1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601__43)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601__43)).isEmpty());
        VecInt clause5 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause5)).toString());
        Assert.assertTrue(((VecInt) (clause5)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove8_remove601_remove2541__71 = clause5.push((-5));
        Assert.assertEquals("-5", ((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601_remove2541__71)).toString());
        Assert.assertEquals(-5, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601_remove2541__71)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601_remove2541__71)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove8_remove601_remove2541__73 = clause5.push(4);
        Assert.assertEquals("-5,4", ((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601_remove2541__73)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601_remove2541__73)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601_remove2541__73)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove8_remove601_remove2541__74 = this.solver.addClause(clause5);
        Assert.assertFalse(((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove8_remove601_remove2541__74)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove8_remove601_remove2541__74)).getActivity())), 0.1);
        int[] array_1767464599 = new int[]{8,11};
        	int[] array_114178832 = (int[])((org.sat4j.minisat.constraints.cnf.OriginalBinaryClause)o_testSimplePhoneSATSmall_remove8_remove601_remove2541__74).getLits();
        	for(int ii = 0; ii <array_1767464599.length; ii++) {
        		org.junit.Assert.assertEquals(array_1767464599[ii], array_114178832[ii]);
        	};
        Assert.assertEquals("4[?] -5[?]", ((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove8_remove601_remove2541__74)).toString());
        Assert.assertEquals(9, ((int) (((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove8_remove601_remove2541__74)).hashCode())));
        VecInt clause6 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause6)).toString());
        Assert.assertTrue(((VecInt) (clause6)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove8_remove601_remove2541__77 = clause6.push((-6));
        Assert.assertEquals("-6", ((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601_remove2541__77)).toString());
        Assert.assertEquals(-6, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601_remove2541__77)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601_remove2541__77)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove8_remove601_remove2541__79 = clause6.push(4);
        Assert.assertEquals("-6,4", ((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601_remove2541__79)).toString());
        Assert.assertEquals(-1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601_remove2541__79)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601_remove2541__79)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove8_remove601_remove2541__80 = this.solver.addClause(clause6);
        Assert.assertFalse(((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove8_remove601_remove2541__80)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove8_remove601_remove2541__80)).getActivity())), 0.1);
        int[] array_300081527 = new int[]{8,13};
        	int[] array_1812566043 = (int[])((org.sat4j.minisat.constraints.cnf.OriginalBinaryClause)o_testSimplePhoneSATSmall_remove8_remove601_remove2541__80).getLits();
        	for(int ii = 0; ii <array_300081527.length; ii++) {
        		org.junit.Assert.assertEquals(array_300081527[ii], array_1812566043[ii]);
        	};
        Assert.assertEquals("4[?] -6[?]", ((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove8_remove601_remove2541__80)).toString());
        Assert.assertEquals(10, ((int) (((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove8_remove601_remove2541__80)).hashCode())));
        VecInt clause7 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause7)).toString());
        Assert.assertTrue(((VecInt) (clause7)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove8_remove601_remove2541__83 = clause7.push(5);
        Assert.assertEquals("5", ((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601_remove2541__83)).toString());
        Assert.assertEquals(5, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601_remove2541__83)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601_remove2541__83)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove8_remove601_remove2541__84 = clause7.push(6);
        Assert.assertEquals("5,6", ((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601_remove2541__84)).toString());
        Assert.assertEquals(5, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601_remove2541__84)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601_remove2541__84)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove8_remove601_remove2541__85 = clause7.push((-4));
        Assert.assertEquals("5,6,-4", ((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601_remove2541__85)).toString());
        Assert.assertEquals(2, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601_remove2541__85)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601_remove2541__85)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove8_remove601_remove2541__87 = this.solver.addAtLeast(clause6, 1);
        Assert.assertFalse(((OriginalWLClause) (o_testSimplePhoneSATSmall_remove8_remove601_remove2541__87)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((OriginalWLClause) (o_testSimplePhoneSATSmall_remove8_remove601_remove2541__87)).getActivity())), 0.1);
        int[] array_1574550675 = new int[]{8,13};
        	int[] array_1392198656 = (int[])((org.sat4j.minisat.constraints.cnf.OriginalWLClause)o_testSimplePhoneSATSmall_remove8_remove601_remove2541__87).getLits();
        	for(int ii = 0; ii <array_1574550675.length; ii++) {
        		org.junit.Assert.assertEquals(array_1574550675[ii], array_1392198656[ii]);
        	};
        Assert.assertEquals("4[?] -6[?] ", ((OriginalWLClause) (o_testSimplePhoneSATSmall_remove8_remove601_remove2541__87)).toString());
        Assert.assertEquals(10, ((int) (((OriginalWLClause) (o_testSimplePhoneSATSmall_remove8_remove601_remove2541__87)).hashCode())));
        this.solver.isSatisfiable();
        VecInt bound1 = new VecInt();
        Assert.assertEquals("", ((VecInt) (bound1)).toString());
        Assert.assertTrue(((VecInt) (bound1)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove8_remove601_remove2541__91 = bound1.push(3);
        Assert.assertEquals("3", ((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601_remove2541__91)).toString());
        Assert.assertEquals(3, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601_remove2541__91)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601_remove2541__91)).isEmpty());
        int[] o_testSimplePhoneSATSmall_remove8_remove601_remove2541__92 = this.solver.findModel(bound1);
        int[] array_1592960632 = new int[]{1,2,3,-4,-5,-6};
        	int[] array_1683115576 = (int[])o_testSimplePhoneSATSmall_remove8_remove601_remove2541__92;
        	for(int ii = 0; ii <array_1592960632.length; ii++) {
        		org.junit.Assert.assertEquals(array_1592960632[ii], array_1683115576[ii]);
        	};
        VecInt bound2 = new VecInt();
        Assert.assertEquals("", ((VecInt) (bound2)).toString());
        Assert.assertTrue(((VecInt) (bound2)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove8_remove601_remove2541__95 = bound2.push((-3));
        Assert.assertEquals("-3", ((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601_remove2541__95)).toString());
        Assert.assertEquals(-3, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601_remove2541__95)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601_remove2541__95)).isEmpty());
        int[] o_testSimplePhoneSATSmall_remove8_remove601_remove2541__97 = this.solver.findModel(bound2);
        int[] array_654761484 = new int[]{1,-2,-3,-4,-5,-6};
        	int[] array_1860587896 = (int[])o_testSimplePhoneSATSmall_remove8_remove601_remove2541__97;
        	for(int ii = 0; ii <array_654761484.length; ii++) {
        		org.junit.Assert.assertEquals(array_654761484[ii], array_1860587896[ii]);
        	};
        VecInt bound3 = new VecInt();
        Assert.assertEquals("", ((VecInt) (bound3)).toString());
        Assert.assertTrue(((VecInt) (bound3)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove8_remove601_remove2541__100 = bound3.push(5);
        Assert.assertEquals("5", ((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601_remove2541__100)).toString());
        Assert.assertEquals(5, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601_remove2541__100)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601_remove2541__100)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove8_remove601_remove2541__101 = bound3.push(3);
        Assert.assertEquals("5,3", ((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601_remove2541__101)).toString());
        Assert.assertEquals(4, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601_remove2541__101)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601_remove2541__101)).isEmpty());
        int[] o_testSimplePhoneSATSmall_remove8_remove601_remove2541__102 = this.solver.findModel(bound3);
        int[] array_299482893 = new int[]{1,2,3,4,5,-6};
        	int[] array_277996675 = (int[])o_testSimplePhoneSATSmall_remove8_remove601_remove2541__102;
        	for(int ii = 0; ii <array_299482893.length; ii++) {
        		org.junit.Assert.assertEquals(array_299482893[ii], array_277996675[ii]);
        	};
        VecInt bound4 = new VecInt();
        Assert.assertEquals("", ((VecInt) (bound4)).toString());
        Assert.assertTrue(((VecInt) (bound4)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove8_remove601_remove2541__105 = bound4.push(5);
        Assert.assertEquals("5", ((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601_remove2541__105)).toString());
        Assert.assertEquals(5, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601_remove2541__105)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601_remove2541__105)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove8_remove601_remove2541__106 = bound4.push((-3));
        Assert.assertEquals("5,-3", ((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601_remove2541__106)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601_remove2541__106)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601_remove2541__106)).isEmpty());
        int[] o_testSimplePhoneSATSmall_remove8_remove601_remove2541__108 = this.solver.findModel(bound4);
        int[] array_1897557011 = new int[]{1,-2,-3,4,5,-6};
        	int[] array_586073273 = (int[])o_testSimplePhoneSATSmall_remove8_remove601_remove2541__108;
        	for(int ii = 0; ii <array_1897557011.length; ii++) {
        		org.junit.Assert.assertEquals(array_1897557011[ii], array_586073273[ii]);
        	};
        VecInt bound5 = new VecInt();
        Assert.assertEquals("", ((VecInt) (bound5)).toString());
        Assert.assertTrue(((VecInt) (bound5)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove8_remove601_remove2541__111 = bound5.push(4);
        Assert.assertEquals("4", ((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601_remove2541__111)).toString());
        Assert.assertEquals(4, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601_remove2541__111)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601_remove2541__111)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove8_remove601_remove2541__112 = bound5.push((-3));
        Assert.assertEquals("4,-3", ((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601_remove2541__112)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601_remove2541__112)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601_remove2541__112)).isEmpty());
        int[] o_testSimplePhoneSATSmall_remove8_remove601_remove2541__114 = this.solver.findModel(bound5);
        int[] array_1370492878 = new int[]{1,-2,-3,4,-5,-6};
        	int[] array_1337155929 = (int[])o_testSimplePhoneSATSmall_remove8_remove601_remove2541__114;
        	for(int ii = 0; ii <array_1370492878.length; ii++) {
        		org.junit.Assert.assertEquals(array_1370492878[ii], array_1337155929[ii]);
        	};
        VecInt bound6 = new VecInt();
        Assert.assertEquals("", ((VecInt) (bound6)).toString());
        Assert.assertTrue(((VecInt) (bound6)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove8_remove601_remove2541__117 = bound6.push(4);
        Assert.assertEquals("4", ((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601_remove2541__117)).toString());
        Assert.assertEquals(4, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601_remove2541__117)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601_remove2541__117)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove8_remove601_remove2541__118 = bound6.push(3);
        Assert.assertEquals("4,3", ((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601_remove2541__118)).toString());
        Assert.assertEquals(3, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601_remove2541__118)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601_remove2541__118)).isEmpty());
        int[] o_testSimplePhoneSATSmall_remove8_remove601_remove2541__119 = this.solver.findModel(bound6);
        int[] array_1257431364 = new int[]{1,2,3,4,-5,-6};
        	int[] array_347495950 = (int[])o_testSimplePhoneSATSmall_remove8_remove601_remove2541__119;
        	for(int ii = 0; ii <array_1257431364.length; ii++) {
        		org.junit.Assert.assertEquals(array_1257431364[ii], array_347495950[ii]);
        	};
        VecInt bound7 = new VecInt();
        Assert.assertEquals("", ((VecInt) (bound7)).toString());
        Assert.assertTrue(((VecInt) (bound7)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove8_remove601_remove2541__122 = bound7.push(4);
        Assert.assertEquals("4", ((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601_remove2541__122)).toString());
        Assert.assertEquals(4, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601_remove2541__122)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601_remove2541__122)).isEmpty());
        int[] model = this.solver.findModel(bound7);
        Set<Integer> satisfiedModel = new HashSet<Integer>();
        for (int i : model) {
            satisfiedModel.add(new Integer(i));
        }
        boolean o_testSimplePhoneSATSmall_remove8_remove601_remove2541__132 = satisfiedModel.contains(new Integer(4));
        Assert.assertTrue(o_testSimplePhoneSATSmall_remove8_remove601_remove2541__132);
        boolean o_testSimplePhoneSATSmall_remove8_remove601_remove2541__134 = satisfiedModel.contains(new Integer(1));
        Assert.assertTrue(o_testSimplePhoneSATSmall_remove8_remove601_remove2541__134);
        boolean o_testSimplePhoneSATSmall_remove8_remove601_remove2541__136 = satisfiedModel.contains(new Integer(2));
        Assert.assertFalse(o_testSimplePhoneSATSmall_remove8_remove601_remove2541__136);
        Assert.assertEquals("1", ((VecInt) (clause0)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (clause0)).hashCode())));
        Assert.assertFalse(((VecInt) (clause0)).isEmpty());
        Assert.assertEquals("1", ((VecInt) (o_testSimplePhoneSATSmall_remove8__4)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove8__4)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove8__4)).isEmpty());
        Assert.assertTrue(((UnitClause) (o_testSimplePhoneSATSmall_remove8__5)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((UnitClause) (o_testSimplePhoneSATSmall_remove8__5)).getActivity())), 0.1);
        Assert.assertEquals("1", ((UnitClause) (o_testSimplePhoneSATSmall_remove8__5)).toString());
        Assert.assertEquals("1,-2", ((VecInt) (clause1)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (clause1)).hashCode())));
        Assert.assertFalse(((VecInt) (clause1)).isEmpty());
        Assert.assertEquals("1,-2", ((VecInt) (o_testSimplePhoneSATSmall_remove8__9)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove8__9)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove8__9)).isEmpty());
        Assert.assertEquals("1,-2", ((VecInt) (o_testSimplePhoneSATSmall_remove8__10)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove8__10)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove8__10)).isEmpty());
        Assert.assertEquals("2,-1", ((VecInt) (clause2)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (clause2)).hashCode())));
        Assert.assertFalse(((VecInt) (clause2)).isEmpty());
        Assert.assertEquals("2,-1", ((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601__22)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601__22)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601__22)).isEmpty());
        Assert.assertEquals("2,-1", ((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601__23)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601__23)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601__23)).isEmpty());
        Assert.assertEquals("3,-2", ((VecInt) (clause3)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (clause3)).hashCode())));
        Assert.assertFalse(((VecInt) (clause3)).isEmpty());
        Assert.assertEquals("3,-2", ((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601__28)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601__28)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601__28)).isEmpty());
        Assert.assertEquals("3,-2", ((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601__29)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601__29)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601__29)).isEmpty());
        Assert.assertFalse(((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove8_remove601__31)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove8_remove601__31)).getActivity())), 0.1);
        int[] array_1371357267 = new int[]{5,6};
        	int[] array_1994118788 = (int[])((org.sat4j.minisat.constraints.cnf.OriginalBinaryClause)o_testSimplePhoneSATSmall_remove8_remove601__31).getLits();
        	for(int ii = 0; ii <array_1371357267.length; ii++) {
        		org.junit.Assert.assertEquals(array_1371357267[ii], array_1994118788[ii]);
        	};
        Assert.assertEquals("-2[?] 3[?]", ((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove8_remove601__31)).toString());
        Assert.assertEquals(5, ((int) (((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove8_remove601__31)).hashCode())));
        Assert.assertEquals("2,-3", ((VecInt) (clause8)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (clause8)).hashCode())));
        Assert.assertFalse(((VecInt) (clause8)).isEmpty());
        Assert.assertEquals("2,-3", ((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601__34)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601__34)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601__34)).isEmpty());
        Assert.assertEquals("2,-3", ((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601__35)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601__35)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601__35)).isEmpty());
        Assert.assertFalse(((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove8_remove601__37)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove8_remove601__37)).getActivity())), 0.1);
        int[] array_1498591086 = new int[]{4,7};
        	int[] array_1722820329 = (int[])((org.sat4j.minisat.constraints.cnf.OriginalBinaryClause)o_testSimplePhoneSATSmall_remove8_remove601__37).getLits();
        	for(int ii = 0; ii <array_1498591086.length; ii++) {
        		org.junit.Assert.assertEquals(array_1498591086[ii], array_1722820329[ii]);
        	};
        Assert.assertEquals("2[?] -3[?]", ((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove8_remove601__37)).toString());
        Assert.assertEquals(5, ((int) (((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove8_remove601__37)).hashCode())));
        Assert.assertEquals("-4,1", ((VecInt) (clause4)).toString());
        Assert.assertEquals(-1, ((int) (((VecInt) (clause4)).hashCode())));
        Assert.assertFalse(((VecInt) (clause4)).isEmpty());
        Assert.assertEquals("-4,1", ((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601__41)).toString());
        Assert.assertEquals(-1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601__41)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601__41)).isEmpty());
        Assert.assertEquals("-4,1", ((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601__43)).toString());
        Assert.assertEquals(-1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601__43)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601__43)).isEmpty());
        Assert.assertEquals("-5,4", ((VecInt) (clause5)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (clause5)).hashCode())));
        Assert.assertFalse(((VecInt) (clause5)).isEmpty());
        Assert.assertEquals("-5,4", ((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601_remove2541__71)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601_remove2541__71)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601_remove2541__71)).isEmpty());
        Assert.assertEquals("-5,4", ((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601_remove2541__73)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601_remove2541__73)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601_remove2541__73)).isEmpty());
        Assert.assertFalse(((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove8_remove601_remove2541__74)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove8_remove601_remove2541__74)).getActivity())), 0.1);
        int[] array_1885828872 = new int[]{8,11};
        	int[] array_484007243 = (int[])((org.sat4j.minisat.constraints.cnf.OriginalBinaryClause)o_testSimplePhoneSATSmall_remove8_remove601_remove2541__74).getLits();
        	for(int ii = 0; ii <array_1885828872.length; ii++) {
        		org.junit.Assert.assertEquals(array_1885828872[ii], array_484007243[ii]);
        	};
        Assert.assertEquals("4[?] -5[?]", ((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove8_remove601_remove2541__74)).toString());
        Assert.assertEquals(9, ((int) (((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove8_remove601_remove2541__74)).hashCode())));
        Assert.assertEquals("-6,4", ((VecInt) (clause6)).toString());
        Assert.assertEquals(-1, ((int) (((VecInt) (clause6)).hashCode())));
        Assert.assertFalse(((VecInt) (clause6)).isEmpty());
        Assert.assertEquals("-6,4", ((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601_remove2541__77)).toString());
        Assert.assertEquals(-1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601_remove2541__77)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601_remove2541__77)).isEmpty());
        Assert.assertEquals("-6,4", ((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601_remove2541__79)).toString());
        Assert.assertEquals(-1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601_remove2541__79)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601_remove2541__79)).isEmpty());
        Assert.assertFalse(((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove8_remove601_remove2541__80)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove8_remove601_remove2541__80)).getActivity())), 0.1);
        int[] array_1838454935 = new int[]{8,13};
        	int[] array_1149741643 = (int[])((org.sat4j.minisat.constraints.cnf.OriginalBinaryClause)o_testSimplePhoneSATSmall_remove8_remove601_remove2541__80).getLits();
        	for(int ii = 0; ii <array_1838454935.length; ii++) {
        		org.junit.Assert.assertEquals(array_1838454935[ii], array_1149741643[ii]);
        	};
        Assert.assertEquals("4[?] -6[?]", ((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove8_remove601_remove2541__80)).toString());
        Assert.assertEquals(10, ((int) (((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove8_remove601_remove2541__80)).hashCode())));
        Assert.assertEquals("5,6,-4", ((VecInt) (clause7)).toString());
        Assert.assertEquals(2, ((int) (((VecInt) (clause7)).hashCode())));
        Assert.assertFalse(((VecInt) (clause7)).isEmpty());
        Assert.assertEquals("5,6,-4", ((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601_remove2541__83)).toString());
        Assert.assertEquals(2, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601_remove2541__83)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601_remove2541__83)).isEmpty());
        Assert.assertEquals("5,6,-4", ((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601_remove2541__84)).toString());
        Assert.assertEquals(2, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601_remove2541__84)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601_remove2541__84)).isEmpty());
        Assert.assertEquals("5,6,-4", ((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601_remove2541__85)).toString());
        Assert.assertEquals(2, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601_remove2541__85)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601_remove2541__85)).isEmpty());
        Assert.assertFalse(((OriginalWLClause) (o_testSimplePhoneSATSmall_remove8_remove601_remove2541__87)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((OriginalWLClause) (o_testSimplePhoneSATSmall_remove8_remove601_remove2541__87)).getActivity())), 0.1);
        int[] array_1660168880 = new int[]{13,8};
        	int[] array_751604916 = (int[])((org.sat4j.minisat.constraints.cnf.OriginalWLClause)o_testSimplePhoneSATSmall_remove8_remove601_remove2541__87).getLits();
        	for(int ii = 0; ii <array_1660168880.length; ii++) {
        		org.junit.Assert.assertEquals(array_1660168880[ii], array_751604916[ii]);
        	};
        Assert.assertEquals("-6[?] 4[?] ", ((OriginalWLClause) (o_testSimplePhoneSATSmall_remove8_remove601_remove2541__87)).toString());
        Assert.assertEquals(10, ((int) (((OriginalWLClause) (o_testSimplePhoneSATSmall_remove8_remove601_remove2541__87)).hashCode())));
        Assert.assertEquals("3", ((VecInt) (bound1)).toString());
        Assert.assertEquals(3, ((int) (((VecInt) (bound1)).hashCode())));
        Assert.assertFalse(((VecInt) (bound1)).isEmpty());
        Assert.assertEquals("3", ((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601_remove2541__91)).toString());
        Assert.assertEquals(3, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601_remove2541__91)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601_remove2541__91)).isEmpty());
        int[] array_2082495540 = new int[]{1,2,3,-4,-5,-6};
        	int[] array_1829775511 = (int[])o_testSimplePhoneSATSmall_remove8_remove601_remove2541__92;
        	for(int ii = 0; ii <array_2082495540.length; ii++) {
        		org.junit.Assert.assertEquals(array_2082495540[ii], array_1829775511[ii]);
        	};
        Assert.assertEquals("-3", ((VecInt) (bound2)).toString());
        Assert.assertEquals(-3, ((int) (((VecInt) (bound2)).hashCode())));
        Assert.assertFalse(((VecInt) (bound2)).isEmpty());
        Assert.assertEquals("-3", ((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601_remove2541__95)).toString());
        Assert.assertEquals(-3, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601_remove2541__95)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601_remove2541__95)).isEmpty());
        int[] array_686077736 = new int[]{1,-2,-3,-4,-5,-6};
        	int[] array_1590211304 = (int[])o_testSimplePhoneSATSmall_remove8_remove601_remove2541__97;
        	for(int ii = 0; ii <array_686077736.length; ii++) {
        		org.junit.Assert.assertEquals(array_686077736[ii], array_1590211304[ii]);
        	};
        Assert.assertEquals("5,3", ((VecInt) (bound3)).toString());
        Assert.assertEquals(4, ((int) (((VecInt) (bound3)).hashCode())));
        Assert.assertFalse(((VecInt) (bound3)).isEmpty());
        Assert.assertEquals("5,3", ((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601_remove2541__100)).toString());
        Assert.assertEquals(4, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601_remove2541__100)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601_remove2541__100)).isEmpty());
        Assert.assertEquals("5,3", ((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601_remove2541__101)).toString());
        Assert.assertEquals(4, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601_remove2541__101)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601_remove2541__101)).isEmpty());
        int[] array_80287438 = new int[]{1,2,3,4,5,-6};
        	int[] array_1834292596 = (int[])o_testSimplePhoneSATSmall_remove8_remove601_remove2541__102;
        	for(int ii = 0; ii <array_80287438.length; ii++) {
        		org.junit.Assert.assertEquals(array_80287438[ii], array_1834292596[ii]);
        	};
        Assert.assertEquals("5,-3", ((VecInt) (bound4)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (bound4)).hashCode())));
        Assert.assertFalse(((VecInt) (bound4)).isEmpty());
        Assert.assertEquals("5,-3", ((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601_remove2541__105)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601_remove2541__105)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601_remove2541__105)).isEmpty());
        Assert.assertEquals("5,-3", ((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601_remove2541__106)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601_remove2541__106)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601_remove2541__106)).isEmpty());
        int[] array_1330253807 = new int[]{1,-2,-3,4,5,-6};
        	int[] array_1987176728 = (int[])o_testSimplePhoneSATSmall_remove8_remove601_remove2541__108;
        	for(int ii = 0; ii <array_1330253807.length; ii++) {
        		org.junit.Assert.assertEquals(array_1330253807[ii], array_1987176728[ii]);
        	};
        Assert.assertEquals("4,-3", ((VecInt) (bound5)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (bound5)).hashCode())));
        Assert.assertFalse(((VecInt) (bound5)).isEmpty());
        Assert.assertEquals("4,-3", ((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601_remove2541__111)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601_remove2541__111)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601_remove2541__111)).isEmpty());
        Assert.assertEquals("4,-3", ((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601_remove2541__112)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601_remove2541__112)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601_remove2541__112)).isEmpty());
        int[] array_589571268 = new int[]{1,-2,-3,4,-5,-6};
        	int[] array_1498578888 = (int[])o_testSimplePhoneSATSmall_remove8_remove601_remove2541__114;
        	for(int ii = 0; ii <array_589571268.length; ii++) {
        		org.junit.Assert.assertEquals(array_589571268[ii], array_1498578888[ii]);
        	};
        Assert.assertEquals("4,3", ((VecInt) (bound6)).toString());
        Assert.assertEquals(3, ((int) (((VecInt) (bound6)).hashCode())));
        Assert.assertFalse(((VecInt) (bound6)).isEmpty());
        Assert.assertEquals("4,3", ((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601_remove2541__117)).toString());
        Assert.assertEquals(3, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601_remove2541__117)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601_remove2541__117)).isEmpty());
        Assert.assertEquals("4,3", ((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601_remove2541__118)).toString());
        Assert.assertEquals(3, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601_remove2541__118)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601_remove2541__118)).isEmpty());
        int[] array_2123974864 = new int[]{1,2,3,4,-5,-6};
        	int[] array_339000243 = (int[])o_testSimplePhoneSATSmall_remove8_remove601_remove2541__119;
        	for(int ii = 0; ii <array_2123974864.length; ii++) {
        		org.junit.Assert.assertEquals(array_2123974864[ii], array_339000243[ii]);
        	};
        Assert.assertEquals("4", ((VecInt) (bound7)).toString());
        Assert.assertEquals(4, ((int) (((VecInt) (bound7)).hashCode())));
        Assert.assertFalse(((VecInt) (bound7)).isEmpty());
        Assert.assertEquals("4", ((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601_remove2541__122)).toString());
        Assert.assertEquals(4, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601_remove2541__122)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601_remove2541__122)).isEmpty());
        Assert.assertTrue(o_testSimplePhoneSATSmall_remove8_remove601_remove2541__132);
        Assert.assertTrue(o_testSimplePhoneSATSmall_remove8_remove601_remove2541__134);
    }

    @Test(timeout = 30000)
    public void testSimplePhoneSATSmall_remove8_remove601_remove2595() throws Exception, ContradictionException, TimeoutException {
        VecInt clause0 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause0)).toString());
        Assert.assertTrue(((VecInt) (clause0)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove8__4 = clause0.push(1);
        Assert.assertEquals("1", ((VecInt) (o_testSimplePhoneSATSmall_remove8__4)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove8__4)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove8__4)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove8__5 = this.solver.addClause(clause0);
        Assert.assertTrue(((UnitClause) (o_testSimplePhoneSATSmall_remove8__5)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((UnitClause) (o_testSimplePhoneSATSmall_remove8__5)).getActivity())), 0.1);
        Assert.assertEquals("1", ((UnitClause) (o_testSimplePhoneSATSmall_remove8__5)).toString());
        VecInt clause1 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause1)).toString());
        Assert.assertTrue(((VecInt) (clause1)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove8__9 = clause1.push(1);
        Assert.assertEquals("1", ((VecInt) (o_testSimplePhoneSATSmall_remove8__9)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove8__9)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove8__9)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove8__10 = clause1.push((-2));
        Assert.assertEquals("1,-2", ((VecInt) (o_testSimplePhoneSATSmall_remove8__10)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove8__10)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove8__10)).isEmpty());
        VecInt clause2 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause2)).toString());
        Assert.assertTrue(((VecInt) (clause2)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove8_remove601__22 = clause2.push(2);
        Assert.assertEquals("2", ((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601__22)).toString());
        Assert.assertEquals(2, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601__22)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601__22)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove8_remove601__23 = clause2.push((-1));
        Assert.assertEquals("2,-1", ((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601__23)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601__23)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601__23)).isEmpty());
        VecInt clause3 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause3)).toString());
        Assert.assertTrue(((VecInt) (clause3)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove8_remove601__28 = clause3.push(3);
        Assert.assertEquals("3", ((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601__28)).toString());
        Assert.assertEquals(3, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601__28)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601__28)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove8_remove601__29 = clause3.push((-2));
        Assert.assertEquals("3,-2", ((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601__29)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601__29)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601__29)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove8_remove601__31 = this.solver.addClause(clause3);
        Assert.assertFalse(((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove8_remove601__31)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove8_remove601__31)).getActivity())), 0.1);
        int[] array_1453141525 = new int[]{5,6};
        	int[] array_2034420080 = (int[])((org.sat4j.minisat.constraints.cnf.OriginalBinaryClause)o_testSimplePhoneSATSmall_remove8_remove601__31).getLits();
        	for(int ii = 0; ii <array_1453141525.length; ii++) {
        		org.junit.Assert.assertEquals(array_1453141525[ii], array_2034420080[ii]);
        	};
        Assert.assertEquals("-2[?] 3[?]", ((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove8_remove601__31)).toString());
        Assert.assertEquals(5, ((int) (((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove8_remove601__31)).hashCode())));
        int[] array_647957772 = new int[]{5,6};
        	int[] array_1445861917 = (int[])((org.sat4j.minisat.constraints.cnf.OriginalBinaryClause)o_testSimplePhoneSATSmall_remove8_remove601__31).getLits();
        	for(int ii = 0; ii <array_647957772.length; ii++) {
        		org.junit.Assert.assertEquals(array_647957772[ii], array_1445861917[ii]);
        	};
        VecInt clause8 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause8)).toString());
        Assert.assertTrue(((VecInt) (clause8)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove8_remove601__34 = clause8.push(2);
        Assert.assertEquals("2", ((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601__34)).toString());
        Assert.assertEquals(2, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601__34)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601__34)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove8_remove601__35 = clause8.push((-3));
        Assert.assertEquals("2,-3", ((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601__35)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601__35)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601__35)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove8_remove601__37 = this.solver.addClause(clause8);
        Assert.assertFalse(((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove8_remove601__37)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove8_remove601__37)).getActivity())), 0.1);
        int[] array_954947305 = new int[]{4,7};
        	int[] array_347345595 = (int[])((org.sat4j.minisat.constraints.cnf.OriginalBinaryClause)o_testSimplePhoneSATSmall_remove8_remove601__37).getLits();
        	for(int ii = 0; ii <array_954947305.length; ii++) {
        		org.junit.Assert.assertEquals(array_954947305[ii], array_347345595[ii]);
        	};
        Assert.assertEquals("2[?] -3[?]", ((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove8_remove601__37)).toString());
        Assert.assertEquals(5, ((int) (((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove8_remove601__37)).hashCode())));
        int[] array_993563436 = new int[]{4,7};
        	int[] array_15742801 = (int[])((org.sat4j.minisat.constraints.cnf.OriginalBinaryClause)o_testSimplePhoneSATSmall_remove8_remove601__37).getLits();
        	for(int ii = 0; ii <array_993563436.length; ii++) {
        		org.junit.Assert.assertEquals(array_993563436[ii], array_15742801[ii]);
        	};
        VecInt clause4 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause4)).toString());
        Assert.assertTrue(((VecInt) (clause4)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove8_remove601__41 = clause4.push((-4));
        Assert.assertEquals("-4", ((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601__41)).toString());
        Assert.assertEquals(-4, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601__41)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601__41)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove8_remove601__43 = clause4.push(1);
        Assert.assertEquals("-4,1", ((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601__43)).toString());
        Assert.assertEquals(-1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601__43)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove8_remove601__43)).isEmpty());
        this.solver.addClause(clause4);
        VecInt clause5 = new VecInt();
        clause5.push((-5));
        clause5.push(4);
        this.solver.addClause(clause5);
        VecInt clause6 = new VecInt();
        clause6.push((-6));
        clause6.push(4);
        this.solver.addClause(clause6);
        VecInt clause7 = new VecInt();
        clause7.push(5);
        clause7.push(6);
        clause7.push((-4));
        this.solver.isSatisfiable();
        VecInt bound1 = new VecInt();
        bound1.push(3);
        this.solver.findModel(bound1);
        VecInt bound2 = new VecInt();
        bound2.push((-3));
        this.solver.findModel(bound2);
        VecInt bound3 = new VecInt();
        bound3.push(5);
        bound3.push(3);
        this.solver.findModel(bound3);
        VecInt bound4 = new VecInt();
        bound4.push(5);
        bound4.push((-3));
        this.solver.findModel(bound4);
        VecInt bound5 = new VecInt();
        bound5.push(4);
        bound5.push((-3));
        this.solver.findModel(bound5);
        VecInt bound6 = new VecInt();
        bound6.push(4);
        bound6.push(3);
        this.solver.findModel(bound6);
        VecInt bound7 = new VecInt();
        bound7.push(4);
        int[] model = this.solver.findModel(bound7);
        Set<Integer> satisfiedModel = new HashSet<Integer>();
        for (int i : model) {
            satisfiedModel.add(new Integer(i));
        }
        satisfiedModel.contains(new Integer(4));
        satisfiedModel.contains(new Integer(1));
        satisfiedModel.contains(new Integer(2));
    }

    @Test(timeout = 30000)
    public void testSimplePhoneSATSmall_remove5_remove298_remove3199() throws Exception, ContradictionException, TimeoutException {
        VecInt clause0 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause0)).toString());
        Assert.assertTrue(((VecInt) (clause0)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__4 = clause0.push(1);
        Assert.assertEquals("1", ((VecInt) (o_testSimplePhoneSATSmall_remove5__4)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__4)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__4)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove5__5 = this.solver.addClause(clause0);
        Assert.assertTrue(((UnitClause) (o_testSimplePhoneSATSmall_remove5__5)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((UnitClause) (o_testSimplePhoneSATSmall_remove5__5)).getActivity())), 0.1);
        Assert.assertEquals("1", ((UnitClause) (o_testSimplePhoneSATSmall_remove5__5)).toString());
        VecInt clause1 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause1)).toString());
        Assert.assertTrue(((VecInt) (clause1)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__9 = clause1.push(1);
        Assert.assertEquals("1", ((VecInt) (o_testSimplePhoneSATSmall_remove5__9)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__9)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__9)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__10 = clause1.push((-2));
        Assert.assertEquals("1,-2", ((VecInt) (o_testSimplePhoneSATSmall_remove5__10)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__10)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__10)).isEmpty());
        VecInt clause2 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause2)).toString());
        Assert.assertTrue(((VecInt) (clause2)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__14 = clause2.push(2);
        Assert.assertEquals("2", ((VecInt) (o_testSimplePhoneSATSmall_remove5__14)).toString());
        Assert.assertEquals(2, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__14)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__14)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__15 = clause2.push((-1));
        Assert.assertEquals("2,-1", ((VecInt) (o_testSimplePhoneSATSmall_remove5__15)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__15)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__15)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove5__17 = this.solver.addClause(clause2);
        Assert.assertTrue(((UnitClause) (o_testSimplePhoneSATSmall_remove5__17)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((UnitClause) (o_testSimplePhoneSATSmall_remove5__17)).getActivity())), 0.1);
        Assert.assertEquals("2", ((UnitClause) (o_testSimplePhoneSATSmall_remove5__17)).toString());
        VecInt clause3 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause3)).toString());
        Assert.assertTrue(((VecInt) (clause3)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__21 = clause3.push(3);
        Assert.assertEquals("3", ((VecInt) (o_testSimplePhoneSATSmall_remove5__21)).toString());
        Assert.assertEquals(3, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__21)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__21)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__22 = clause3.push((-2));
        Assert.assertEquals("3,-2", ((VecInt) (o_testSimplePhoneSATSmall_remove5__22)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__22)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__22)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove5__24 = this.solver.addClause(clause3);
        Assert.assertTrue(((UnitClause) (o_testSimplePhoneSATSmall_remove5__24)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((UnitClause) (o_testSimplePhoneSATSmall_remove5__24)).getActivity())), 0.1);
        Assert.assertEquals("3", ((UnitClause) (o_testSimplePhoneSATSmall_remove5__24)).toString());
        VecInt clause8 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause8)).toString());
        Assert.assertTrue(((VecInt) (clause8)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__27 = clause8.push(2);
        Assert.assertEquals("2", ((VecInt) (o_testSimplePhoneSATSmall_remove5__27)).toString());
        Assert.assertEquals(2, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__27)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__27)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__28 = clause8.push((-3));
        Assert.assertEquals("2,-3", ((VecInt) (o_testSimplePhoneSATSmall_remove5__28)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__28)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__28)).isEmpty());
        VecInt clause4 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause4)).toString());
        Assert.assertTrue(((VecInt) (clause4)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5_remove298__57 = clause4.push((-4));
        Assert.assertEquals("-4", ((VecInt) (o_testSimplePhoneSATSmall_remove5_remove298__57)).toString());
        Assert.assertEquals(-4, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5_remove298__57)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5_remove298__57)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5_remove298__59 = clause4.push(1);
        Assert.assertEquals("-4,1", ((VecInt) (o_testSimplePhoneSATSmall_remove5_remove298__59)).toString());
        Assert.assertEquals(-1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5_remove298__59)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5_remove298__59)).isEmpty());
        this.solver.addClause(clause4);
        VecInt clause5 = new VecInt();
        clause5.push((-5));
        clause5.push(4);
        this.solver.addClause(clause5);
        VecInt clause6 = new VecInt();
        clause6.push((-6));
        clause6.push(4);
        this.solver.addClause(clause6);
        VecInt clause7 = new VecInt();
        clause7.push(5);
        clause7.push(6);
        clause7.push((-4));
        this.solver.addAtLeast(clause6, 1);
        this.solver.isSatisfiable();
        VecInt bound1 = new VecInt();
        bound1.push(3);
        this.solver.findModel(bound1);
        VecInt bound2 = new VecInt();
        bound2.push((-3));
        this.solver.findModel(bound2);
        VecInt bound3 = new VecInt();
        bound3.push(5);
        this.solver.findModel(bound3);
        VecInt bound4 = new VecInt();
        bound4.push(5);
        bound4.push((-3));
        this.solver.findModel(bound4);
        VecInt bound5 = new VecInt();
        bound5.push(4);
        bound5.push((-3));
        this.solver.findModel(bound5);
        VecInt bound6 = new VecInt();
        bound6.push(4);
        bound6.push(3);
        this.solver.findModel(bound6);
        VecInt bound7 = new VecInt();
        bound7.push(4);
        int[] model = this.solver.findModel(bound7);
        Set<Integer> satisfiedModel = new HashSet<Integer>();
        for (int i : model) {
            satisfiedModel.add(new Integer(i));
        }
        satisfiedModel.contains(new Integer(4));
        satisfiedModel.contains(new Integer(1));
        satisfiedModel.contains(new Integer(2));
    }

    @Test(timeout = 30000)
    public void testSimplePhoneSATSmall_remove5_remove298_remove3194() throws Exception, ContradictionException, TimeoutException {
        VecInt clause0 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause0)).toString());
        Assert.assertTrue(((VecInt) (clause0)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__4 = clause0.push(1);
        Assert.assertEquals("1", ((VecInt) (o_testSimplePhoneSATSmall_remove5__4)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__4)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__4)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove5__5 = this.solver.addClause(clause0);
        Assert.assertTrue(((UnitClause) (o_testSimplePhoneSATSmall_remove5__5)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((UnitClause) (o_testSimplePhoneSATSmall_remove5__5)).getActivity())), 0.1);
        Assert.assertEquals("1", ((UnitClause) (o_testSimplePhoneSATSmall_remove5__5)).toString());
        VecInt clause1 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause1)).toString());
        Assert.assertTrue(((VecInt) (clause1)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__9 = clause1.push(1);
        Assert.assertEquals("1", ((VecInt) (o_testSimplePhoneSATSmall_remove5__9)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__9)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__9)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__10 = clause1.push((-2));
        Assert.assertEquals("1,-2", ((VecInt) (o_testSimplePhoneSATSmall_remove5__10)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__10)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__10)).isEmpty());
        VecInt clause2 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause2)).toString());
        Assert.assertTrue(((VecInt) (clause2)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__14 = clause2.push(2);
        Assert.assertEquals("2", ((VecInt) (o_testSimplePhoneSATSmall_remove5__14)).toString());
        Assert.assertEquals(2, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__14)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__14)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__15 = clause2.push((-1));
        Assert.assertEquals("2,-1", ((VecInt) (o_testSimplePhoneSATSmall_remove5__15)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__15)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__15)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove5__17 = this.solver.addClause(clause2);
        Assert.assertTrue(((UnitClause) (o_testSimplePhoneSATSmall_remove5__17)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((UnitClause) (o_testSimplePhoneSATSmall_remove5__17)).getActivity())), 0.1);
        Assert.assertEquals("2", ((UnitClause) (o_testSimplePhoneSATSmall_remove5__17)).toString());
        VecInt clause3 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause3)).toString());
        Assert.assertTrue(((VecInt) (clause3)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__21 = clause3.push(3);
        Assert.assertEquals("3", ((VecInt) (o_testSimplePhoneSATSmall_remove5__21)).toString());
        Assert.assertEquals(3, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__21)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__21)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__22 = clause3.push((-2));
        Assert.assertEquals("3,-2", ((VecInt) (o_testSimplePhoneSATSmall_remove5__22)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__22)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__22)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove5__24 = this.solver.addClause(clause3);
        Assert.assertTrue(((UnitClause) (o_testSimplePhoneSATSmall_remove5__24)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((UnitClause) (o_testSimplePhoneSATSmall_remove5__24)).getActivity())), 0.1);
        Assert.assertEquals("3", ((UnitClause) (o_testSimplePhoneSATSmall_remove5__24)).toString());
        VecInt clause8 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause8)).toString());
        Assert.assertTrue(((VecInt) (clause8)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__27 = clause8.push(2);
        Assert.assertEquals("2", ((VecInt) (o_testSimplePhoneSATSmall_remove5__27)).toString());
        Assert.assertEquals(2, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__27)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__27)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__28 = clause8.push((-3));
        Assert.assertEquals("2,-3", ((VecInt) (o_testSimplePhoneSATSmall_remove5__28)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__28)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__28)).isEmpty());
        VecInt clause4 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause4)).toString());
        Assert.assertTrue(((VecInt) (clause4)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5_remove298__57 = clause4.push((-4));
        Assert.assertEquals("-4", ((VecInt) (o_testSimplePhoneSATSmall_remove5_remove298__57)).toString());
        Assert.assertEquals(-4, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5_remove298__57)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5_remove298__57)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5_remove298__59 = clause4.push(1);
        Assert.assertEquals("-4,1", ((VecInt) (o_testSimplePhoneSATSmall_remove5_remove298__59)).toString());
        Assert.assertEquals(-1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5_remove298__59)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5_remove298__59)).isEmpty());
        this.solver.addClause(clause4);
        VecInt clause5 = new VecInt();
        clause5.push((-5));
        clause5.push(4);
        this.solver.addClause(clause5);
        VecInt clause6 = new VecInt();
        clause6.push((-6));
        clause6.push(4);
        this.solver.addClause(clause6);
        VecInt clause7 = new VecInt();
        clause7.push(5);
        clause7.push(6);
        clause7.push((-4));
        this.solver.addAtLeast(clause6, 1);
        this.solver.isSatisfiable();
        VecInt bound1 = new VecInt();
        bound1.push(3);
        this.solver.findModel(bound1);
        VecInt bound2 = new VecInt();
        bound2.push((-3));
        this.solver.findModel(bound2);
        VecInt bound3 = new VecInt();
        bound3.push(3);
        this.solver.findModel(bound3);
        VecInt bound4 = new VecInt();
        bound4.push(5);
        bound4.push((-3));
        this.solver.findModel(bound4);
        VecInt bound5 = new VecInt();
        bound5.push(4);
        bound5.push((-3));
        this.solver.findModel(bound5);
        VecInt bound6 = new VecInt();
        bound6.push(4);
        bound6.push(3);
        this.solver.findModel(bound6);
        VecInt bound7 = new VecInt();
        bound7.push(4);
        int[] model = this.solver.findModel(bound7);
        Set<Integer> satisfiedModel = new HashSet<Integer>();
        for (int i : model) {
            satisfiedModel.add(new Integer(i));
        }
        satisfiedModel.contains(new Integer(4));
        satisfiedModel.contains(new Integer(1));
        satisfiedModel.contains(new Integer(2));
    }

    @Test(timeout = 30000)
    public void testSimplePhoneSATSmall_remove5_remove298_remove3219() throws Exception, ContradictionException, TimeoutException {
        VecInt clause0 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause0)).toString());
        Assert.assertTrue(((VecInt) (clause0)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__4 = clause0.push(1);
        Assert.assertEquals("1", ((VecInt) (o_testSimplePhoneSATSmall_remove5__4)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__4)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__4)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove5__5 = this.solver.addClause(clause0);
        Assert.assertTrue(((UnitClause) (o_testSimplePhoneSATSmall_remove5__5)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((UnitClause) (o_testSimplePhoneSATSmall_remove5__5)).getActivity())), 0.1);
        Assert.assertEquals("1", ((UnitClause) (o_testSimplePhoneSATSmall_remove5__5)).toString());
        VecInt clause1 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause1)).toString());
        Assert.assertTrue(((VecInt) (clause1)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__9 = clause1.push(1);
        Assert.assertEquals("1", ((VecInt) (o_testSimplePhoneSATSmall_remove5__9)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__9)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__9)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__10 = clause1.push((-2));
        Assert.assertEquals("1,-2", ((VecInt) (o_testSimplePhoneSATSmall_remove5__10)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__10)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__10)).isEmpty());
        VecInt clause2 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause2)).toString());
        Assert.assertTrue(((VecInt) (clause2)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__14 = clause2.push(2);
        Assert.assertEquals("2", ((VecInt) (o_testSimplePhoneSATSmall_remove5__14)).toString());
        Assert.assertEquals(2, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__14)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__14)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__15 = clause2.push((-1));
        Assert.assertEquals("2,-1", ((VecInt) (o_testSimplePhoneSATSmall_remove5__15)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__15)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__15)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove5__17 = this.solver.addClause(clause2);
        Assert.assertTrue(((UnitClause) (o_testSimplePhoneSATSmall_remove5__17)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((UnitClause) (o_testSimplePhoneSATSmall_remove5__17)).getActivity())), 0.1);
        Assert.assertEquals("2", ((UnitClause) (o_testSimplePhoneSATSmall_remove5__17)).toString());
        VecInt clause3 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause3)).toString());
        Assert.assertTrue(((VecInt) (clause3)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__21 = clause3.push(3);
        Assert.assertEquals("3", ((VecInt) (o_testSimplePhoneSATSmall_remove5__21)).toString());
        Assert.assertEquals(3, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__21)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__21)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__22 = clause3.push((-2));
        Assert.assertEquals("3,-2", ((VecInt) (o_testSimplePhoneSATSmall_remove5__22)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__22)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__22)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove5__24 = this.solver.addClause(clause3);
        Assert.assertTrue(((UnitClause) (o_testSimplePhoneSATSmall_remove5__24)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((UnitClause) (o_testSimplePhoneSATSmall_remove5__24)).getActivity())), 0.1);
        Assert.assertEquals("3", ((UnitClause) (o_testSimplePhoneSATSmall_remove5__24)).toString());
        VecInt clause8 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause8)).toString());
        Assert.assertTrue(((VecInt) (clause8)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__27 = clause8.push(2);
        Assert.assertEquals("2", ((VecInt) (o_testSimplePhoneSATSmall_remove5__27)).toString());
        Assert.assertEquals(2, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__27)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__27)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__28 = clause8.push((-3));
        Assert.assertEquals("2,-3", ((VecInt) (o_testSimplePhoneSATSmall_remove5__28)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__28)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__28)).isEmpty());
        VecInt clause4 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause4)).toString());
        Assert.assertTrue(((VecInt) (clause4)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5_remove298__57 = clause4.push((-4));
        Assert.assertEquals("-4", ((VecInt) (o_testSimplePhoneSATSmall_remove5_remove298__57)).toString());
        Assert.assertEquals(-4, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5_remove298__57)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5_remove298__57)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5_remove298__59 = clause4.push(1);
        Assert.assertEquals("-4,1", ((VecInt) (o_testSimplePhoneSATSmall_remove5_remove298__59)).toString());
        Assert.assertEquals(-1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5_remove298__59)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5_remove298__59)).isEmpty());
        this.solver.addClause(clause4);
        VecInt clause5 = new VecInt();
        clause5.push((-5));
        clause5.push(4);
        this.solver.addClause(clause5);
        VecInt clause6 = new VecInt();
        clause6.push((-6));
        clause6.push(4);
        this.solver.addClause(clause6);
        VecInt clause7 = new VecInt();
        clause7.push(5);
        clause7.push(6);
        clause7.push((-4));
        this.solver.addAtLeast(clause6, 1);
        this.solver.isSatisfiable();
        VecInt bound1 = new VecInt();
        bound1.push(3);
        this.solver.findModel(bound1);
        VecInt bound2 = new VecInt();
        bound2.push((-3));
        this.solver.findModel(bound2);
        VecInt bound3 = new VecInt();
        bound3.push(5);
        bound3.push(3);
        this.solver.findModel(bound3);
        VecInt bound4 = new VecInt();
        bound4.push(5);
        bound4.push((-3));
        this.solver.findModel(bound4);
        VecInt bound5 = new VecInt();
        bound5.push((-3));
        this.solver.findModel(bound5);
        VecInt bound6 = new VecInt();
        bound6.push(4);
        bound6.push(3);
        this.solver.findModel(bound6);
        VecInt bound7 = new VecInt();
        bound7.push(4);
        int[] model = this.solver.findModel(bound7);
        Set<Integer> satisfiedModel = new HashSet<Integer>();
        for (int i : model) {
            satisfiedModel.add(new Integer(i));
        }
        satisfiedModel.contains(new Integer(4));
        satisfiedModel.contains(new Integer(1));
        satisfiedModel.contains(new Integer(2));
    }

    @Test(timeout = 30000)
    public void testSimplePhoneSATSmall_remove5_remove298_remove3213() throws Exception, ContradictionException, TimeoutException {
        VecInt clause0 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause0)).toString());
        Assert.assertTrue(((VecInt) (clause0)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__4 = clause0.push(1);
        Assert.assertEquals("1", ((VecInt) (o_testSimplePhoneSATSmall_remove5__4)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__4)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__4)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove5__5 = this.solver.addClause(clause0);
        Assert.assertTrue(((UnitClause) (o_testSimplePhoneSATSmall_remove5__5)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((UnitClause) (o_testSimplePhoneSATSmall_remove5__5)).getActivity())), 0.1);
        Assert.assertEquals("1", ((UnitClause) (o_testSimplePhoneSATSmall_remove5__5)).toString());
        VecInt clause1 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause1)).toString());
        Assert.assertTrue(((VecInt) (clause1)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__9 = clause1.push(1);
        Assert.assertEquals("1", ((VecInt) (o_testSimplePhoneSATSmall_remove5__9)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__9)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__9)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__10 = clause1.push((-2));
        Assert.assertEquals("1,-2", ((VecInt) (o_testSimplePhoneSATSmall_remove5__10)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__10)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__10)).isEmpty());
        VecInt clause2 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause2)).toString());
        Assert.assertTrue(((VecInt) (clause2)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__14 = clause2.push(2);
        Assert.assertEquals("2", ((VecInt) (o_testSimplePhoneSATSmall_remove5__14)).toString());
        Assert.assertEquals(2, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__14)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__14)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__15 = clause2.push((-1));
        Assert.assertEquals("2,-1", ((VecInt) (o_testSimplePhoneSATSmall_remove5__15)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__15)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__15)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove5__17 = this.solver.addClause(clause2);
        Assert.assertTrue(((UnitClause) (o_testSimplePhoneSATSmall_remove5__17)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((UnitClause) (o_testSimplePhoneSATSmall_remove5__17)).getActivity())), 0.1);
        Assert.assertEquals("2", ((UnitClause) (o_testSimplePhoneSATSmall_remove5__17)).toString());
        VecInt clause3 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause3)).toString());
        Assert.assertTrue(((VecInt) (clause3)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__21 = clause3.push(3);
        Assert.assertEquals("3", ((VecInt) (o_testSimplePhoneSATSmall_remove5__21)).toString());
        Assert.assertEquals(3, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__21)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__21)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__22 = clause3.push((-2));
        Assert.assertEquals("3,-2", ((VecInt) (o_testSimplePhoneSATSmall_remove5__22)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__22)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__22)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove5__24 = this.solver.addClause(clause3);
        Assert.assertTrue(((UnitClause) (o_testSimplePhoneSATSmall_remove5__24)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((UnitClause) (o_testSimplePhoneSATSmall_remove5__24)).getActivity())), 0.1);
        Assert.assertEquals("3", ((UnitClause) (o_testSimplePhoneSATSmall_remove5__24)).toString());
        VecInt clause8 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause8)).toString());
        Assert.assertTrue(((VecInt) (clause8)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__27 = clause8.push(2);
        Assert.assertEquals("2", ((VecInt) (o_testSimplePhoneSATSmall_remove5__27)).toString());
        Assert.assertEquals(2, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__27)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__27)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__28 = clause8.push((-3));
        Assert.assertEquals("2,-3", ((VecInt) (o_testSimplePhoneSATSmall_remove5__28)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__28)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__28)).isEmpty());
        VecInt clause4 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause4)).toString());
        Assert.assertTrue(((VecInt) (clause4)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5_remove298__57 = clause4.push((-4));
        Assert.assertEquals("-4", ((VecInt) (o_testSimplePhoneSATSmall_remove5_remove298__57)).toString());
        Assert.assertEquals(-4, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5_remove298__57)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5_remove298__57)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5_remove298__59 = clause4.push(1);
        Assert.assertEquals("-4,1", ((VecInt) (o_testSimplePhoneSATSmall_remove5_remove298__59)).toString());
        Assert.assertEquals(-1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5_remove298__59)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5_remove298__59)).isEmpty());
        this.solver.addClause(clause4);
        VecInt clause5 = new VecInt();
        clause5.push((-5));
        clause5.push(4);
        this.solver.addClause(clause5);
        VecInt clause6 = new VecInt();
        clause6.push((-6));
        clause6.push(4);
        this.solver.addClause(clause6);
        VecInt clause7 = new VecInt();
        clause7.push(5);
        clause7.push(6);
        clause7.push((-4));
        this.solver.addAtLeast(clause6, 1);
        this.solver.isSatisfiable();
        VecInt bound1 = new VecInt();
        bound1.push(3);
        this.solver.findModel(bound1);
        VecInt bound2 = new VecInt();
        bound2.push((-3));
        this.solver.findModel(bound2);
        VecInt bound3 = new VecInt();
        bound3.push(5);
        bound3.push(3);
        this.solver.findModel(bound3);
        VecInt bound4 = new VecInt();
        bound4.push((-3));
        this.solver.findModel(bound4);
        VecInt bound5 = new VecInt();
        bound5.push(4);
        bound5.push((-3));
        this.solver.findModel(bound5);
        VecInt bound6 = new VecInt();
        bound6.push(4);
        bound6.push(3);
        this.solver.findModel(bound6);
        VecInt bound7 = new VecInt();
        bound7.push(4);
        int[] model = this.solver.findModel(bound7);
        Set<Integer> satisfiedModel = new HashSet<Integer>();
        for (int i : model) {
            satisfiedModel.add(new Integer(i));
        }
        satisfiedModel.contains(new Integer(4));
        satisfiedModel.contains(new Integer(1));
        satisfiedModel.contains(new Integer(2));
    }

    @Test(timeout = 30000)
    public void testSimplePhoneSATSmall_remove5_remove298_remove3137() throws Exception, ContradictionException, TimeoutException {
        VecInt clause0 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause0)).toString());
        Assert.assertTrue(((VecInt) (clause0)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__4 = clause0.push(1);
        Assert.assertEquals("1", ((VecInt) (o_testSimplePhoneSATSmall_remove5__4)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__4)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__4)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove5__5 = this.solver.addClause(clause0);
        Assert.assertTrue(((UnitClause) (o_testSimplePhoneSATSmall_remove5__5)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((UnitClause) (o_testSimplePhoneSATSmall_remove5__5)).getActivity())), 0.1);
        Assert.assertEquals("1", ((UnitClause) (o_testSimplePhoneSATSmall_remove5__5)).toString());
        VecInt clause1 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause1)).toString());
        Assert.assertTrue(((VecInt) (clause1)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__9 = clause1.push(1);
        Assert.assertEquals("1", ((VecInt) (o_testSimplePhoneSATSmall_remove5__9)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__9)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__9)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__10 = clause1.push((-2));
        Assert.assertEquals("1,-2", ((VecInt) (o_testSimplePhoneSATSmall_remove5__10)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__10)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__10)).isEmpty());
        VecInt clause2 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause2)).toString());
        Assert.assertTrue(((VecInt) (clause2)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__14 = clause2.push(2);
        Assert.assertEquals("2", ((VecInt) (o_testSimplePhoneSATSmall_remove5__14)).toString());
        Assert.assertEquals(2, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__14)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__14)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__15 = clause2.push((-1));
        Assert.assertEquals("2,-1", ((VecInt) (o_testSimplePhoneSATSmall_remove5__15)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__15)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__15)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove5__17 = this.solver.addClause(clause2);
        Assert.assertTrue(((UnitClause) (o_testSimplePhoneSATSmall_remove5__17)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((UnitClause) (o_testSimplePhoneSATSmall_remove5__17)).getActivity())), 0.1);
        Assert.assertEquals("2", ((UnitClause) (o_testSimplePhoneSATSmall_remove5__17)).toString());
        VecInt clause3 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause3)).toString());
        Assert.assertTrue(((VecInt) (clause3)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__21 = clause3.push(3);
        Assert.assertEquals("3", ((VecInt) (o_testSimplePhoneSATSmall_remove5__21)).toString());
        Assert.assertEquals(3, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__21)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__21)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__22 = clause3.push((-2));
        Assert.assertEquals("3,-2", ((VecInt) (o_testSimplePhoneSATSmall_remove5__22)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__22)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__22)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove5__24 = this.solver.addClause(clause3);
        Assert.assertTrue(((UnitClause) (o_testSimplePhoneSATSmall_remove5__24)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((UnitClause) (o_testSimplePhoneSATSmall_remove5__24)).getActivity())), 0.1);
        Assert.assertEquals("3", ((UnitClause) (o_testSimplePhoneSATSmall_remove5__24)).toString());
        VecInt clause8 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause8)).toString());
        Assert.assertTrue(((VecInt) (clause8)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__27 = clause8.push(2);
        Assert.assertEquals("2", ((VecInt) (o_testSimplePhoneSATSmall_remove5__27)).toString());
        Assert.assertEquals(2, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__27)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__27)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__28 = clause8.push((-3));
        Assert.assertEquals("2,-3", ((VecInt) (o_testSimplePhoneSATSmall_remove5__28)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__28)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__28)).isEmpty());
        VecInt clause4 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause4)).toString());
        Assert.assertTrue(((VecInt) (clause4)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5_remove298__57 = clause4.push((-4));
        Assert.assertEquals("-4", ((VecInt) (o_testSimplePhoneSATSmall_remove5_remove298__57)).toString());
        Assert.assertEquals(-4, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5_remove298__57)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5_remove298__57)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5_remove298__59 = clause4.push(1);
        Assert.assertEquals("-4,1", ((VecInt) (o_testSimplePhoneSATSmall_remove5_remove298__59)).toString());
        Assert.assertEquals(-1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5_remove298__59)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5_remove298__59)).isEmpty());
        this.solver.addClause(clause4);
        VecInt clause5 = new VecInt();
        clause5.push((-5));
        clause5.push(4);
        this.solver.addClause(clause5);
        VecInt clause6 = new VecInt();
        clause6.push((-6));
        this.solver.addClause(clause6);
        VecInt clause7 = new VecInt();
        clause7.push(5);
        clause7.push(6);
        clause7.push((-4));
        this.solver.addAtLeast(clause6, 1);
        this.solver.isSatisfiable();
        VecInt bound1 = new VecInt();
        bound1.push(3);
        this.solver.findModel(bound1);
        VecInt bound2 = new VecInt();
        bound2.push((-3));
        this.solver.findModel(bound2);
        VecInt bound3 = new VecInt();
        bound3.push(5);
        bound3.push(3);
        this.solver.findModel(bound3);
        VecInt bound4 = new VecInt();
        bound4.push(5);
        bound4.push((-3));
        this.solver.findModel(bound4);
        VecInt bound5 = new VecInt();
        bound5.push(4);
        bound5.push((-3));
        this.solver.findModel(bound5);
        VecInt bound6 = new VecInt();
        bound6.push(4);
        bound6.push(3);
        this.solver.findModel(bound6);
        VecInt bound7 = new VecInt();
        bound7.push(4);
        int[] model = this.solver.findModel(bound7);
        Set<Integer> satisfiedModel = new HashSet<Integer>();
        for (int i : model) {
            satisfiedModel.add(new Integer(i));
        }
        satisfiedModel.contains(new Integer(4));
        satisfiedModel.contains(new Integer(1));
        satisfiedModel.contains(new Integer(2));
    }

    @Test(timeout = 30000)
    public void testSimplePhoneSATSmall_remove5_remove298_remove3124() throws Exception, ContradictionException, TimeoutException {
        VecInt clause0 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause0)).toString());
        Assert.assertTrue(((VecInt) (clause0)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__4 = clause0.push(1);
        Assert.assertEquals("1", ((VecInt) (o_testSimplePhoneSATSmall_remove5__4)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__4)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__4)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove5__5 = this.solver.addClause(clause0);
        Assert.assertTrue(((UnitClause) (o_testSimplePhoneSATSmall_remove5__5)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((UnitClause) (o_testSimplePhoneSATSmall_remove5__5)).getActivity())), 0.1);
        Assert.assertEquals("1", ((UnitClause) (o_testSimplePhoneSATSmall_remove5__5)).toString());
        VecInt clause1 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause1)).toString());
        Assert.assertTrue(((VecInt) (clause1)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__9 = clause1.push(1);
        Assert.assertEquals("1", ((VecInt) (o_testSimplePhoneSATSmall_remove5__9)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__9)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__9)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__10 = clause1.push((-2));
        Assert.assertEquals("1,-2", ((VecInt) (o_testSimplePhoneSATSmall_remove5__10)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__10)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__10)).isEmpty());
        VecInt clause2 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause2)).toString());
        Assert.assertTrue(((VecInt) (clause2)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__14 = clause2.push(2);
        Assert.assertEquals("2", ((VecInt) (o_testSimplePhoneSATSmall_remove5__14)).toString());
        Assert.assertEquals(2, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__14)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__14)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__15 = clause2.push((-1));
        Assert.assertEquals("2,-1", ((VecInt) (o_testSimplePhoneSATSmall_remove5__15)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__15)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__15)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove5__17 = this.solver.addClause(clause2);
        Assert.assertTrue(((UnitClause) (o_testSimplePhoneSATSmall_remove5__17)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((UnitClause) (o_testSimplePhoneSATSmall_remove5__17)).getActivity())), 0.1);
        Assert.assertEquals("2", ((UnitClause) (o_testSimplePhoneSATSmall_remove5__17)).toString());
        VecInt clause3 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause3)).toString());
        Assert.assertTrue(((VecInt) (clause3)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__21 = clause3.push(3);
        Assert.assertEquals("3", ((VecInt) (o_testSimplePhoneSATSmall_remove5__21)).toString());
        Assert.assertEquals(3, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__21)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__21)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__22 = clause3.push((-2));
        Assert.assertEquals("3,-2", ((VecInt) (o_testSimplePhoneSATSmall_remove5__22)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__22)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__22)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove5__24 = this.solver.addClause(clause3);
        Assert.assertTrue(((UnitClause) (o_testSimplePhoneSATSmall_remove5__24)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((UnitClause) (o_testSimplePhoneSATSmall_remove5__24)).getActivity())), 0.1);
        Assert.assertEquals("3", ((UnitClause) (o_testSimplePhoneSATSmall_remove5__24)).toString());
        VecInt clause8 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause8)).toString());
        Assert.assertTrue(((VecInt) (clause8)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__27 = clause8.push(2);
        Assert.assertEquals("2", ((VecInt) (o_testSimplePhoneSATSmall_remove5__27)).toString());
        Assert.assertEquals(2, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__27)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__27)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__28 = clause8.push((-3));
        Assert.assertEquals("2,-3", ((VecInt) (o_testSimplePhoneSATSmall_remove5__28)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__28)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__28)).isEmpty());
        VecInt clause4 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause4)).toString());
        Assert.assertTrue(((VecInt) (clause4)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5_remove298__57 = clause4.push((-4));
        Assert.assertEquals("-4", ((VecInt) (o_testSimplePhoneSATSmall_remove5_remove298__57)).toString());
        Assert.assertEquals(-4, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5_remove298__57)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5_remove298__57)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5_remove298__59 = clause4.push(1);
        Assert.assertEquals("-4,1", ((VecInt) (o_testSimplePhoneSATSmall_remove5_remove298__59)).toString());
        Assert.assertEquals(-1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5_remove298__59)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5_remove298__59)).isEmpty());
        this.solver.addClause(clause4);
        VecInt clause5 = new VecInt();
        clause5.push((-5));
        this.solver.addClause(clause5);
        VecInt clause6 = new VecInt();
        clause6.push((-6));
        clause6.push(4);
        this.solver.addClause(clause6);
        VecInt clause7 = new VecInt();
        clause7.push(5);
        clause7.push(6);
        clause7.push((-4));
        this.solver.addAtLeast(clause6, 1);
        this.solver.isSatisfiable();
        VecInt bound1 = new VecInt();
        bound1.push(3);
        this.solver.findModel(bound1);
        VecInt bound2 = new VecInt();
        bound2.push((-3));
        this.solver.findModel(bound2);
        VecInt bound3 = new VecInt();
        bound3.push(5);
        bound3.push(3);
        this.solver.findModel(bound3);
        VecInt bound4 = new VecInt();
        bound4.push(5);
        bound4.push((-3));
        this.solver.findModel(bound4);
        VecInt bound5 = new VecInt();
        bound5.push(4);
        bound5.push((-3));
        this.solver.findModel(bound5);
        VecInt bound6 = new VecInt();
        bound6.push(4);
        bound6.push(3);
        this.solver.findModel(bound6);
        VecInt bound7 = new VecInt();
        bound7.push(4);
        int[] model = this.solver.findModel(bound7);
        Set<Integer> satisfiedModel = new HashSet<Integer>();
        for (int i : model) {
            satisfiedModel.add(new Integer(i));
        }
        satisfiedModel.contains(new Integer(4));
        satisfiedModel.contains(new Integer(1));
        satisfiedModel.contains(new Integer(2));
    }

    @Test(timeout = 30000)
    public void testSimplePhoneSATSmall_remove5_remove298_remove3171() throws Exception, ContradictionException, TimeoutException {
        VecInt clause0 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause0)).toString());
        Assert.assertTrue(((VecInt) (clause0)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__4 = clause0.push(1);
        Assert.assertEquals("1", ((VecInt) (o_testSimplePhoneSATSmall_remove5__4)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__4)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__4)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove5__5 = this.solver.addClause(clause0);
        Assert.assertTrue(((UnitClause) (o_testSimplePhoneSATSmall_remove5__5)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((UnitClause) (o_testSimplePhoneSATSmall_remove5__5)).getActivity())), 0.1);
        Assert.assertEquals("1", ((UnitClause) (o_testSimplePhoneSATSmall_remove5__5)).toString());
        VecInt clause1 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause1)).toString());
        Assert.assertTrue(((VecInt) (clause1)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__9 = clause1.push(1);
        Assert.assertEquals("1", ((VecInt) (o_testSimplePhoneSATSmall_remove5__9)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__9)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__9)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__10 = clause1.push((-2));
        Assert.assertEquals("1,-2", ((VecInt) (o_testSimplePhoneSATSmall_remove5__10)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__10)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__10)).isEmpty());
        VecInt clause2 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause2)).toString());
        Assert.assertTrue(((VecInt) (clause2)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__14 = clause2.push(2);
        Assert.assertEquals("2", ((VecInt) (o_testSimplePhoneSATSmall_remove5__14)).toString());
        Assert.assertEquals(2, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__14)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__14)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__15 = clause2.push((-1));
        Assert.assertEquals("2,-1", ((VecInt) (o_testSimplePhoneSATSmall_remove5__15)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__15)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__15)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove5__17 = this.solver.addClause(clause2);
        Assert.assertTrue(((UnitClause) (o_testSimplePhoneSATSmall_remove5__17)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((UnitClause) (o_testSimplePhoneSATSmall_remove5__17)).getActivity())), 0.1);
        Assert.assertEquals("2", ((UnitClause) (o_testSimplePhoneSATSmall_remove5__17)).toString());
        VecInt clause3 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause3)).toString());
        Assert.assertTrue(((VecInt) (clause3)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__21 = clause3.push(3);
        Assert.assertEquals("3", ((VecInt) (o_testSimplePhoneSATSmall_remove5__21)).toString());
        Assert.assertEquals(3, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__21)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__21)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__22 = clause3.push((-2));
        Assert.assertEquals("3,-2", ((VecInt) (o_testSimplePhoneSATSmall_remove5__22)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__22)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__22)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove5__24 = this.solver.addClause(clause3);
        Assert.assertTrue(((UnitClause) (o_testSimplePhoneSATSmall_remove5__24)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((UnitClause) (o_testSimplePhoneSATSmall_remove5__24)).getActivity())), 0.1);
        Assert.assertEquals("3", ((UnitClause) (o_testSimplePhoneSATSmall_remove5__24)).toString());
        VecInt clause8 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause8)).toString());
        Assert.assertTrue(((VecInt) (clause8)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__27 = clause8.push(2);
        Assert.assertEquals("2", ((VecInt) (o_testSimplePhoneSATSmall_remove5__27)).toString());
        Assert.assertEquals(2, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__27)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__27)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__28 = clause8.push((-3));
        Assert.assertEquals("2,-3", ((VecInt) (o_testSimplePhoneSATSmall_remove5__28)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__28)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__28)).isEmpty());
        VecInt clause4 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause4)).toString());
        Assert.assertTrue(((VecInt) (clause4)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5_remove298__57 = clause4.push((-4));
        Assert.assertEquals("-4", ((VecInt) (o_testSimplePhoneSATSmall_remove5_remove298__57)).toString());
        Assert.assertEquals(-4, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5_remove298__57)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5_remove298__57)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5_remove298__59 = clause4.push(1);
        Assert.assertEquals("-4,1", ((VecInt) (o_testSimplePhoneSATSmall_remove5_remove298__59)).toString());
        Assert.assertEquals(-1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5_remove298__59)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5_remove298__59)).isEmpty());
        this.solver.addClause(clause4);
        VecInt clause5 = new VecInt();
        clause5.push((-5));
        clause5.push(4);
        this.solver.addClause(clause5);
        VecInt clause6 = new VecInt();
        clause6.push((-6));
        clause6.push(4);
        this.solver.addClause(clause6);
        VecInt clause7 = new VecInt();
        clause7.push(5);
        clause7.push(6);
        clause7.push((-4));
        this.solver.addAtLeast(clause6, 1);
        this.solver.isSatisfiable();
        VecInt bound1 = new VecInt();
        bound1.push(3);
        this.solver.findModel(bound1);
        VecInt bound2 = new VecInt();
        this.solver.findModel(bound2);
        VecInt bound3 = new VecInt();
        bound3.push(5);
        bound3.push(3);
        this.solver.findModel(bound3);
        VecInt bound4 = new VecInt();
        bound4.push(5);
        bound4.push((-3));
        this.solver.findModel(bound4);
        VecInt bound5 = new VecInt();
        bound5.push(4);
        bound5.push((-3));
        this.solver.findModel(bound5);
        VecInt bound6 = new VecInt();
        bound6.push(4);
        bound6.push(3);
        this.solver.findModel(bound6);
        VecInt bound7 = new VecInt();
        bound7.push(4);
        int[] model = this.solver.findModel(bound7);
        Set<Integer> satisfiedModel = new HashSet<Integer>();
        for (int i : model) {
            satisfiedModel.add(new Integer(i));
        }
        satisfiedModel.contains(new Integer(4));
        satisfiedModel.contains(new Integer(1));
        satisfiedModel.contains(new Integer(2));
    }

    @Test(timeout = 30000)
    public void testSimplePhoneSATSmall_remove5_remove298_remove3119() throws Exception, ContradictionException, TimeoutException {
        VecInt clause0 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause0)).toString());
        Assert.assertTrue(((VecInt) (clause0)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__4 = clause0.push(1);
        Assert.assertEquals("1", ((VecInt) (o_testSimplePhoneSATSmall_remove5__4)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__4)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__4)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove5__5 = this.solver.addClause(clause0);
        Assert.assertTrue(((UnitClause) (o_testSimplePhoneSATSmall_remove5__5)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((UnitClause) (o_testSimplePhoneSATSmall_remove5__5)).getActivity())), 0.1);
        Assert.assertEquals("1", ((UnitClause) (o_testSimplePhoneSATSmall_remove5__5)).toString());
        VecInt clause1 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause1)).toString());
        Assert.assertTrue(((VecInt) (clause1)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__9 = clause1.push(1);
        Assert.assertEquals("1", ((VecInt) (o_testSimplePhoneSATSmall_remove5__9)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__9)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__9)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__10 = clause1.push((-2));
        Assert.assertEquals("1,-2", ((VecInt) (o_testSimplePhoneSATSmall_remove5__10)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__10)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__10)).isEmpty());
        VecInt clause2 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause2)).toString());
        Assert.assertTrue(((VecInt) (clause2)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__14 = clause2.push(2);
        Assert.assertEquals("2", ((VecInt) (o_testSimplePhoneSATSmall_remove5__14)).toString());
        Assert.assertEquals(2, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__14)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__14)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__15 = clause2.push((-1));
        Assert.assertEquals("2,-1", ((VecInt) (o_testSimplePhoneSATSmall_remove5__15)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__15)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__15)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove5__17 = this.solver.addClause(clause2);
        Assert.assertTrue(((UnitClause) (o_testSimplePhoneSATSmall_remove5__17)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((UnitClause) (o_testSimplePhoneSATSmall_remove5__17)).getActivity())), 0.1);
        Assert.assertEquals("2", ((UnitClause) (o_testSimplePhoneSATSmall_remove5__17)).toString());
        VecInt clause3 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause3)).toString());
        Assert.assertTrue(((VecInt) (clause3)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__21 = clause3.push(3);
        Assert.assertEquals("3", ((VecInt) (o_testSimplePhoneSATSmall_remove5__21)).toString());
        Assert.assertEquals(3, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__21)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__21)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__22 = clause3.push((-2));
        Assert.assertEquals("3,-2", ((VecInt) (o_testSimplePhoneSATSmall_remove5__22)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__22)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__22)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove5__24 = this.solver.addClause(clause3);
        Assert.assertTrue(((UnitClause) (o_testSimplePhoneSATSmall_remove5__24)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((UnitClause) (o_testSimplePhoneSATSmall_remove5__24)).getActivity())), 0.1);
        Assert.assertEquals("3", ((UnitClause) (o_testSimplePhoneSATSmall_remove5__24)).toString());
        VecInt clause8 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause8)).toString());
        Assert.assertTrue(((VecInt) (clause8)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__27 = clause8.push(2);
        Assert.assertEquals("2", ((VecInt) (o_testSimplePhoneSATSmall_remove5__27)).toString());
        Assert.assertEquals(2, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__27)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__27)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__28 = clause8.push((-3));
        Assert.assertEquals("2,-3", ((VecInt) (o_testSimplePhoneSATSmall_remove5__28)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__28)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__28)).isEmpty());
        VecInt clause4 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause4)).toString());
        Assert.assertTrue(((VecInt) (clause4)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5_remove298__57 = clause4.push((-4));
        Assert.assertEquals("-4", ((VecInt) (o_testSimplePhoneSATSmall_remove5_remove298__57)).toString());
        Assert.assertEquals(-4, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5_remove298__57)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5_remove298__57)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5_remove298__59 = clause4.push(1);
        Assert.assertEquals("-4,1", ((VecInt) (o_testSimplePhoneSATSmall_remove5_remove298__59)).toString());
        Assert.assertEquals(-1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5_remove298__59)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5_remove298__59)).isEmpty());
        this.solver.addClause(clause4);
        VecInt clause5 = new VecInt();
        clause5.push(4);
        this.solver.addClause(clause5);
        VecInt clause6 = new VecInt();
        clause6.push((-6));
        clause6.push(4);
        this.solver.addClause(clause6);
        VecInt clause7 = new VecInt();
        clause7.push(5);
        clause7.push(6);
        clause7.push((-4));
        this.solver.addAtLeast(clause6, 1);
        this.solver.isSatisfiable();
        VecInt bound1 = new VecInt();
        bound1.push(3);
        this.solver.findModel(bound1);
        VecInt bound2 = new VecInt();
        bound2.push((-3));
        this.solver.findModel(bound2);
        VecInt bound3 = new VecInt();
        bound3.push(5);
        bound3.push(3);
        this.solver.findModel(bound3);
        VecInt bound4 = new VecInt();
        bound4.push(5);
        bound4.push((-3));
        this.solver.findModel(bound4);
        VecInt bound5 = new VecInt();
        bound5.push(4);
        bound5.push((-3));
        this.solver.findModel(bound5);
        VecInt bound6 = new VecInt();
        bound6.push(4);
        bound6.push(3);
        this.solver.findModel(bound6);
        VecInt bound7 = new VecInt();
        bound7.push(4);
        int[] model = this.solver.findModel(bound7);
        Set<Integer> satisfiedModel = new HashSet<Integer>();
        for (int i : model) {
            satisfiedModel.add(new Integer(i));
        }
        satisfiedModel.contains(new Integer(4));
        satisfiedModel.contains(new Integer(1));
        satisfiedModel.contains(new Integer(2));
    }

    @Test(timeout = 30000)
    public void testSimplePhoneSATSmall_remove5_remove298_remove3133() throws Exception, ContradictionException, TimeoutException {
        VecInt clause0 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause0)).toString());
        Assert.assertTrue(((VecInt) (clause0)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__4 = clause0.push(1);
        Assert.assertEquals("1", ((VecInt) (o_testSimplePhoneSATSmall_remove5__4)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__4)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__4)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove5__5 = this.solver.addClause(clause0);
        Assert.assertTrue(((UnitClause) (o_testSimplePhoneSATSmall_remove5__5)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((UnitClause) (o_testSimplePhoneSATSmall_remove5__5)).getActivity())), 0.1);
        Assert.assertEquals("1", ((UnitClause) (o_testSimplePhoneSATSmall_remove5__5)).toString());
        VecInt clause1 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause1)).toString());
        Assert.assertTrue(((VecInt) (clause1)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__9 = clause1.push(1);
        Assert.assertEquals("1", ((VecInt) (o_testSimplePhoneSATSmall_remove5__9)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__9)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__9)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__10 = clause1.push((-2));
        Assert.assertEquals("1,-2", ((VecInt) (o_testSimplePhoneSATSmall_remove5__10)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__10)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__10)).isEmpty());
        VecInt clause2 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause2)).toString());
        Assert.assertTrue(((VecInt) (clause2)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__14 = clause2.push(2);
        Assert.assertEquals("2", ((VecInt) (o_testSimplePhoneSATSmall_remove5__14)).toString());
        Assert.assertEquals(2, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__14)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__14)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__15 = clause2.push((-1));
        Assert.assertEquals("2,-1", ((VecInt) (o_testSimplePhoneSATSmall_remove5__15)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__15)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__15)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove5__17 = this.solver.addClause(clause2);
        Assert.assertTrue(((UnitClause) (o_testSimplePhoneSATSmall_remove5__17)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((UnitClause) (o_testSimplePhoneSATSmall_remove5__17)).getActivity())), 0.1);
        Assert.assertEquals("2", ((UnitClause) (o_testSimplePhoneSATSmall_remove5__17)).toString());
        VecInt clause3 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause3)).toString());
        Assert.assertTrue(((VecInt) (clause3)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__21 = clause3.push(3);
        Assert.assertEquals("3", ((VecInt) (o_testSimplePhoneSATSmall_remove5__21)).toString());
        Assert.assertEquals(3, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__21)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__21)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__22 = clause3.push((-2));
        Assert.assertEquals("3,-2", ((VecInt) (o_testSimplePhoneSATSmall_remove5__22)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__22)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__22)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove5__24 = this.solver.addClause(clause3);
        Assert.assertTrue(((UnitClause) (o_testSimplePhoneSATSmall_remove5__24)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((UnitClause) (o_testSimplePhoneSATSmall_remove5__24)).getActivity())), 0.1);
        Assert.assertEquals("3", ((UnitClause) (o_testSimplePhoneSATSmall_remove5__24)).toString());
        VecInt clause8 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause8)).toString());
        Assert.assertTrue(((VecInt) (clause8)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__27 = clause8.push(2);
        Assert.assertEquals("2", ((VecInt) (o_testSimplePhoneSATSmall_remove5__27)).toString());
        Assert.assertEquals(2, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__27)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__27)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__28 = clause8.push((-3));
        Assert.assertEquals("2,-3", ((VecInt) (o_testSimplePhoneSATSmall_remove5__28)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__28)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__28)).isEmpty());
        VecInt clause4 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause4)).toString());
        Assert.assertTrue(((VecInt) (clause4)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5_remove298__57 = clause4.push((-4));
        Assert.assertEquals("-4", ((VecInt) (o_testSimplePhoneSATSmall_remove5_remove298__57)).toString());
        Assert.assertEquals(-4, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5_remove298__57)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5_remove298__57)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5_remove298__59 = clause4.push(1);
        Assert.assertEquals("-4,1", ((VecInt) (o_testSimplePhoneSATSmall_remove5_remove298__59)).toString());
        Assert.assertEquals(-1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5_remove298__59)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5_remove298__59)).isEmpty());
        this.solver.addClause(clause4);
        VecInt clause5 = new VecInt();
        clause5.push((-5));
        clause5.push(4);
        this.solver.addClause(clause5);
        VecInt clause6 = new VecInt();
        clause6.push(4);
        this.solver.addClause(clause6);
        VecInt clause7 = new VecInt();
        clause7.push(5);
        clause7.push(6);
        clause7.push((-4));
        this.solver.addAtLeast(clause6, 1);
        this.solver.isSatisfiable();
        VecInt bound1 = new VecInt();
        bound1.push(3);
        this.solver.findModel(bound1);
        VecInt bound2 = new VecInt();
        bound2.push((-3));
        this.solver.findModel(bound2);
        VecInt bound3 = new VecInt();
        bound3.push(5);
        bound3.push(3);
        this.solver.findModel(bound3);
        VecInt bound4 = new VecInt();
        bound4.push(5);
        bound4.push((-3));
        this.solver.findModel(bound4);
        VecInt bound5 = new VecInt();
        bound5.push(4);
        bound5.push((-3));
        this.solver.findModel(bound5);
        VecInt bound6 = new VecInt();
        bound6.push(4);
        bound6.push(3);
        this.solver.findModel(bound6);
        VecInt bound7 = new VecInt();
        bound7.push(4);
        int[] model = this.solver.findModel(bound7);
        Set<Integer> satisfiedModel = new HashSet<Integer>();
        for (int i : model) {
            satisfiedModel.add(new Integer(i));
        }
        satisfiedModel.contains(new Integer(4));
        satisfiedModel.contains(new Integer(1));
        satisfiedModel.contains(new Integer(2));
    }

    @Test(timeout = 30000)
    public void testSimplePhoneSATSmall_remove5_remove298_remove3162() throws Exception, ContradictionException, TimeoutException {
        VecInt clause0 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause0)).toString());
        Assert.assertTrue(((VecInt) (clause0)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__4 = clause0.push(1);
        Assert.assertEquals("1", ((VecInt) (o_testSimplePhoneSATSmall_remove5__4)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__4)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__4)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove5__5 = this.solver.addClause(clause0);
        Assert.assertTrue(((UnitClause) (o_testSimplePhoneSATSmall_remove5__5)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((UnitClause) (o_testSimplePhoneSATSmall_remove5__5)).getActivity())), 0.1);
        Assert.assertEquals("1", ((UnitClause) (o_testSimplePhoneSATSmall_remove5__5)).toString());
        VecInt clause1 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause1)).toString());
        Assert.assertTrue(((VecInt) (clause1)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__9 = clause1.push(1);
        Assert.assertEquals("1", ((VecInt) (o_testSimplePhoneSATSmall_remove5__9)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__9)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__9)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__10 = clause1.push((-2));
        Assert.assertEquals("1,-2", ((VecInt) (o_testSimplePhoneSATSmall_remove5__10)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__10)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__10)).isEmpty());
        VecInt clause2 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause2)).toString());
        Assert.assertTrue(((VecInt) (clause2)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__14 = clause2.push(2);
        Assert.assertEquals("2", ((VecInt) (o_testSimplePhoneSATSmall_remove5__14)).toString());
        Assert.assertEquals(2, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__14)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__14)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__15 = clause2.push((-1));
        Assert.assertEquals("2,-1", ((VecInt) (o_testSimplePhoneSATSmall_remove5__15)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__15)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__15)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove5__17 = this.solver.addClause(clause2);
        Assert.assertTrue(((UnitClause) (o_testSimplePhoneSATSmall_remove5__17)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((UnitClause) (o_testSimplePhoneSATSmall_remove5__17)).getActivity())), 0.1);
        Assert.assertEquals("2", ((UnitClause) (o_testSimplePhoneSATSmall_remove5__17)).toString());
        VecInt clause3 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause3)).toString());
        Assert.assertTrue(((VecInt) (clause3)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__21 = clause3.push(3);
        Assert.assertEquals("3", ((VecInt) (o_testSimplePhoneSATSmall_remove5__21)).toString());
        Assert.assertEquals(3, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__21)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__21)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__22 = clause3.push((-2));
        Assert.assertEquals("3,-2", ((VecInt) (o_testSimplePhoneSATSmall_remove5__22)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__22)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__22)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove5__24 = this.solver.addClause(clause3);
        Assert.assertTrue(((UnitClause) (o_testSimplePhoneSATSmall_remove5__24)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((UnitClause) (o_testSimplePhoneSATSmall_remove5__24)).getActivity())), 0.1);
        Assert.assertEquals("3", ((UnitClause) (o_testSimplePhoneSATSmall_remove5__24)).toString());
        VecInt clause8 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause8)).toString());
        Assert.assertTrue(((VecInt) (clause8)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__27 = clause8.push(2);
        Assert.assertEquals("2", ((VecInt) (o_testSimplePhoneSATSmall_remove5__27)).toString());
        Assert.assertEquals(2, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__27)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__27)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__28 = clause8.push((-3));
        Assert.assertEquals("2,-3", ((VecInt) (o_testSimplePhoneSATSmall_remove5__28)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__28)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__28)).isEmpty());
        VecInt clause4 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause4)).toString());
        Assert.assertTrue(((VecInt) (clause4)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5_remove298__57 = clause4.push((-4));
        Assert.assertEquals("-4", ((VecInt) (o_testSimplePhoneSATSmall_remove5_remove298__57)).toString());
        Assert.assertEquals(-4, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5_remove298__57)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5_remove298__57)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5_remove298__59 = clause4.push(1);
        Assert.assertEquals("-4,1", ((VecInt) (o_testSimplePhoneSATSmall_remove5_remove298__59)).toString());
        Assert.assertEquals(-1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5_remove298__59)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5_remove298__59)).isEmpty());
        this.solver.addClause(clause4);
        VecInt clause5 = new VecInt();
        clause5.push((-5));
        clause5.push(4);
        this.solver.addClause(clause5);
        VecInt clause6 = new VecInt();
        clause6.push((-6));
        clause6.push(4);
        this.solver.addClause(clause6);
        VecInt clause7 = new VecInt();
        clause7.push(5);
        clause7.push(6);
        clause7.push((-4));
        this.solver.addAtLeast(clause6, 1);
        VecInt bound1 = new VecInt();
        bound1.push(3);
        this.solver.findModel(bound1);
        VecInt bound2 = new VecInt();
        bound2.push((-3));
        this.solver.findModel(bound2);
        VecInt bound3 = new VecInt();
        bound3.push(5);
        bound3.push(3);
        this.solver.findModel(bound3);
        VecInt bound4 = new VecInt();
        bound4.push(5);
        bound4.push((-3));
        this.solver.findModel(bound4);
        VecInt bound5 = new VecInt();
        bound5.push(4);
        bound5.push((-3));
        this.solver.findModel(bound5);
        VecInt bound6 = new VecInt();
        bound6.push(4);
        bound6.push(3);
        this.solver.findModel(bound6);
        VecInt bound7 = new VecInt();
        bound7.push(4);
        int[] model = this.solver.findModel(bound7);
        Set<Integer> satisfiedModel = new HashSet<Integer>();
        for (int i : model) {
            satisfiedModel.add(new Integer(i));
        }
        satisfiedModel.contains(new Integer(4));
        satisfiedModel.contains(new Integer(1));
        satisfiedModel.contains(new Integer(2));
    }

    @Test(timeout = 30000)
    public void testSimplePhoneSATSmall_remove5_remove298_remove3114() throws Exception, ContradictionException, TimeoutException {
        VecInt clause0 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause0)).toString());
        Assert.assertTrue(((VecInt) (clause0)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__4 = clause0.push(1);
        Assert.assertEquals("1", ((VecInt) (o_testSimplePhoneSATSmall_remove5__4)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__4)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__4)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove5__5 = this.solver.addClause(clause0);
        Assert.assertTrue(((UnitClause) (o_testSimplePhoneSATSmall_remove5__5)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((UnitClause) (o_testSimplePhoneSATSmall_remove5__5)).getActivity())), 0.1);
        Assert.assertEquals("1", ((UnitClause) (o_testSimplePhoneSATSmall_remove5__5)).toString());
        VecInt clause1 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause1)).toString());
        Assert.assertTrue(((VecInt) (clause1)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__9 = clause1.push(1);
        Assert.assertEquals("1", ((VecInt) (o_testSimplePhoneSATSmall_remove5__9)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__9)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__9)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__10 = clause1.push((-2));
        Assert.assertEquals("1,-2", ((VecInt) (o_testSimplePhoneSATSmall_remove5__10)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__10)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__10)).isEmpty());
        VecInt clause2 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause2)).toString());
        Assert.assertTrue(((VecInt) (clause2)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__14 = clause2.push(2);
        Assert.assertEquals("2", ((VecInt) (o_testSimplePhoneSATSmall_remove5__14)).toString());
        Assert.assertEquals(2, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__14)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__14)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__15 = clause2.push((-1));
        Assert.assertEquals("2,-1", ((VecInt) (o_testSimplePhoneSATSmall_remove5__15)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__15)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__15)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove5__17 = this.solver.addClause(clause2);
        Assert.assertTrue(((UnitClause) (o_testSimplePhoneSATSmall_remove5__17)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((UnitClause) (o_testSimplePhoneSATSmall_remove5__17)).getActivity())), 0.1);
        Assert.assertEquals("2", ((UnitClause) (o_testSimplePhoneSATSmall_remove5__17)).toString());
        VecInt clause3 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause3)).toString());
        Assert.assertTrue(((VecInt) (clause3)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__21 = clause3.push(3);
        Assert.assertEquals("3", ((VecInt) (o_testSimplePhoneSATSmall_remove5__21)).toString());
        Assert.assertEquals(3, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__21)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__21)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__22 = clause3.push((-2));
        Assert.assertEquals("3,-2", ((VecInt) (o_testSimplePhoneSATSmall_remove5__22)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__22)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__22)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove5__24 = this.solver.addClause(clause3);
        Assert.assertTrue(((UnitClause) (o_testSimplePhoneSATSmall_remove5__24)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((UnitClause) (o_testSimplePhoneSATSmall_remove5__24)).getActivity())), 0.1);
        Assert.assertEquals("3", ((UnitClause) (o_testSimplePhoneSATSmall_remove5__24)).toString());
        VecInt clause8 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause8)).toString());
        Assert.assertTrue(((VecInt) (clause8)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__27 = clause8.push(2);
        Assert.assertEquals("2", ((VecInt) (o_testSimplePhoneSATSmall_remove5__27)).toString());
        Assert.assertEquals(2, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__27)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__27)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__28 = clause8.push((-3));
        Assert.assertEquals("2,-3", ((VecInt) (o_testSimplePhoneSATSmall_remove5__28)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__28)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__28)).isEmpty());
        VecInt clause4 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause4)).toString());
        Assert.assertTrue(((VecInt) (clause4)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5_remove298__57 = clause4.push((-4));
        Assert.assertEquals("-4", ((VecInt) (o_testSimplePhoneSATSmall_remove5_remove298__57)).toString());
        Assert.assertEquals(-4, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5_remove298__57)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5_remove298__57)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5_remove298__59 = clause4.push(1);
        Assert.assertEquals("-4,1", ((VecInt) (o_testSimplePhoneSATSmall_remove5_remove298__59)).toString());
        Assert.assertEquals(-1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5_remove298__59)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5_remove298__59)).isEmpty());
        VecInt clause5 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause5)).toString());
        Assert.assertTrue(((VecInt) (clause5)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5_remove298_remove3114__67 = clause5.push((-5));
        Assert.assertEquals("-5", ((VecInt) (o_testSimplePhoneSATSmall_remove5_remove298_remove3114__67)).toString());
        Assert.assertEquals(-5, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5_remove298_remove3114__67)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5_remove298_remove3114__67)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5_remove298_remove3114__69 = clause5.push(4);
        Assert.assertEquals("-5,4", ((VecInt) (o_testSimplePhoneSATSmall_remove5_remove298_remove3114__69)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5_remove298_remove3114__69)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5_remove298_remove3114__69)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove5_remove298_remove3114__70 = this.solver.addClause(clause5);
        Assert.assertFalse(((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove5_remove298_remove3114__70)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove5_remove298_remove3114__70)).getActivity())), 0.1);
        int[] array_1949939781 = new int[]{8,11};
        	int[] array_1370191864 = (int[])((org.sat4j.minisat.constraints.cnf.OriginalBinaryClause)o_testSimplePhoneSATSmall_remove5_remove298_remove3114__70).getLits();
        	for(int ii = 0; ii <array_1949939781.length; ii++) {
        		org.junit.Assert.assertEquals(array_1949939781[ii], array_1370191864[ii]);
        	};
        Assert.assertEquals("4[?] -5[?]", ((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove5_remove298_remove3114__70)).toString());
        Assert.assertEquals(9, ((int) (((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove5_remove298_remove3114__70)).hashCode())));
        VecInt clause6 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause6)).toString());
        Assert.assertTrue(((VecInt) (clause6)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5_remove298_remove3114__73 = clause6.push((-6));
        Assert.assertEquals("-6", ((VecInt) (o_testSimplePhoneSATSmall_remove5_remove298_remove3114__73)).toString());
        Assert.assertEquals(-6, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5_remove298_remove3114__73)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5_remove298_remove3114__73)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5_remove298_remove3114__75 = clause6.push(4);
        Assert.assertEquals("-6,4", ((VecInt) (o_testSimplePhoneSATSmall_remove5_remove298_remove3114__75)).toString());
        Assert.assertEquals(-1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5_remove298_remove3114__75)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5_remove298_remove3114__75)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove5_remove298_remove3114__76 = this.solver.addClause(clause6);
        Assert.assertFalse(((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove5_remove298_remove3114__76)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove5_remove298_remove3114__76)).getActivity())), 0.1);
        int[] array_1234807206 = new int[]{8,13};
        	int[] array_628572517 = (int[])((org.sat4j.minisat.constraints.cnf.OriginalBinaryClause)o_testSimplePhoneSATSmall_remove5_remove298_remove3114__76).getLits();
        	for(int ii = 0; ii <array_1234807206.length; ii++) {
        		org.junit.Assert.assertEquals(array_1234807206[ii], array_628572517[ii]);
        	};
        Assert.assertEquals("4[?] -6[?]", ((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove5_remove298_remove3114__76)).toString());
        Assert.assertEquals(10, ((int) (((OriginalBinaryClause) (o_testSimplePhoneSATSmall_remove5_remove298_remove3114__76)).hashCode())));
        VecInt clause7 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause7)).toString());
        Assert.assertTrue(((VecInt) (clause7)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5_remove298_remove3114__79 = clause7.push(5);
        Assert.assertEquals("5", ((VecInt) (o_testSimplePhoneSATSmall_remove5_remove298_remove3114__79)).toString());
        Assert.assertEquals(5, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5_remove298_remove3114__79)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5_remove298_remove3114__79)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5_remove298_remove3114__80 = clause7.push(6);
        Assert.assertEquals("5,6", ((VecInt) (o_testSimplePhoneSATSmall_remove5_remove298_remove3114__80)).toString());
        Assert.assertEquals(5, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5_remove298_remove3114__80)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5_remove298_remove3114__80)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5_remove298_remove3114__81 = clause7.push((-4));
        Assert.assertEquals("5,6,-4", ((VecInt) (o_testSimplePhoneSATSmall_remove5_remove298_remove3114__81)).toString());
        Assert.assertEquals(2, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5_remove298_remove3114__81)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5_remove298_remove3114__81)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove5_remove298_remove3114__83 = this.solver.addAtLeast(clause6, 1);
        Assert.assertFalse(((OriginalWLClause) (o_testSimplePhoneSATSmall_remove5_remove298_remove3114__83)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((OriginalWLClause) (o_testSimplePhoneSATSmall_remove5_remove298_remove3114__83)).getActivity())), 0.1);
        int[] array_1199411276 = new int[]{8,13};
        	int[] array_1038400498 = (int[])((org.sat4j.minisat.constraints.cnf.OriginalWLClause)o_testSimplePhoneSATSmall_remove5_remove298_remove3114__83).getLits();
        	for(int ii = 0; ii <array_1199411276.length; ii++) {
        		org.junit.Assert.assertEquals(array_1199411276[ii], array_1038400498[ii]);
        	};
        Assert.assertEquals("4[?] -6[?] ", ((OriginalWLClause) (o_testSimplePhoneSATSmall_remove5_remove298_remove3114__83)).toString());
        Assert.assertEquals(10, ((int) (((OriginalWLClause) (o_testSimplePhoneSATSmall_remove5_remove298_remove3114__83)).hashCode())));
        this.solver.isSatisfiable();
        VecInt bound1 = new VecInt();
        Assert.assertEquals("", ((VecInt) (bound1)).toString());
        Assert.assertTrue(((VecInt) (bound1)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5_remove298_remove3114__87 = bound1.push(3);
        Assert.assertEquals("3", ((VecInt) (o_testSimplePhoneSATSmall_remove5_remove298_remove3114__87)).toString());
        Assert.assertEquals(3, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5_remove298_remove3114__87)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5_remove298_remove3114__87)).isEmpty());
        int[] o_testSimplePhoneSATSmall_remove5_remove298_remove3114__88 = this.solver.findModel(bound1);
        int[] array_1074072448 = new int[]{1,2,3,-4,-5,-6};
        	int[] array_1127923611 = (int[])o_testSimplePhoneSATSmall_remove5_remove298_remove3114__88;
        	for(int ii = 0; ii <array_1074072448.length; ii++) {
        		org.junit.Assert.assertEquals(array_1074072448[ii], array_1127923611[ii]);
        	};
        VecInt bound2 = new VecInt();
        Assert.assertEquals("", ((VecInt) (bound2)).toString());
        Assert.assertTrue(((VecInt) (bound2)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5_remove298_remove3114__91 = bound2.push((-3));
        Assert.assertEquals("-3", ((VecInt) (o_testSimplePhoneSATSmall_remove5_remove298_remove3114__91)).toString());
        Assert.assertEquals(-3, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5_remove298_remove3114__91)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5_remove298_remove3114__91)).isEmpty());
        this.solver.findModel(bound2);
        VecInt bound3 = new VecInt();
        bound3.push(5);
        bound3.push(3);
        this.solver.findModel(bound3);
        VecInt bound4 = new VecInt();
        bound4.push(5);
        bound4.push((-3));
        this.solver.findModel(bound4);
        VecInt bound5 = new VecInt();
        bound5.push(4);
        bound5.push((-3));
        this.solver.findModel(bound5);
        VecInt bound6 = new VecInt();
        bound6.push(4);
        bound6.push(3);
        this.solver.findModel(bound6);
        VecInt bound7 = new VecInt();
        bound7.push(4);
        int[] model = this.solver.findModel(bound7);
        Set<Integer> satisfiedModel = new HashSet<Integer>();
        for (int i : model) {
            satisfiedModel.add(new Integer(i));
        }
        satisfiedModel.contains(new Integer(4));
        satisfiedModel.contains(new Integer(1));
        satisfiedModel.contains(new Integer(2));
    }

    @Test(timeout = 30000)
    public void testSimplePhoneSATSmall_remove5_remove298_remove3159() throws Exception, ContradictionException, TimeoutException {
        VecInt clause0 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause0)).toString());
        Assert.assertTrue(((VecInt) (clause0)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__4 = clause0.push(1);
        Assert.assertEquals("1", ((VecInt) (o_testSimplePhoneSATSmall_remove5__4)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__4)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__4)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove5__5 = this.solver.addClause(clause0);
        Assert.assertTrue(((UnitClause) (o_testSimplePhoneSATSmall_remove5__5)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((UnitClause) (o_testSimplePhoneSATSmall_remove5__5)).getActivity())), 0.1);
        Assert.assertEquals("1", ((UnitClause) (o_testSimplePhoneSATSmall_remove5__5)).toString());
        VecInt clause1 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause1)).toString());
        Assert.assertTrue(((VecInt) (clause1)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__9 = clause1.push(1);
        Assert.assertEquals("1", ((VecInt) (o_testSimplePhoneSATSmall_remove5__9)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__9)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__9)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__10 = clause1.push((-2));
        Assert.assertEquals("1,-2", ((VecInt) (o_testSimplePhoneSATSmall_remove5__10)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__10)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__10)).isEmpty());
        VecInt clause2 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause2)).toString());
        Assert.assertTrue(((VecInt) (clause2)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__14 = clause2.push(2);
        Assert.assertEquals("2", ((VecInt) (o_testSimplePhoneSATSmall_remove5__14)).toString());
        Assert.assertEquals(2, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__14)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__14)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__15 = clause2.push((-1));
        Assert.assertEquals("2,-1", ((VecInt) (o_testSimplePhoneSATSmall_remove5__15)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__15)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__15)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove5__17 = this.solver.addClause(clause2);
        Assert.assertTrue(((UnitClause) (o_testSimplePhoneSATSmall_remove5__17)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((UnitClause) (o_testSimplePhoneSATSmall_remove5__17)).getActivity())), 0.1);
        Assert.assertEquals("2", ((UnitClause) (o_testSimplePhoneSATSmall_remove5__17)).toString());
        VecInt clause3 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause3)).toString());
        Assert.assertTrue(((VecInt) (clause3)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__21 = clause3.push(3);
        Assert.assertEquals("3", ((VecInt) (o_testSimplePhoneSATSmall_remove5__21)).toString());
        Assert.assertEquals(3, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__21)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__21)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__22 = clause3.push((-2));
        Assert.assertEquals("3,-2", ((VecInt) (o_testSimplePhoneSATSmall_remove5__22)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__22)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__22)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove5__24 = this.solver.addClause(clause3);
        Assert.assertTrue(((UnitClause) (o_testSimplePhoneSATSmall_remove5__24)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((UnitClause) (o_testSimplePhoneSATSmall_remove5__24)).getActivity())), 0.1);
        Assert.assertEquals("3", ((UnitClause) (o_testSimplePhoneSATSmall_remove5__24)).toString());
        VecInt clause8 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause8)).toString());
        Assert.assertTrue(((VecInt) (clause8)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__27 = clause8.push(2);
        Assert.assertEquals("2", ((VecInt) (o_testSimplePhoneSATSmall_remove5__27)).toString());
        Assert.assertEquals(2, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__27)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__27)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__28 = clause8.push((-3));
        Assert.assertEquals("2,-3", ((VecInt) (o_testSimplePhoneSATSmall_remove5__28)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__28)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__28)).isEmpty());
        VecInt clause4 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause4)).toString());
        Assert.assertTrue(((VecInt) (clause4)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5_remove298__57 = clause4.push((-4));
        Assert.assertEquals("-4", ((VecInt) (o_testSimplePhoneSATSmall_remove5_remove298__57)).toString());
        Assert.assertEquals(-4, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5_remove298__57)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5_remove298__57)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5_remove298__59 = clause4.push(1);
        Assert.assertEquals("-4,1", ((VecInt) (o_testSimplePhoneSATSmall_remove5_remove298__59)).toString());
        Assert.assertEquals(-1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5_remove298__59)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5_remove298__59)).isEmpty());
        this.solver.addClause(clause4);
        VecInt clause5 = new VecInt();
        clause5.push((-5));
        clause5.push(4);
        this.solver.addClause(clause5);
        VecInt clause6 = new VecInt();
        clause6.push((-6));
        clause6.push(4);
        this.solver.addClause(clause6);
        VecInt clause7 = new VecInt();
        clause7.push(5);
        clause7.push(6);
        clause7.push((-4));
        this.solver.isSatisfiable();
        VecInt bound1 = new VecInt();
        bound1.push(3);
        this.solver.findModel(bound1);
        VecInt bound2 = new VecInt();
        bound2.push((-3));
        this.solver.findModel(bound2);
        VecInt bound3 = new VecInt();
        bound3.push(5);
        bound3.push(3);
        this.solver.findModel(bound3);
        VecInt bound4 = new VecInt();
        bound4.push(5);
        bound4.push((-3));
        this.solver.findModel(bound4);
        VecInt bound5 = new VecInt();
        bound5.push(4);
        bound5.push((-3));
        this.solver.findModel(bound5);
        VecInt bound6 = new VecInt();
        bound6.push(4);
        bound6.push(3);
        this.solver.findModel(bound6);
        VecInt bound7 = new VecInt();
        bound7.push(4);
        int[] model = this.solver.findModel(bound7);
        Set<Integer> satisfiedModel = new HashSet<Integer>();
        for (int i : model) {
            satisfiedModel.add(new Integer(i));
        }
        satisfiedModel.contains(new Integer(4));
        satisfiedModel.contains(new Integer(1));
        satisfiedModel.contains(new Integer(2));
    }

    @Test(timeout = 30000)
    public void testSimplePhoneSATSmall_remove5_remove377_remove2885() throws Exception, ContradictionException, TimeoutException {
        VecInt clause0 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause0)).toString());
        Assert.assertTrue(((VecInt) (clause0)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__4 = clause0.push(1);
        Assert.assertEquals("1", ((VecInt) (o_testSimplePhoneSATSmall_remove5__4)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__4)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__4)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove5__5 = this.solver.addClause(clause0);
        Assert.assertTrue(((UnitClause) (o_testSimplePhoneSATSmall_remove5__5)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((UnitClause) (o_testSimplePhoneSATSmall_remove5__5)).getActivity())), 0.1);
        Assert.assertEquals("1", ((UnitClause) (o_testSimplePhoneSATSmall_remove5__5)).toString());
        VecInt clause1 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause1)).toString());
        Assert.assertTrue(((VecInt) (clause1)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__9 = clause1.push(1);
        Assert.assertEquals("1", ((VecInt) (o_testSimplePhoneSATSmall_remove5__9)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__9)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__9)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__10 = clause1.push((-2));
        Assert.assertEquals("1,-2", ((VecInt) (o_testSimplePhoneSATSmall_remove5__10)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__10)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__10)).isEmpty());
        VecInt clause2 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause2)).toString());
        Assert.assertTrue(((VecInt) (clause2)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__14 = clause2.push(2);
        Assert.assertEquals("2", ((VecInt) (o_testSimplePhoneSATSmall_remove5__14)).toString());
        Assert.assertEquals(2, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__14)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__14)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__15 = clause2.push((-1));
        Assert.assertEquals("2,-1", ((VecInt) (o_testSimplePhoneSATSmall_remove5__15)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__15)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__15)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove5__17 = this.solver.addClause(clause2);
        Assert.assertTrue(((UnitClause) (o_testSimplePhoneSATSmall_remove5__17)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((UnitClause) (o_testSimplePhoneSATSmall_remove5__17)).getActivity())), 0.1);
        Assert.assertEquals("2", ((UnitClause) (o_testSimplePhoneSATSmall_remove5__17)).toString());
        VecInt clause3 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause3)).toString());
        Assert.assertTrue(((VecInt) (clause3)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__21 = clause3.push(3);
        Assert.assertEquals("3", ((VecInt) (o_testSimplePhoneSATSmall_remove5__21)).toString());
        Assert.assertEquals(3, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__21)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__21)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__22 = clause3.push((-2));
        Assert.assertEquals("3,-2", ((VecInt) (o_testSimplePhoneSATSmall_remove5__22)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__22)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__22)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove5__24 = this.solver.addClause(clause3);
        Assert.assertTrue(((UnitClause) (o_testSimplePhoneSATSmall_remove5__24)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((UnitClause) (o_testSimplePhoneSATSmall_remove5__24)).getActivity())), 0.1);
        Assert.assertEquals("3", ((UnitClause) (o_testSimplePhoneSATSmall_remove5__24)).toString());
        VecInt clause8 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause8)).toString());
        Assert.assertTrue(((VecInt) (clause8)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__27 = clause8.push(2);
        Assert.assertEquals("2", ((VecInt) (o_testSimplePhoneSATSmall_remove5__27)).toString());
        Assert.assertEquals(2, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__27)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__27)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__28 = clause8.push((-3));
        Assert.assertEquals("2,-3", ((VecInt) (o_testSimplePhoneSATSmall_remove5__28)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__28)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__28)).isEmpty());
        this.solver.addClause(clause8);
        VecInt clause4 = new VecInt();
        clause4.push((-4));
        clause4.push(1);
        this.solver.addClause(clause4);
        VecInt clause5 = new VecInt();
        clause5.push((-5));
        clause5.push(4);
        this.solver.addClause(clause5);
        VecInt clause6 = new VecInt();
        clause6.push((-6));
        clause6.push(4);
        this.solver.addClause(clause6);
        VecInt clause7 = new VecInt();
        clause7.push(5);
        clause7.push(6);
        clause7.push((-4));
        this.solver.addAtLeast(clause6, 1);
        this.solver.isSatisfiable();
        VecInt bound1 = new VecInt();
        bound1.push(3);
        this.solver.findModel(bound1);
        VecInt bound2 = new VecInt();
        bound2.push((-3));
        this.solver.findModel(bound2);
        VecInt bound3 = new VecInt();
        this.solver.findModel(bound3);
        VecInt bound4 = new VecInt();
        bound4.push(5);
        bound4.push((-3));
        this.solver.findModel(bound4);
        VecInt bound5 = new VecInt();
        bound5.push(4);
        bound5.push((-3));
        this.solver.findModel(bound5);
        VecInt bound6 = new VecInt();
        bound6.push(4);
        bound6.push(3);
        this.solver.findModel(bound6);
        VecInt bound7 = new VecInt();
        bound7.push(4);
        int[] model = this.solver.findModel(bound7);
        Set<Integer> satisfiedModel = new HashSet<Integer>();
        for (int i : model) {
            satisfiedModel.add(new Integer(i));
        }
        satisfiedModel.contains(new Integer(4));
        satisfiedModel.contains(new Integer(1));
        satisfiedModel.contains(new Integer(2));
    }

    @Test(timeout = 30000)
    public void testSimplePhoneSATSmall_remove5_remove386_remove2990() throws Exception, ContradictionException, TimeoutException {
        VecInt clause0 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause0)).toString());
        Assert.assertTrue(((VecInt) (clause0)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__4 = clause0.push(1);
        Assert.assertEquals("1", ((VecInt) (o_testSimplePhoneSATSmall_remove5__4)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__4)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__4)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove5__5 = this.solver.addClause(clause0);
        Assert.assertTrue(((UnitClause) (o_testSimplePhoneSATSmall_remove5__5)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((UnitClause) (o_testSimplePhoneSATSmall_remove5__5)).getActivity())), 0.1);
        Assert.assertEquals("1", ((UnitClause) (o_testSimplePhoneSATSmall_remove5__5)).toString());
        VecInt clause1 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause1)).toString());
        Assert.assertTrue(((VecInt) (clause1)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__9 = clause1.push(1);
        Assert.assertEquals("1", ((VecInt) (o_testSimplePhoneSATSmall_remove5__9)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__9)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__9)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__10 = clause1.push((-2));
        Assert.assertEquals("1,-2", ((VecInt) (o_testSimplePhoneSATSmall_remove5__10)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__10)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__10)).isEmpty());
        VecInt clause2 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause2)).toString());
        Assert.assertTrue(((VecInt) (clause2)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__14 = clause2.push(2);
        Assert.assertEquals("2", ((VecInt) (o_testSimplePhoneSATSmall_remove5__14)).toString());
        Assert.assertEquals(2, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__14)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__14)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__15 = clause2.push((-1));
        Assert.assertEquals("2,-1", ((VecInt) (o_testSimplePhoneSATSmall_remove5__15)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__15)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__15)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove5__17 = this.solver.addClause(clause2);
        Assert.assertTrue(((UnitClause) (o_testSimplePhoneSATSmall_remove5__17)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((UnitClause) (o_testSimplePhoneSATSmall_remove5__17)).getActivity())), 0.1);
        Assert.assertEquals("2", ((UnitClause) (o_testSimplePhoneSATSmall_remove5__17)).toString());
        VecInt clause3 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause3)).toString());
        Assert.assertTrue(((VecInt) (clause3)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__21 = clause3.push(3);
        Assert.assertEquals("3", ((VecInt) (o_testSimplePhoneSATSmall_remove5__21)).toString());
        Assert.assertEquals(3, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__21)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__21)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__22 = clause3.push((-2));
        Assert.assertEquals("3,-2", ((VecInt) (o_testSimplePhoneSATSmall_remove5__22)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__22)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__22)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove5__24 = this.solver.addClause(clause3);
        Assert.assertTrue(((UnitClause) (o_testSimplePhoneSATSmall_remove5__24)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((UnitClause) (o_testSimplePhoneSATSmall_remove5__24)).getActivity())), 0.1);
        Assert.assertEquals("3", ((UnitClause) (o_testSimplePhoneSATSmall_remove5__24)).toString());
        VecInt clause8 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause8)).toString());
        Assert.assertTrue(((VecInt) (clause8)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__27 = clause8.push(2);
        Assert.assertEquals("2", ((VecInt) (o_testSimplePhoneSATSmall_remove5__27)).toString());
        Assert.assertEquals(2, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__27)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__27)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__28 = clause8.push((-3));
        Assert.assertEquals("2,-3", ((VecInt) (o_testSimplePhoneSATSmall_remove5__28)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__28)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__28)).isEmpty());
        this.solver.addClause(clause8);
        VecInt clause4 = new VecInt();
        clause4.push((-4));
        clause4.push(1);
        this.solver.addClause(clause4);
        VecInt clause5 = new VecInt();
        clause5.push((-5));
        clause5.push(4);
        this.solver.addClause(clause5);
        VecInt clause6 = new VecInt();
        clause6.push((-6));
        clause6.push(4);
        this.solver.addClause(clause6);
        VecInt clause7 = new VecInt();
        clause7.push(5);
        clause7.push(6);
        clause7.push((-4));
        this.solver.addAtLeast(clause6, 1);
        this.solver.isSatisfiable();
        VecInt bound1 = new VecInt();
        this.solver.findModel(bound1);
        VecInt bound2 = new VecInt();
        bound2.push((-3));
        this.solver.findModel(bound2);
        VecInt bound3 = new VecInt();
        bound3.push(5);
        bound3.push(3);
        this.solver.findModel(bound3);
        VecInt bound4 = new VecInt();
        bound4.push((-3));
        this.solver.findModel(bound4);
        VecInt bound5 = new VecInt();
        bound5.push(4);
        bound5.push((-3));
        this.solver.findModel(bound5);
        VecInt bound6 = new VecInt();
        bound6.push(4);
        bound6.push(3);
        this.solver.findModel(bound6);
        VecInt bound7 = new VecInt();
        bound7.push(4);
        int[] model = this.solver.findModel(bound7);
        Set<Integer> satisfiedModel = new HashSet<Integer>();
        for (int i : model) {
            satisfiedModel.add(new Integer(i));
        }
        satisfiedModel.contains(new Integer(4));
        satisfiedModel.contains(new Integer(1));
        satisfiedModel.contains(new Integer(2));
    }

    @Test(timeout = 30000)
    public void testSimplePhoneSATSmall_remove5_remove378_remove3195() throws Exception, ContradictionException, TimeoutException {
        VecInt clause0 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause0)).toString());
        Assert.assertTrue(((VecInt) (clause0)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__4 = clause0.push(1);
        Assert.assertEquals("1", ((VecInt) (o_testSimplePhoneSATSmall_remove5__4)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__4)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__4)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove5__5 = this.solver.addClause(clause0);
        Assert.assertTrue(((UnitClause) (o_testSimplePhoneSATSmall_remove5__5)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((UnitClause) (o_testSimplePhoneSATSmall_remove5__5)).getActivity())), 0.1);
        Assert.assertEquals("1", ((UnitClause) (o_testSimplePhoneSATSmall_remove5__5)).toString());
        VecInt clause1 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause1)).toString());
        Assert.assertTrue(((VecInt) (clause1)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__9 = clause1.push(1);
        Assert.assertEquals("1", ((VecInt) (o_testSimplePhoneSATSmall_remove5__9)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__9)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__9)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__10 = clause1.push((-2));
        Assert.assertEquals("1,-2", ((VecInt) (o_testSimplePhoneSATSmall_remove5__10)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__10)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__10)).isEmpty());
        VecInt clause2 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause2)).toString());
        Assert.assertTrue(((VecInt) (clause2)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__14 = clause2.push(2);
        Assert.assertEquals("2", ((VecInt) (o_testSimplePhoneSATSmall_remove5__14)).toString());
        Assert.assertEquals(2, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__14)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__14)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__15 = clause2.push((-1));
        Assert.assertEquals("2,-1", ((VecInt) (o_testSimplePhoneSATSmall_remove5__15)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__15)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__15)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove5__17 = this.solver.addClause(clause2);
        Assert.assertTrue(((UnitClause) (o_testSimplePhoneSATSmall_remove5__17)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((UnitClause) (o_testSimplePhoneSATSmall_remove5__17)).getActivity())), 0.1);
        Assert.assertEquals("2", ((UnitClause) (o_testSimplePhoneSATSmall_remove5__17)).toString());
        VecInt clause3 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause3)).toString());
        Assert.assertTrue(((VecInt) (clause3)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__21 = clause3.push(3);
        Assert.assertEquals("3", ((VecInt) (o_testSimplePhoneSATSmall_remove5__21)).toString());
        Assert.assertEquals(3, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__21)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__21)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__22 = clause3.push((-2));
        Assert.assertEquals("3,-2", ((VecInt) (o_testSimplePhoneSATSmall_remove5__22)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__22)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__22)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove5__24 = this.solver.addClause(clause3);
        Assert.assertTrue(((UnitClause) (o_testSimplePhoneSATSmall_remove5__24)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((UnitClause) (o_testSimplePhoneSATSmall_remove5__24)).getActivity())), 0.1);
        Assert.assertEquals("3", ((UnitClause) (o_testSimplePhoneSATSmall_remove5__24)).toString());
        VecInt clause8 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause8)).toString());
        Assert.assertTrue(((VecInt) (clause8)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__27 = clause8.push(2);
        Assert.assertEquals("2", ((VecInt) (o_testSimplePhoneSATSmall_remove5__27)).toString());
        Assert.assertEquals(2, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__27)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__27)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__28 = clause8.push((-3));
        Assert.assertEquals("2,-3", ((VecInt) (o_testSimplePhoneSATSmall_remove5__28)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__28)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__28)).isEmpty());
        this.solver.addClause(clause8);
        VecInt clause4 = new VecInt();
        clause4.push((-4));
        clause4.push(1);
        this.solver.addClause(clause4);
        VecInt clause5 = new VecInt();
        clause5.push((-5));
        clause5.push(4);
        this.solver.addClause(clause5);
        VecInt clause6 = new VecInt();
        clause6.push((-6));
        clause6.push(4);
        this.solver.addClause(clause6);
        VecInt clause7 = new VecInt();
        clause7.push(5);
        clause7.push(6);
        clause7.push((-4));
        this.solver.addAtLeast(clause6, 1);
        this.solver.isSatisfiable();
        VecInt bound1 = new VecInt();
        bound1.push(3);
        this.solver.findModel(bound1);
        VecInt bound2 = new VecInt();
        bound2.push((-3));
        this.solver.findModel(bound2);
        VecInt bound3 = new VecInt();
        bound3.push(5);
        this.solver.findModel(bound3);
        VecInt bound4 = new VecInt();
        bound4.push(5);
        bound4.push((-3));
        this.solver.findModel(bound4);
        VecInt bound5 = new VecInt();
        bound5.push(4);
        bound5.push((-3));
        this.solver.findModel(bound5);
        VecInt bound6 = new VecInt();
        bound6.push(3);
        this.solver.findModel(bound6);
        VecInt bound7 = new VecInt();
        bound7.push(4);
        int[] model = this.solver.findModel(bound7);
        Set<Integer> satisfiedModel = new HashSet<Integer>();
        for (int i : model) {
            satisfiedModel.add(new Integer(i));
        }
        satisfiedModel.contains(new Integer(4));
        satisfiedModel.contains(new Integer(1));
        satisfiedModel.contains(new Integer(2));
    }

    @Test(timeout = 30000)
    public void testSimplePhoneSATSmall_remove5_remove377_remove2890() throws Exception, ContradictionException, TimeoutException {
        VecInt clause0 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause0)).toString());
        Assert.assertTrue(((VecInt) (clause0)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__4 = clause0.push(1);
        Assert.assertEquals("1", ((VecInt) (o_testSimplePhoneSATSmall_remove5__4)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__4)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__4)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove5__5 = this.solver.addClause(clause0);
        Assert.assertTrue(((UnitClause) (o_testSimplePhoneSATSmall_remove5__5)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((UnitClause) (o_testSimplePhoneSATSmall_remove5__5)).getActivity())), 0.1);
        Assert.assertEquals("1", ((UnitClause) (o_testSimplePhoneSATSmall_remove5__5)).toString());
        VecInt clause1 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause1)).toString());
        Assert.assertTrue(((VecInt) (clause1)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__9 = clause1.push(1);
        Assert.assertEquals("1", ((VecInt) (o_testSimplePhoneSATSmall_remove5__9)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__9)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__9)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__10 = clause1.push((-2));
        Assert.assertEquals("1,-2", ((VecInt) (o_testSimplePhoneSATSmall_remove5__10)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__10)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__10)).isEmpty());
        VecInt clause2 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause2)).toString());
        Assert.assertTrue(((VecInt) (clause2)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__14 = clause2.push(2);
        Assert.assertEquals("2", ((VecInt) (o_testSimplePhoneSATSmall_remove5__14)).toString());
        Assert.assertEquals(2, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__14)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__14)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__15 = clause2.push((-1));
        Assert.assertEquals("2,-1", ((VecInt) (o_testSimplePhoneSATSmall_remove5__15)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__15)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__15)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove5__17 = this.solver.addClause(clause2);
        Assert.assertTrue(((UnitClause) (o_testSimplePhoneSATSmall_remove5__17)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((UnitClause) (o_testSimplePhoneSATSmall_remove5__17)).getActivity())), 0.1);
        Assert.assertEquals("2", ((UnitClause) (o_testSimplePhoneSATSmall_remove5__17)).toString());
        VecInt clause3 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause3)).toString());
        Assert.assertTrue(((VecInt) (clause3)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__21 = clause3.push(3);
        Assert.assertEquals("3", ((VecInt) (o_testSimplePhoneSATSmall_remove5__21)).toString());
        Assert.assertEquals(3, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__21)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__21)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__22 = clause3.push((-2));
        Assert.assertEquals("3,-2", ((VecInt) (o_testSimplePhoneSATSmall_remove5__22)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__22)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__22)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove5__24 = this.solver.addClause(clause3);
        Assert.assertTrue(((UnitClause) (o_testSimplePhoneSATSmall_remove5__24)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((UnitClause) (o_testSimplePhoneSATSmall_remove5__24)).getActivity())), 0.1);
        Assert.assertEquals("3", ((UnitClause) (o_testSimplePhoneSATSmall_remove5__24)).toString());
        VecInt clause8 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause8)).toString());
        Assert.assertTrue(((VecInt) (clause8)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__27 = clause8.push(2);
        Assert.assertEquals("2", ((VecInt) (o_testSimplePhoneSATSmall_remove5__27)).toString());
        Assert.assertEquals(2, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__27)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__27)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__28 = clause8.push((-3));
        Assert.assertEquals("2,-3", ((VecInt) (o_testSimplePhoneSATSmall_remove5__28)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__28)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__28)).isEmpty());
        this.solver.addClause(clause8);
        VecInt clause4 = new VecInt();
        clause4.push((-4));
        clause4.push(1);
        this.solver.addClause(clause4);
        VecInt clause5 = new VecInt();
        clause5.push((-5));
        clause5.push(4);
        this.solver.addClause(clause5);
        VecInt clause6 = new VecInt();
        clause6.push((-6));
        clause6.push(4);
        this.solver.addClause(clause6);
        VecInt clause7 = new VecInt();
        clause7.push(5);
        clause7.push(6);
        clause7.push((-4));
        this.solver.addAtLeast(clause6, 1);
        this.solver.isSatisfiable();
        VecInt bound1 = new VecInt();
        bound1.push(3);
        this.solver.findModel(bound1);
        VecInt bound2 = new VecInt();
        bound2.push((-3));
        this.solver.findModel(bound2);
        VecInt bound3 = new VecInt();
        bound3.push(3);
        this.solver.findModel(bound3);
        VecInt bound4 = new VecInt();
        bound4.push((-3));
        this.solver.findModel(bound4);
        VecInt bound5 = new VecInt();
        bound5.push(4);
        bound5.push((-3));
        this.solver.findModel(bound5);
        VecInt bound6 = new VecInt();
        bound6.push(4);
        bound6.push(3);
        this.solver.findModel(bound6);
        VecInt bound7 = new VecInt();
        bound7.push(4);
        int[] model = this.solver.findModel(bound7);
        Set<Integer> satisfiedModel = new HashSet<Integer>();
        for (int i : model) {
            satisfiedModel.add(new Integer(i));
        }
        satisfiedModel.contains(new Integer(4));
        satisfiedModel.contains(new Integer(1));
        satisfiedModel.contains(new Integer(2));
    }

    @Test(timeout = 30000)
    public void testSimplePhoneSATSmall_remove5_remove378_remove3181() throws Exception, ContradictionException, TimeoutException {
        VecInt clause0 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause0)).toString());
        Assert.assertTrue(((VecInt) (clause0)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__4 = clause0.push(1);
        Assert.assertEquals("1", ((VecInt) (o_testSimplePhoneSATSmall_remove5__4)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__4)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__4)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove5__5 = this.solver.addClause(clause0);
        Assert.assertTrue(((UnitClause) (o_testSimplePhoneSATSmall_remove5__5)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((UnitClause) (o_testSimplePhoneSATSmall_remove5__5)).getActivity())), 0.1);
        Assert.assertEquals("1", ((UnitClause) (o_testSimplePhoneSATSmall_remove5__5)).toString());
        VecInt clause1 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause1)).toString());
        Assert.assertTrue(((VecInt) (clause1)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__9 = clause1.push(1);
        Assert.assertEquals("1", ((VecInt) (o_testSimplePhoneSATSmall_remove5__9)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__9)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__9)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__10 = clause1.push((-2));
        Assert.assertEquals("1,-2", ((VecInt) (o_testSimplePhoneSATSmall_remove5__10)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__10)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__10)).isEmpty());
        VecInt clause2 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause2)).toString());
        Assert.assertTrue(((VecInt) (clause2)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__14 = clause2.push(2);
        Assert.assertEquals("2", ((VecInt) (o_testSimplePhoneSATSmall_remove5__14)).toString());
        Assert.assertEquals(2, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__14)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__14)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__15 = clause2.push((-1));
        Assert.assertEquals("2,-1", ((VecInt) (o_testSimplePhoneSATSmall_remove5__15)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__15)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__15)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove5__17 = this.solver.addClause(clause2);
        Assert.assertTrue(((UnitClause) (o_testSimplePhoneSATSmall_remove5__17)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((UnitClause) (o_testSimplePhoneSATSmall_remove5__17)).getActivity())), 0.1);
        Assert.assertEquals("2", ((UnitClause) (o_testSimplePhoneSATSmall_remove5__17)).toString());
        VecInt clause3 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause3)).toString());
        Assert.assertTrue(((VecInt) (clause3)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__21 = clause3.push(3);
        Assert.assertEquals("3", ((VecInt) (o_testSimplePhoneSATSmall_remove5__21)).toString());
        Assert.assertEquals(3, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__21)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__21)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__22 = clause3.push((-2));
        Assert.assertEquals("3,-2", ((VecInt) (o_testSimplePhoneSATSmall_remove5__22)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__22)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__22)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove5__24 = this.solver.addClause(clause3);
        Assert.assertTrue(((UnitClause) (o_testSimplePhoneSATSmall_remove5__24)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((UnitClause) (o_testSimplePhoneSATSmall_remove5__24)).getActivity())), 0.1);
        Assert.assertEquals("3", ((UnitClause) (o_testSimplePhoneSATSmall_remove5__24)).toString());
        VecInt clause8 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause8)).toString());
        Assert.assertTrue(((VecInt) (clause8)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__27 = clause8.push(2);
        Assert.assertEquals("2", ((VecInt) (o_testSimplePhoneSATSmall_remove5__27)).toString());
        Assert.assertEquals(2, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__27)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__27)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__28 = clause8.push((-3));
        Assert.assertEquals("2,-3", ((VecInt) (o_testSimplePhoneSATSmall_remove5__28)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__28)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__28)).isEmpty());
        this.solver.addClause(clause8);
        VecInt clause4 = new VecInt();
        clause4.push((-4));
        clause4.push(1);
        this.solver.addClause(clause4);
        VecInt clause5 = new VecInt();
        clause5.push((-5));
        clause5.push(4);
        this.solver.addClause(clause5);
        VecInt clause6 = new VecInt();
        clause6.push((-6));
        clause6.push(4);
        this.solver.addClause(clause6);
        VecInt clause7 = new VecInt();
        clause7.push(5);
        clause7.push(6);
        clause7.push((-4));
        this.solver.addAtLeast(clause6, 1);
        this.solver.isSatisfiable();
        VecInt bound1 = new VecInt();
        bound1.push(3);
        this.solver.findModel(bound1);
        VecInt bound2 = new VecInt();
        bound2.push((-3));
        this.solver.findModel(bound2);
        VecInt bound3 = new VecInt();
        bound3.push(5);
        this.solver.findModel(bound3);
        VecInt bound4 = new VecInt();
        bound4.push(5);
        bound4.push((-3));
        this.solver.findModel(bound4);
        VecInt bound5 = new VecInt();
        bound5.push((-3));
        this.solver.findModel(bound5);
        VecInt bound6 = new VecInt();
        bound6.push(4);
        bound6.push(3);
        this.solver.findModel(bound6);
        VecInt bound7 = new VecInt();
        bound7.push(4);
        int[] model = this.solver.findModel(bound7);
        Set<Integer> satisfiedModel = new HashSet<Integer>();
        for (int i : model) {
            satisfiedModel.add(new Integer(i));
        }
        satisfiedModel.contains(new Integer(4));
        satisfiedModel.contains(new Integer(1));
        satisfiedModel.contains(new Integer(2));
    }

    @Test(timeout = 30000)
    public void testSimplePhoneSATSmall_remove5_remove377_remove2901() throws Exception, ContradictionException, TimeoutException {
        VecInt clause0 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause0)).toString());
        Assert.assertTrue(((VecInt) (clause0)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__4 = clause0.push(1);
        Assert.assertEquals("1", ((VecInt) (o_testSimplePhoneSATSmall_remove5__4)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__4)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__4)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove5__5 = this.solver.addClause(clause0);
        Assert.assertTrue(((UnitClause) (o_testSimplePhoneSATSmall_remove5__5)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((UnitClause) (o_testSimplePhoneSATSmall_remove5__5)).getActivity())), 0.1);
        Assert.assertEquals("1", ((UnitClause) (o_testSimplePhoneSATSmall_remove5__5)).toString());
        VecInt clause1 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause1)).toString());
        Assert.assertTrue(((VecInt) (clause1)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__9 = clause1.push(1);
        Assert.assertEquals("1", ((VecInt) (o_testSimplePhoneSATSmall_remove5__9)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__9)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__9)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__10 = clause1.push((-2));
        Assert.assertEquals("1,-2", ((VecInt) (o_testSimplePhoneSATSmall_remove5__10)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__10)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__10)).isEmpty());
        VecInt clause2 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause2)).toString());
        Assert.assertTrue(((VecInt) (clause2)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__14 = clause2.push(2);
        Assert.assertEquals("2", ((VecInt) (o_testSimplePhoneSATSmall_remove5__14)).toString());
        Assert.assertEquals(2, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__14)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__14)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__15 = clause2.push((-1));
        Assert.assertEquals("2,-1", ((VecInt) (o_testSimplePhoneSATSmall_remove5__15)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__15)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__15)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove5__17 = this.solver.addClause(clause2);
        Assert.assertTrue(((UnitClause) (o_testSimplePhoneSATSmall_remove5__17)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((UnitClause) (o_testSimplePhoneSATSmall_remove5__17)).getActivity())), 0.1);
        Assert.assertEquals("2", ((UnitClause) (o_testSimplePhoneSATSmall_remove5__17)).toString());
        VecInt clause3 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause3)).toString());
        Assert.assertTrue(((VecInt) (clause3)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__21 = clause3.push(3);
        Assert.assertEquals("3", ((VecInt) (o_testSimplePhoneSATSmall_remove5__21)).toString());
        Assert.assertEquals(3, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__21)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__21)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__22 = clause3.push((-2));
        Assert.assertEquals("3,-2", ((VecInt) (o_testSimplePhoneSATSmall_remove5__22)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__22)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__22)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove5__24 = this.solver.addClause(clause3);
        Assert.assertTrue(((UnitClause) (o_testSimplePhoneSATSmall_remove5__24)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((UnitClause) (o_testSimplePhoneSATSmall_remove5__24)).getActivity())), 0.1);
        Assert.assertEquals("3", ((UnitClause) (o_testSimplePhoneSATSmall_remove5__24)).toString());
        VecInt clause8 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause8)).toString());
        Assert.assertTrue(((VecInt) (clause8)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__27 = clause8.push(2);
        Assert.assertEquals("2", ((VecInt) (o_testSimplePhoneSATSmall_remove5__27)).toString());
        Assert.assertEquals(2, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__27)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__27)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__28 = clause8.push((-3));
        Assert.assertEquals("2,-3", ((VecInt) (o_testSimplePhoneSATSmall_remove5__28)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__28)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__28)).isEmpty());
        this.solver.addClause(clause8);
        VecInt clause4 = new VecInt();
        clause4.push((-4));
        clause4.push(1);
        this.solver.addClause(clause4);
        VecInt clause5 = new VecInt();
        clause5.push((-5));
        clause5.push(4);
        this.solver.addClause(clause5);
        VecInt clause6 = new VecInt();
        clause6.push((-6));
        clause6.push(4);
        this.solver.addClause(clause6);
        VecInt clause7 = new VecInt();
        clause7.push(5);
        clause7.push(6);
        clause7.push((-4));
        this.solver.addAtLeast(clause6, 1);
        this.solver.isSatisfiable();
        VecInt bound1 = new VecInt();
        bound1.push(3);
        this.solver.findModel(bound1);
        VecInt bound2 = new VecInt();
        bound2.push((-3));
        this.solver.findModel(bound2);
        VecInt bound3 = new VecInt();
        bound3.push(3);
        this.solver.findModel(bound3);
        VecInt bound4 = new VecInt();
        bound4.push(5);
        bound4.push((-3));
        this.solver.findModel(bound4);
        VecInt bound5 = new VecInt();
        bound5.push((-3));
        this.solver.findModel(bound5);
        VecInt bound6 = new VecInt();
        bound6.push(4);
        bound6.push(3);
        this.solver.findModel(bound6);
        VecInt bound7 = new VecInt();
        bound7.push(4);
        int[] model = this.solver.findModel(bound7);
        Set<Integer> satisfiedModel = new HashSet<Integer>();
        for (int i : model) {
            satisfiedModel.add(new Integer(i));
        }
        satisfiedModel.contains(new Integer(4));
        satisfiedModel.contains(new Integer(1));
        satisfiedModel.contains(new Integer(2));
    }

    @Test(timeout = 30000)
    public void testSimplePhoneSATSmall_remove5_remove386_remove3025() throws Exception, ContradictionException, TimeoutException {
        VecInt clause0 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause0)).toString());
        Assert.assertTrue(((VecInt) (clause0)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__4 = clause0.push(1);
        Assert.assertEquals("1", ((VecInt) (o_testSimplePhoneSATSmall_remove5__4)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__4)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__4)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove5__5 = this.solver.addClause(clause0);
        Assert.assertTrue(((UnitClause) (o_testSimplePhoneSATSmall_remove5__5)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((UnitClause) (o_testSimplePhoneSATSmall_remove5__5)).getActivity())), 0.1);
        Assert.assertEquals("1", ((UnitClause) (o_testSimplePhoneSATSmall_remove5__5)).toString());
        VecInt clause1 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause1)).toString());
        Assert.assertTrue(((VecInt) (clause1)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__9 = clause1.push(1);
        Assert.assertEquals("1", ((VecInt) (o_testSimplePhoneSATSmall_remove5__9)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__9)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__9)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__10 = clause1.push((-2));
        Assert.assertEquals("1,-2", ((VecInt) (o_testSimplePhoneSATSmall_remove5__10)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__10)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__10)).isEmpty());
        VecInt clause2 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause2)).toString());
        Assert.assertTrue(((VecInt) (clause2)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__14 = clause2.push(2);
        Assert.assertEquals("2", ((VecInt) (o_testSimplePhoneSATSmall_remove5__14)).toString());
        Assert.assertEquals(2, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__14)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__14)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__15 = clause2.push((-1));
        Assert.assertEquals("2,-1", ((VecInt) (o_testSimplePhoneSATSmall_remove5__15)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__15)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__15)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove5__17 = this.solver.addClause(clause2);
        Assert.assertTrue(((UnitClause) (o_testSimplePhoneSATSmall_remove5__17)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((UnitClause) (o_testSimplePhoneSATSmall_remove5__17)).getActivity())), 0.1);
        Assert.assertEquals("2", ((UnitClause) (o_testSimplePhoneSATSmall_remove5__17)).toString());
        VecInt clause3 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause3)).toString());
        Assert.assertTrue(((VecInt) (clause3)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__21 = clause3.push(3);
        Assert.assertEquals("3", ((VecInt) (o_testSimplePhoneSATSmall_remove5__21)).toString());
        Assert.assertEquals(3, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__21)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__21)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__22 = clause3.push((-2));
        Assert.assertEquals("3,-2", ((VecInt) (o_testSimplePhoneSATSmall_remove5__22)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__22)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__22)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove5__24 = this.solver.addClause(clause3);
        Assert.assertTrue(((UnitClause) (o_testSimplePhoneSATSmall_remove5__24)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((UnitClause) (o_testSimplePhoneSATSmall_remove5__24)).getActivity())), 0.1);
        Assert.assertEquals("3", ((UnitClause) (o_testSimplePhoneSATSmall_remove5__24)).toString());
        VecInt clause8 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause8)).toString());
        Assert.assertTrue(((VecInt) (clause8)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__27 = clause8.push(2);
        Assert.assertEquals("2", ((VecInt) (o_testSimplePhoneSATSmall_remove5__27)).toString());
        Assert.assertEquals(2, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__27)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__27)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__28 = clause8.push((-3));
        Assert.assertEquals("2,-3", ((VecInt) (o_testSimplePhoneSATSmall_remove5__28)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__28)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__28)).isEmpty());
        this.solver.addClause(clause8);
        VecInt clause4 = new VecInt();
        clause4.push((-4));
        clause4.push(1);
        this.solver.addClause(clause4);
        VecInt clause5 = new VecInt();
        clause5.push((-5));
        clause5.push(4);
        this.solver.addClause(clause5);
        VecInt clause6 = new VecInt();
        clause6.push((-6));
        clause6.push(4);
        this.solver.addClause(clause6);
        VecInt clause7 = new VecInt();
        clause7.push(5);
        clause7.push(6);
        clause7.push((-4));
        this.solver.addAtLeast(clause6, 1);
        this.solver.isSatisfiable();
        VecInt bound1 = new VecInt();
        bound1.push(3);
        this.solver.findModel(bound1);
        VecInt bound2 = new VecInt();
        bound2.push((-3));
        this.solver.findModel(bound2);
        VecInt bound3 = new VecInt();
        bound3.push(5);
        bound3.push(3);
        this.solver.findModel(bound3);
        VecInt bound4 = new VecInt();
        bound4.push((-3));
        this.solver.findModel(bound4);
        VecInt bound5 = new VecInt();
        bound5.push((-3));
        this.solver.findModel(bound5);
        VecInt bound6 = new VecInt();
        bound6.push(4);
        bound6.push(3);
        this.solver.findModel(bound6);
        VecInt bound7 = new VecInt();
        bound7.push(4);
        int[] model = this.solver.findModel(bound7);
        Set<Integer> satisfiedModel = new HashSet<Integer>();
        for (int i : model) {
            satisfiedModel.add(new Integer(i));
        }
        satisfiedModel.contains(new Integer(4));
        satisfiedModel.contains(new Integer(1));
        satisfiedModel.contains(new Integer(2));
    }

    @Test(timeout = 30000)
    public void testSimplePhoneSATSmall_remove5_remove386_remove2967() throws Exception, ContradictionException, TimeoutException {
        VecInt clause0 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause0)).toString());
        Assert.assertTrue(((VecInt) (clause0)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__4 = clause0.push(1);
        Assert.assertEquals("1", ((VecInt) (o_testSimplePhoneSATSmall_remove5__4)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__4)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__4)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove5__5 = this.solver.addClause(clause0);
        Assert.assertTrue(((UnitClause) (o_testSimplePhoneSATSmall_remove5__5)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((UnitClause) (o_testSimplePhoneSATSmall_remove5__5)).getActivity())), 0.1);
        Assert.assertEquals("1", ((UnitClause) (o_testSimplePhoneSATSmall_remove5__5)).toString());
        VecInt clause1 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause1)).toString());
        Assert.assertTrue(((VecInt) (clause1)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__9 = clause1.push(1);
        Assert.assertEquals("1", ((VecInt) (o_testSimplePhoneSATSmall_remove5__9)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__9)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__9)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__10 = clause1.push((-2));
        Assert.assertEquals("1,-2", ((VecInt) (o_testSimplePhoneSATSmall_remove5__10)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__10)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__10)).isEmpty());
        VecInt clause2 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause2)).toString());
        Assert.assertTrue(((VecInt) (clause2)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__14 = clause2.push(2);
        Assert.assertEquals("2", ((VecInt) (o_testSimplePhoneSATSmall_remove5__14)).toString());
        Assert.assertEquals(2, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__14)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__14)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__15 = clause2.push((-1));
        Assert.assertEquals("2,-1", ((VecInt) (o_testSimplePhoneSATSmall_remove5__15)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__15)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__15)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove5__17 = this.solver.addClause(clause2);
        Assert.assertTrue(((UnitClause) (o_testSimplePhoneSATSmall_remove5__17)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((UnitClause) (o_testSimplePhoneSATSmall_remove5__17)).getActivity())), 0.1);
        Assert.assertEquals("2", ((UnitClause) (o_testSimplePhoneSATSmall_remove5__17)).toString());
        VecInt clause3 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause3)).toString());
        Assert.assertTrue(((VecInt) (clause3)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__21 = clause3.push(3);
        Assert.assertEquals("3", ((VecInt) (o_testSimplePhoneSATSmall_remove5__21)).toString());
        Assert.assertEquals(3, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__21)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__21)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__22 = clause3.push((-2));
        Assert.assertEquals("3,-2", ((VecInt) (o_testSimplePhoneSATSmall_remove5__22)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__22)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__22)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove5__24 = this.solver.addClause(clause3);
        Assert.assertTrue(((UnitClause) (o_testSimplePhoneSATSmall_remove5__24)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((UnitClause) (o_testSimplePhoneSATSmall_remove5__24)).getActivity())), 0.1);
        Assert.assertEquals("3", ((UnitClause) (o_testSimplePhoneSATSmall_remove5__24)).toString());
        VecInt clause8 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause8)).toString());
        Assert.assertTrue(((VecInt) (clause8)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__27 = clause8.push(2);
        Assert.assertEquals("2", ((VecInt) (o_testSimplePhoneSATSmall_remove5__27)).toString());
        Assert.assertEquals(2, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__27)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__27)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__28 = clause8.push((-3));
        Assert.assertEquals("2,-3", ((VecInt) (o_testSimplePhoneSATSmall_remove5__28)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__28)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__28)).isEmpty());
        this.solver.addClause(clause8);
        VecInt clause4 = new VecInt();
        clause4.push((-4));
        clause4.push(1);
        this.solver.addClause(clause4);
        VecInt clause5 = new VecInt();
        clause5.push((-5));
        clause5.push(4);
        this.solver.addClause(clause5);
        VecInt clause6 = new VecInt();
        clause6.push((-6));
        this.solver.addClause(clause6);
        VecInt clause7 = new VecInt();
        clause7.push(5);
        clause7.push(6);
        clause7.push((-4));
        this.solver.addAtLeast(clause6, 1);
        this.solver.isSatisfiable();
        VecInt bound1 = new VecInt();
        bound1.push(3);
        this.solver.findModel(bound1);
        VecInt bound2 = new VecInt();
        bound2.push((-3));
        this.solver.findModel(bound2);
        VecInt bound3 = new VecInt();
        bound3.push(5);
        bound3.push(3);
        this.solver.findModel(bound3);
        VecInt bound4 = new VecInt();
        bound4.push((-3));
        this.solver.findModel(bound4);
        VecInt bound5 = new VecInt();
        bound5.push(4);
        bound5.push((-3));
        this.solver.findModel(bound5);
        VecInt bound6 = new VecInt();
        bound6.push(4);
        bound6.push(3);
        this.solver.findModel(bound6);
        VecInt bound7 = new VecInt();
        bound7.push(4);
        int[] model = this.solver.findModel(bound7);
        Set<Integer> satisfiedModel = new HashSet<Integer>();
        for (int i : model) {
            satisfiedModel.add(new Integer(i));
        }
        satisfiedModel.contains(new Integer(4));
        satisfiedModel.contains(new Integer(1));
        satisfiedModel.contains(new Integer(2));
    }

    @Test(timeout = 30000)
    public void testSimplePhoneSATSmall_remove5_remove377_remove2847() throws Exception, ContradictionException, TimeoutException {
        VecInt clause0 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause0)).toString());
        Assert.assertTrue(((VecInt) (clause0)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__4 = clause0.push(1);
        Assert.assertEquals("1", ((VecInt) (o_testSimplePhoneSATSmall_remove5__4)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__4)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__4)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove5__5 = this.solver.addClause(clause0);
        Assert.assertTrue(((UnitClause) (o_testSimplePhoneSATSmall_remove5__5)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((UnitClause) (o_testSimplePhoneSATSmall_remove5__5)).getActivity())), 0.1);
        Assert.assertEquals("1", ((UnitClause) (o_testSimplePhoneSATSmall_remove5__5)).toString());
        VecInt clause1 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause1)).toString());
        Assert.assertTrue(((VecInt) (clause1)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__9 = clause1.push(1);
        Assert.assertEquals("1", ((VecInt) (o_testSimplePhoneSATSmall_remove5__9)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__9)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__9)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__10 = clause1.push((-2));
        Assert.assertEquals("1,-2", ((VecInt) (o_testSimplePhoneSATSmall_remove5__10)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__10)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__10)).isEmpty());
        VecInt clause2 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause2)).toString());
        Assert.assertTrue(((VecInt) (clause2)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__14 = clause2.push(2);
        Assert.assertEquals("2", ((VecInt) (o_testSimplePhoneSATSmall_remove5__14)).toString());
        Assert.assertEquals(2, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__14)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__14)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__15 = clause2.push((-1));
        Assert.assertEquals("2,-1", ((VecInt) (o_testSimplePhoneSATSmall_remove5__15)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__15)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__15)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove5__17 = this.solver.addClause(clause2);
        Assert.assertTrue(((UnitClause) (o_testSimplePhoneSATSmall_remove5__17)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((UnitClause) (o_testSimplePhoneSATSmall_remove5__17)).getActivity())), 0.1);
        Assert.assertEquals("2", ((UnitClause) (o_testSimplePhoneSATSmall_remove5__17)).toString());
        VecInt clause3 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause3)).toString());
        Assert.assertTrue(((VecInt) (clause3)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__21 = clause3.push(3);
        Assert.assertEquals("3", ((VecInt) (o_testSimplePhoneSATSmall_remove5__21)).toString());
        Assert.assertEquals(3, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__21)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__21)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__22 = clause3.push((-2));
        Assert.assertEquals("3,-2", ((VecInt) (o_testSimplePhoneSATSmall_remove5__22)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__22)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__22)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove5__24 = this.solver.addClause(clause3);
        Assert.assertTrue(((UnitClause) (o_testSimplePhoneSATSmall_remove5__24)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((UnitClause) (o_testSimplePhoneSATSmall_remove5__24)).getActivity())), 0.1);
        Assert.assertEquals("3", ((UnitClause) (o_testSimplePhoneSATSmall_remove5__24)).toString());
        VecInt clause8 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause8)).toString());
        Assert.assertTrue(((VecInt) (clause8)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__27 = clause8.push(2);
        Assert.assertEquals("2", ((VecInt) (o_testSimplePhoneSATSmall_remove5__27)).toString());
        Assert.assertEquals(2, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__27)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__27)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__28 = clause8.push((-3));
        Assert.assertEquals("2,-3", ((VecInt) (o_testSimplePhoneSATSmall_remove5__28)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__28)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__28)).isEmpty());
        this.solver.addClause(clause8);
        VecInt clause4 = new VecInt();
        clause4.push((-4));
        clause4.push(1);
        this.solver.addClause(clause4);
        VecInt clause5 = new VecInt();
        clause5.push((-5));
        clause5.push(4);
        this.solver.addClause(clause5);
        VecInt clause6 = new VecInt();
        clause6.push((-6));
        this.solver.addClause(clause6);
        VecInt clause7 = new VecInt();
        clause7.push(5);
        clause7.push(6);
        clause7.push((-4));
        this.solver.addAtLeast(clause6, 1);
        this.solver.isSatisfiable();
        VecInt bound1 = new VecInt();
        bound1.push(3);
        this.solver.findModel(bound1);
        VecInt bound2 = new VecInt();
        bound2.push((-3));
        this.solver.findModel(bound2);
        VecInt bound3 = new VecInt();
        bound3.push(3);
        this.solver.findModel(bound3);
        VecInt bound4 = new VecInt();
        bound4.push(5);
        bound4.push((-3));
        this.solver.findModel(bound4);
        VecInt bound5 = new VecInt();
        bound5.push(4);
        bound5.push((-3));
        this.solver.findModel(bound5);
        VecInt bound6 = new VecInt();
        bound6.push(4);
        bound6.push(3);
        this.solver.findModel(bound6);
        VecInt bound7 = new VecInt();
        bound7.push(4);
        int[] model = this.solver.findModel(bound7);
        Set<Integer> satisfiedModel = new HashSet<Integer>();
        for (int i : model) {
            satisfiedModel.add(new Integer(i));
        }
        satisfiedModel.contains(new Integer(4));
        satisfiedModel.contains(new Integer(1));
        satisfiedModel.contains(new Integer(2));
    }

    @Test(timeout = 30000)
    public void testSimplePhoneSATSmall_remove5_remove334_remove2196() throws Exception, ContradictionException, TimeoutException {
        VecInt clause0 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause0)).toString());
        Assert.assertTrue(((VecInt) (clause0)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__4 = clause0.push(1);
        Assert.assertEquals("1", ((VecInt) (o_testSimplePhoneSATSmall_remove5__4)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__4)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__4)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove5__5 = this.solver.addClause(clause0);
        Assert.assertTrue(((UnitClause) (o_testSimplePhoneSATSmall_remove5__5)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((UnitClause) (o_testSimplePhoneSATSmall_remove5__5)).getActivity())), 0.1);
        Assert.assertEquals("1", ((UnitClause) (o_testSimplePhoneSATSmall_remove5__5)).toString());
        VecInt clause1 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause1)).toString());
        Assert.assertTrue(((VecInt) (clause1)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__9 = clause1.push(1);
        Assert.assertEquals("1", ((VecInt) (o_testSimplePhoneSATSmall_remove5__9)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__9)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__9)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__10 = clause1.push((-2));
        Assert.assertEquals("1,-2", ((VecInt) (o_testSimplePhoneSATSmall_remove5__10)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__10)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__10)).isEmpty());
        VecInt clause2 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause2)).toString());
        Assert.assertTrue(((VecInt) (clause2)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__14 = clause2.push(2);
        Assert.assertEquals("2", ((VecInt) (o_testSimplePhoneSATSmall_remove5__14)).toString());
        Assert.assertEquals(2, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__14)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__14)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__15 = clause2.push((-1));
        Assert.assertEquals("2,-1", ((VecInt) (o_testSimplePhoneSATSmall_remove5__15)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__15)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__15)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove5__17 = this.solver.addClause(clause2);
        Assert.assertTrue(((UnitClause) (o_testSimplePhoneSATSmall_remove5__17)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((UnitClause) (o_testSimplePhoneSATSmall_remove5__17)).getActivity())), 0.1);
        Assert.assertEquals("2", ((UnitClause) (o_testSimplePhoneSATSmall_remove5__17)).toString());
        VecInt clause3 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause3)).toString());
        Assert.assertTrue(((VecInt) (clause3)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__21 = clause3.push(3);
        Assert.assertEquals("3", ((VecInt) (o_testSimplePhoneSATSmall_remove5__21)).toString());
        Assert.assertEquals(3, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__21)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__21)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__22 = clause3.push((-2));
        Assert.assertEquals("3,-2", ((VecInt) (o_testSimplePhoneSATSmall_remove5__22)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__22)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__22)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove5__24 = this.solver.addClause(clause3);
        Assert.assertTrue(((UnitClause) (o_testSimplePhoneSATSmall_remove5__24)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((UnitClause) (o_testSimplePhoneSATSmall_remove5__24)).getActivity())), 0.1);
        Assert.assertEquals("3", ((UnitClause) (o_testSimplePhoneSATSmall_remove5__24)).toString());
        VecInt clause8 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause8)).toString());
        Assert.assertTrue(((VecInt) (clause8)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__27 = clause8.push(2);
        Assert.assertEquals("2", ((VecInt) (o_testSimplePhoneSATSmall_remove5__27)).toString());
        Assert.assertEquals(2, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__27)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__27)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__28 = clause8.push((-3));
        Assert.assertEquals("2,-3", ((VecInt) (o_testSimplePhoneSATSmall_remove5__28)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__28)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__28)).isEmpty());
        this.solver.addClause(clause8);
        VecInt clause4 = new VecInt();
        clause4.push((-4));
        clause4.push(1);
        this.solver.addClause(clause4);
        VecInt clause5 = new VecInt();
        clause5.push((-5));
        clause5.push(4);
        this.solver.addClause(clause5);
        VecInt clause6 = new VecInt();
        clause6.push((-6));
        this.solver.addClause(clause6);
        VecInt clause7 = new VecInt();
        clause7.push(5);
        clause7.push(6);
        clause7.push((-4));
        this.solver.addAtLeast(clause6, 1);
        this.solver.isSatisfiable();
        VecInt bound1 = new VecInt();
        this.solver.findModel(bound1);
        VecInt bound2 = new VecInt();
        bound2.push((-3));
        this.solver.findModel(bound2);
        VecInt bound3 = new VecInt();
        bound3.push(5);
        bound3.push(3);
        this.solver.findModel(bound3);
        VecInt bound4 = new VecInt();
        bound4.push(5);
        bound4.push((-3));
        this.solver.findModel(bound4);
        VecInt bound5 = new VecInt();
        bound5.push(4);
        bound5.push((-3));
        this.solver.findModel(bound5);
        VecInt bound6 = new VecInt();
        bound6.push(4);
        bound6.push(3);
        this.solver.findModel(bound6);
        VecInt bound7 = new VecInt();
        bound7.push(4);
        int[] model = this.solver.findModel(bound7);
        Set<Integer> satisfiedModel = new HashSet<Integer>();
        for (int i : model) {
            satisfiedModel.add(new Integer(i));
        }
        satisfiedModel.contains(new Integer(4));
        satisfiedModel.contains(new Integer(1));
        satisfiedModel.contains(new Integer(2));
    }

    @Test(timeout = 30000)
    public void testSimplePhoneSATSmall_remove5_remove401_remove3095() throws Exception, ContradictionException, TimeoutException {
        VecInt clause0 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause0)).toString());
        Assert.assertTrue(((VecInt) (clause0)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__4 = clause0.push(1);
        Assert.assertEquals("1", ((VecInt) (o_testSimplePhoneSATSmall_remove5__4)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__4)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__4)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove5__5 = this.solver.addClause(clause0);
        Assert.assertTrue(((UnitClause) (o_testSimplePhoneSATSmall_remove5__5)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((UnitClause) (o_testSimplePhoneSATSmall_remove5__5)).getActivity())), 0.1);
        Assert.assertEquals("1", ((UnitClause) (o_testSimplePhoneSATSmall_remove5__5)).toString());
        VecInt clause1 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause1)).toString());
        Assert.assertTrue(((VecInt) (clause1)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__9 = clause1.push(1);
        Assert.assertEquals("1", ((VecInt) (o_testSimplePhoneSATSmall_remove5__9)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__9)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__9)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__10 = clause1.push((-2));
        Assert.assertEquals("1,-2", ((VecInt) (o_testSimplePhoneSATSmall_remove5__10)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__10)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__10)).isEmpty());
        VecInt clause2 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause2)).toString());
        Assert.assertTrue(((VecInt) (clause2)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__14 = clause2.push(2);
        Assert.assertEquals("2", ((VecInt) (o_testSimplePhoneSATSmall_remove5__14)).toString());
        Assert.assertEquals(2, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__14)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__14)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__15 = clause2.push((-1));
        Assert.assertEquals("2,-1", ((VecInt) (o_testSimplePhoneSATSmall_remove5__15)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__15)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__15)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove5__17 = this.solver.addClause(clause2);
        Assert.assertTrue(((UnitClause) (o_testSimplePhoneSATSmall_remove5__17)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((UnitClause) (o_testSimplePhoneSATSmall_remove5__17)).getActivity())), 0.1);
        Assert.assertEquals("2", ((UnitClause) (o_testSimplePhoneSATSmall_remove5__17)).toString());
        VecInt clause3 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause3)).toString());
        Assert.assertTrue(((VecInt) (clause3)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__21 = clause3.push(3);
        Assert.assertEquals("3", ((VecInt) (o_testSimplePhoneSATSmall_remove5__21)).toString());
        Assert.assertEquals(3, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__21)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__21)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__22 = clause3.push((-2));
        Assert.assertEquals("3,-2", ((VecInt) (o_testSimplePhoneSATSmall_remove5__22)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__22)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__22)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove5__24 = this.solver.addClause(clause3);
        Assert.assertTrue(((UnitClause) (o_testSimplePhoneSATSmall_remove5__24)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((UnitClause) (o_testSimplePhoneSATSmall_remove5__24)).getActivity())), 0.1);
        Assert.assertEquals("3", ((UnitClause) (o_testSimplePhoneSATSmall_remove5__24)).toString());
        VecInt clause8 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause8)).toString());
        Assert.assertTrue(((VecInt) (clause8)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__27 = clause8.push(2);
        Assert.assertEquals("2", ((VecInt) (o_testSimplePhoneSATSmall_remove5__27)).toString());
        Assert.assertEquals(2, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__27)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__27)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__28 = clause8.push((-3));
        Assert.assertEquals("2,-3", ((VecInt) (o_testSimplePhoneSATSmall_remove5__28)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__28)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__28)).isEmpty());
        this.solver.addClause(clause8);
        VecInt clause4 = new VecInt();
        clause4.push((-4));
        clause4.push(1);
        this.solver.addClause(clause4);
        VecInt clause5 = new VecInt();
        clause5.push((-5));
        this.solver.addClause(clause5);
        VecInt clause6 = new VecInt();
        clause6.push((-6));
        clause6.push(4);
        this.solver.addClause(clause6);
        VecInt clause7 = new VecInt();
        clause7.push(5);
        clause7.push(6);
        clause7.push((-4));
        this.solver.addAtLeast(clause6, 1);
        this.solver.isSatisfiable();
        VecInt bound1 = new VecInt();
        bound1.push(3);
        this.solver.findModel(bound1);
        VecInt bound2 = new VecInt();
        bound2.push((-3));
        this.solver.findModel(bound2);
        VecInt bound3 = new VecInt();
        bound3.push(5);
        bound3.push(3);
        this.solver.findModel(bound3);
        VecInt bound4 = new VecInt();
        bound4.push(5);
        bound4.push((-3));
        this.solver.findModel(bound4);
        VecInt bound5 = new VecInt();
        bound5.push((-3));
        this.solver.findModel(bound5);
        VecInt bound6 = new VecInt();
        bound6.push(4);
        bound6.push(3);
        this.solver.findModel(bound6);
        VecInt bound7 = new VecInt();
        bound7.push(4);
        int[] model = this.solver.findModel(bound7);
        Set<Integer> satisfiedModel = new HashSet<Integer>();
        for (int i : model) {
            satisfiedModel.add(new Integer(i));
        }
        satisfiedModel.contains(new Integer(4));
        satisfiedModel.contains(new Integer(1));
        satisfiedModel.contains(new Integer(2));
    }

    @Test(timeout = 30000)
    public void testSimplePhoneSATSmall_remove5_remove334_remove2243() throws Exception, ContradictionException, TimeoutException {
        VecInt clause0 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause0)).toString());
        Assert.assertTrue(((VecInt) (clause0)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__4 = clause0.push(1);
        Assert.assertEquals("1", ((VecInt) (o_testSimplePhoneSATSmall_remove5__4)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__4)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__4)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove5__5 = this.solver.addClause(clause0);
        Assert.assertTrue(((UnitClause) (o_testSimplePhoneSATSmall_remove5__5)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((UnitClause) (o_testSimplePhoneSATSmall_remove5__5)).getActivity())), 0.1);
        Assert.assertEquals("1", ((UnitClause) (o_testSimplePhoneSATSmall_remove5__5)).toString());
        VecInt clause1 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause1)).toString());
        Assert.assertTrue(((VecInt) (clause1)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__9 = clause1.push(1);
        Assert.assertEquals("1", ((VecInt) (o_testSimplePhoneSATSmall_remove5__9)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__9)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__9)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__10 = clause1.push((-2));
        Assert.assertEquals("1,-2", ((VecInt) (o_testSimplePhoneSATSmall_remove5__10)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__10)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__10)).isEmpty());
        VecInt clause2 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause2)).toString());
        Assert.assertTrue(((VecInt) (clause2)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__14 = clause2.push(2);
        Assert.assertEquals("2", ((VecInt) (o_testSimplePhoneSATSmall_remove5__14)).toString());
        Assert.assertEquals(2, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__14)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__14)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__15 = clause2.push((-1));
        Assert.assertEquals("2,-1", ((VecInt) (o_testSimplePhoneSATSmall_remove5__15)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__15)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__15)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove5__17 = this.solver.addClause(clause2);
        Assert.assertTrue(((UnitClause) (o_testSimplePhoneSATSmall_remove5__17)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((UnitClause) (o_testSimplePhoneSATSmall_remove5__17)).getActivity())), 0.1);
        Assert.assertEquals("2", ((UnitClause) (o_testSimplePhoneSATSmall_remove5__17)).toString());
        VecInt clause3 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause3)).toString());
        Assert.assertTrue(((VecInt) (clause3)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__21 = clause3.push(3);
        Assert.assertEquals("3", ((VecInt) (o_testSimplePhoneSATSmall_remove5__21)).toString());
        Assert.assertEquals(3, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__21)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__21)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__22 = clause3.push((-2));
        Assert.assertEquals("3,-2", ((VecInt) (o_testSimplePhoneSATSmall_remove5__22)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__22)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__22)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove5__24 = this.solver.addClause(clause3);
        Assert.assertTrue(((UnitClause) (o_testSimplePhoneSATSmall_remove5__24)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((UnitClause) (o_testSimplePhoneSATSmall_remove5__24)).getActivity())), 0.1);
        Assert.assertEquals("3", ((UnitClause) (o_testSimplePhoneSATSmall_remove5__24)).toString());
        VecInt clause8 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause8)).toString());
        Assert.assertTrue(((VecInt) (clause8)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__27 = clause8.push(2);
        Assert.assertEquals("2", ((VecInt) (o_testSimplePhoneSATSmall_remove5__27)).toString());
        Assert.assertEquals(2, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__27)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__27)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__28 = clause8.push((-3));
        Assert.assertEquals("2,-3", ((VecInt) (o_testSimplePhoneSATSmall_remove5__28)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__28)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__28)).isEmpty());
        this.solver.addClause(clause8);
        VecInt clause4 = new VecInt();
        clause4.push((-4));
        clause4.push(1);
        this.solver.addClause(clause4);
        VecInt clause5 = new VecInt();
        clause5.push((-5));
        clause5.push(4);
        this.solver.addClause(clause5);
        VecInt clause6 = new VecInt();
        clause6.push((-6));
        this.solver.addClause(clause6);
        VecInt clause7 = new VecInt();
        clause7.push(5);
        clause7.push(6);
        clause7.push((-4));
        this.solver.addAtLeast(clause6, 1);
        this.solver.isSatisfiable();
        VecInt bound1 = new VecInt();
        bound1.push(3);
        this.solver.findModel(bound1);
        VecInt bound2 = new VecInt();
        bound2.push((-3));
        this.solver.findModel(bound2);
        VecInt bound3 = new VecInt();
        bound3.push(5);
        bound3.push(3);
        this.solver.findModel(bound3);
        VecInt bound4 = new VecInt();
        bound4.push(5);
        bound4.push((-3));
        this.solver.findModel(bound4);
        VecInt bound5 = new VecInt();
        bound5.push((-3));
        this.solver.findModel(bound5);
        VecInt bound6 = new VecInt();
        bound6.push(4);
        bound6.push(3);
        this.solver.findModel(bound6);
        VecInt bound7 = new VecInt();
        bound7.push(4);
        int[] model = this.solver.findModel(bound7);
        Set<Integer> satisfiedModel = new HashSet<Integer>();
        for (int i : model) {
            satisfiedModel.add(new Integer(i));
        }
        satisfiedModel.contains(new Integer(4));
        satisfiedModel.contains(new Integer(1));
        satisfiedModel.contains(new Integer(2));
    }

    @Test(timeout = 30000)
    public void testSimplePhoneSATSmall_remove5_remove378_remove3158() throws Exception, ContradictionException, TimeoutException {
        VecInt clause0 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause0)).toString());
        Assert.assertTrue(((VecInt) (clause0)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__4 = clause0.push(1);
        Assert.assertEquals("1", ((VecInt) (o_testSimplePhoneSATSmall_remove5__4)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__4)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__4)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove5__5 = this.solver.addClause(clause0);
        Assert.assertTrue(((UnitClause) (o_testSimplePhoneSATSmall_remove5__5)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((UnitClause) (o_testSimplePhoneSATSmall_remove5__5)).getActivity())), 0.1);
        Assert.assertEquals("1", ((UnitClause) (o_testSimplePhoneSATSmall_remove5__5)).toString());
        VecInt clause1 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause1)).toString());
        Assert.assertTrue(((VecInt) (clause1)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__9 = clause1.push(1);
        Assert.assertEquals("1", ((VecInt) (o_testSimplePhoneSATSmall_remove5__9)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__9)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__9)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__10 = clause1.push((-2));
        Assert.assertEquals("1,-2", ((VecInt) (o_testSimplePhoneSATSmall_remove5__10)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__10)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__10)).isEmpty());
        VecInt clause2 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause2)).toString());
        Assert.assertTrue(((VecInt) (clause2)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__14 = clause2.push(2);
        Assert.assertEquals("2", ((VecInt) (o_testSimplePhoneSATSmall_remove5__14)).toString());
        Assert.assertEquals(2, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__14)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__14)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__15 = clause2.push((-1));
        Assert.assertEquals("2,-1", ((VecInt) (o_testSimplePhoneSATSmall_remove5__15)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__15)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__15)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove5__17 = this.solver.addClause(clause2);
        Assert.assertTrue(((UnitClause) (o_testSimplePhoneSATSmall_remove5__17)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((UnitClause) (o_testSimplePhoneSATSmall_remove5__17)).getActivity())), 0.1);
        Assert.assertEquals("2", ((UnitClause) (o_testSimplePhoneSATSmall_remove5__17)).toString());
        VecInt clause3 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause3)).toString());
        Assert.assertTrue(((VecInt) (clause3)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__21 = clause3.push(3);
        Assert.assertEquals("3", ((VecInt) (o_testSimplePhoneSATSmall_remove5__21)).toString());
        Assert.assertEquals(3, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__21)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__21)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__22 = clause3.push((-2));
        Assert.assertEquals("3,-2", ((VecInt) (o_testSimplePhoneSATSmall_remove5__22)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__22)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__22)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove5__24 = this.solver.addClause(clause3);
        Assert.assertTrue(((UnitClause) (o_testSimplePhoneSATSmall_remove5__24)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((UnitClause) (o_testSimplePhoneSATSmall_remove5__24)).getActivity())), 0.1);
        Assert.assertEquals("3", ((UnitClause) (o_testSimplePhoneSATSmall_remove5__24)).toString());
        VecInt clause8 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause8)).toString());
        Assert.assertTrue(((VecInt) (clause8)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__27 = clause8.push(2);
        Assert.assertEquals("2", ((VecInt) (o_testSimplePhoneSATSmall_remove5__27)).toString());
        Assert.assertEquals(2, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__27)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__27)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__28 = clause8.push((-3));
        Assert.assertEquals("2,-3", ((VecInt) (o_testSimplePhoneSATSmall_remove5__28)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__28)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__28)).isEmpty());
        this.solver.addClause(clause8);
        VecInt clause4 = new VecInt();
        clause4.push((-4));
        clause4.push(1);
        this.solver.addClause(clause4);
        VecInt clause5 = new VecInt();
        clause5.push((-5));
        clause5.push(4);
        this.solver.addClause(clause5);
        VecInt clause6 = new VecInt();
        clause6.push((-6));
        clause6.push(4);
        this.solver.addClause(clause6);
        VecInt clause7 = new VecInt();
        clause7.push(5);
        clause7.push(6);
        clause7.push((-4));
        this.solver.addAtLeast(clause6, 1);
        this.solver.isSatisfiable();
        VecInt bound1 = new VecInt();
        bound1.push(3);
        this.solver.findModel(bound1);
        VecInt bound2 = new VecInt();
        this.solver.findModel(bound2);
        VecInt bound3 = new VecInt();
        bound3.push(5);
        this.solver.findModel(bound3);
        VecInt bound4 = new VecInt();
        bound4.push(5);
        bound4.push((-3));
        this.solver.findModel(bound4);
        VecInt bound5 = new VecInt();
        bound5.push(4);
        bound5.push((-3));
        this.solver.findModel(bound5);
        VecInt bound6 = new VecInt();
        bound6.push(4);
        bound6.push(3);
        this.solver.findModel(bound6);
        VecInt bound7 = new VecInt();
        bound7.push(4);
        int[] model = this.solver.findModel(bound7);
        Set<Integer> satisfiedModel = new HashSet<Integer>();
        for (int i : model) {
            satisfiedModel.add(new Integer(i));
        }
        satisfiedModel.contains(new Integer(4));
        satisfiedModel.contains(new Integer(1));
        satisfiedModel.contains(new Integer(2));
    }

    @Test(timeout = 30000)
    public void testSimplePhoneSATSmall_remove5_remove377_remove2880() throws Exception, ContradictionException, TimeoutException {
        VecInt clause0 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause0)).toString());
        Assert.assertTrue(((VecInt) (clause0)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__4 = clause0.push(1);
        Assert.assertEquals("1", ((VecInt) (o_testSimplePhoneSATSmall_remove5__4)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__4)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__4)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove5__5 = this.solver.addClause(clause0);
        Assert.assertTrue(((UnitClause) (o_testSimplePhoneSATSmall_remove5__5)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((UnitClause) (o_testSimplePhoneSATSmall_remove5__5)).getActivity())), 0.1);
        Assert.assertEquals("1", ((UnitClause) (o_testSimplePhoneSATSmall_remove5__5)).toString());
        VecInt clause1 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause1)).toString());
        Assert.assertTrue(((VecInt) (clause1)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__9 = clause1.push(1);
        Assert.assertEquals("1", ((VecInt) (o_testSimplePhoneSATSmall_remove5__9)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__9)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__9)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__10 = clause1.push((-2));
        Assert.assertEquals("1,-2", ((VecInt) (o_testSimplePhoneSATSmall_remove5__10)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__10)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__10)).isEmpty());
        VecInt clause2 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause2)).toString());
        Assert.assertTrue(((VecInt) (clause2)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__14 = clause2.push(2);
        Assert.assertEquals("2", ((VecInt) (o_testSimplePhoneSATSmall_remove5__14)).toString());
        Assert.assertEquals(2, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__14)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__14)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__15 = clause2.push((-1));
        Assert.assertEquals("2,-1", ((VecInt) (o_testSimplePhoneSATSmall_remove5__15)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__15)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__15)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove5__17 = this.solver.addClause(clause2);
        Assert.assertTrue(((UnitClause) (o_testSimplePhoneSATSmall_remove5__17)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((UnitClause) (o_testSimplePhoneSATSmall_remove5__17)).getActivity())), 0.1);
        Assert.assertEquals("2", ((UnitClause) (o_testSimplePhoneSATSmall_remove5__17)).toString());
        VecInt clause3 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause3)).toString());
        Assert.assertTrue(((VecInt) (clause3)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__21 = clause3.push(3);
        Assert.assertEquals("3", ((VecInt) (o_testSimplePhoneSATSmall_remove5__21)).toString());
        Assert.assertEquals(3, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__21)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__21)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__22 = clause3.push((-2));
        Assert.assertEquals("3,-2", ((VecInt) (o_testSimplePhoneSATSmall_remove5__22)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__22)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__22)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove5__24 = this.solver.addClause(clause3);
        Assert.assertTrue(((UnitClause) (o_testSimplePhoneSATSmall_remove5__24)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((UnitClause) (o_testSimplePhoneSATSmall_remove5__24)).getActivity())), 0.1);
        Assert.assertEquals("3", ((UnitClause) (o_testSimplePhoneSATSmall_remove5__24)).toString());
        VecInt clause8 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause8)).toString());
        Assert.assertTrue(((VecInt) (clause8)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__27 = clause8.push(2);
        Assert.assertEquals("2", ((VecInt) (o_testSimplePhoneSATSmall_remove5__27)).toString());
        Assert.assertEquals(2, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__27)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__27)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__28 = clause8.push((-3));
        Assert.assertEquals("2,-3", ((VecInt) (o_testSimplePhoneSATSmall_remove5__28)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__28)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__28)).isEmpty());
        this.solver.addClause(clause8);
        VecInt clause4 = new VecInt();
        clause4.push((-4));
        clause4.push(1);
        this.solver.addClause(clause4);
        VecInt clause5 = new VecInt();
        clause5.push((-5));
        clause5.push(4);
        this.solver.addClause(clause5);
        VecInt clause6 = new VecInt();
        clause6.push((-6));
        clause6.push(4);
        this.solver.addClause(clause6);
        VecInt clause7 = new VecInt();
        clause7.push(5);
        clause7.push(6);
        clause7.push((-4));
        this.solver.addAtLeast(clause6, 1);
        this.solver.isSatisfiable();
        VecInt bound1 = new VecInt();
        bound1.push(3);
        this.solver.findModel(bound1);
        VecInt bound2 = new VecInt();
        this.solver.findModel(bound2);
        VecInt bound3 = new VecInt();
        bound3.push(3);
        this.solver.findModel(bound3);
        VecInt bound4 = new VecInt();
        bound4.push(5);
        bound4.push((-3));
        this.solver.findModel(bound4);
        VecInt bound5 = new VecInt();
        bound5.push(4);
        bound5.push((-3));
        this.solver.findModel(bound5);
        VecInt bound6 = new VecInt();
        bound6.push(4);
        bound6.push(3);
        this.solver.findModel(bound6);
        VecInt bound7 = new VecInt();
        bound7.push(4);
        int[] model = this.solver.findModel(bound7);
        Set<Integer> satisfiedModel = new HashSet<Integer>();
        for (int i : model) {
            satisfiedModel.add(new Integer(i));
        }
        satisfiedModel.contains(new Integer(4));
        satisfiedModel.contains(new Integer(1));
        satisfiedModel.contains(new Integer(2));
    }

    @Test(timeout = 30000)
    public void testSimplePhoneSATSmall_remove5_remove334_remove2151() throws Exception, ContradictionException, TimeoutException {
        VecInt clause0 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause0)).toString());
        Assert.assertTrue(((VecInt) (clause0)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__4 = clause0.push(1);
        Assert.assertEquals("1", ((VecInt) (o_testSimplePhoneSATSmall_remove5__4)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__4)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__4)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove5__5 = this.solver.addClause(clause0);
        Assert.assertTrue(((UnitClause) (o_testSimplePhoneSATSmall_remove5__5)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((UnitClause) (o_testSimplePhoneSATSmall_remove5__5)).getActivity())), 0.1);
        Assert.assertEquals("1", ((UnitClause) (o_testSimplePhoneSATSmall_remove5__5)).toString());
        VecInt clause1 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause1)).toString());
        Assert.assertTrue(((VecInt) (clause1)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__9 = clause1.push(1);
        Assert.assertEquals("1", ((VecInt) (o_testSimplePhoneSATSmall_remove5__9)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__9)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__9)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__10 = clause1.push((-2));
        Assert.assertEquals("1,-2", ((VecInt) (o_testSimplePhoneSATSmall_remove5__10)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__10)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__10)).isEmpty());
        VecInt clause2 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause2)).toString());
        Assert.assertTrue(((VecInt) (clause2)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__14 = clause2.push(2);
        Assert.assertEquals("2", ((VecInt) (o_testSimplePhoneSATSmall_remove5__14)).toString());
        Assert.assertEquals(2, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__14)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__14)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__15 = clause2.push((-1));
        Assert.assertEquals("2,-1", ((VecInt) (o_testSimplePhoneSATSmall_remove5__15)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__15)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__15)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove5__17 = this.solver.addClause(clause2);
        Assert.assertTrue(((UnitClause) (o_testSimplePhoneSATSmall_remove5__17)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((UnitClause) (o_testSimplePhoneSATSmall_remove5__17)).getActivity())), 0.1);
        Assert.assertEquals("2", ((UnitClause) (o_testSimplePhoneSATSmall_remove5__17)).toString());
        VecInt clause3 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause3)).toString());
        Assert.assertTrue(((VecInt) (clause3)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__21 = clause3.push(3);
        Assert.assertEquals("3", ((VecInt) (o_testSimplePhoneSATSmall_remove5__21)).toString());
        Assert.assertEquals(3, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__21)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__21)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__22 = clause3.push((-2));
        Assert.assertEquals("3,-2", ((VecInt) (o_testSimplePhoneSATSmall_remove5__22)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__22)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__22)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove5__24 = this.solver.addClause(clause3);
        Assert.assertTrue(((UnitClause) (o_testSimplePhoneSATSmall_remove5__24)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((UnitClause) (o_testSimplePhoneSATSmall_remove5__24)).getActivity())), 0.1);
        Assert.assertEquals("3", ((UnitClause) (o_testSimplePhoneSATSmall_remove5__24)).toString());
        VecInt clause8 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause8)).toString());
        Assert.assertTrue(((VecInt) (clause8)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__27 = clause8.push(2);
        Assert.assertEquals("2", ((VecInt) (o_testSimplePhoneSATSmall_remove5__27)).toString());
        Assert.assertEquals(2, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__27)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__27)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__28 = clause8.push((-3));
        Assert.assertEquals("2,-3", ((VecInt) (o_testSimplePhoneSATSmall_remove5__28)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__28)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__28)).isEmpty());
        this.solver.addClause(clause8);
        VecInt clause4 = new VecInt();
        clause4.push((-4));
        clause4.push(1);
        this.solver.addClause(clause4);
        VecInt clause5 = new VecInt();
        clause5.push((-5));
        this.solver.addClause(clause5);
        VecInt clause6 = new VecInt();
        clause6.push((-6));
        this.solver.addClause(clause6);
        VecInt clause7 = new VecInt();
        clause7.push(5);
        clause7.push(6);
        clause7.push((-4));
        this.solver.addAtLeast(clause6, 1);
        this.solver.isSatisfiable();
        VecInt bound1 = new VecInt();
        bound1.push(3);
        this.solver.findModel(bound1);
        VecInt bound2 = new VecInt();
        bound2.push((-3));
        this.solver.findModel(bound2);
        VecInt bound3 = new VecInt();
        bound3.push(5);
        bound3.push(3);
        this.solver.findModel(bound3);
        VecInt bound4 = new VecInt();
        bound4.push(5);
        bound4.push((-3));
        this.solver.findModel(bound4);
        VecInt bound5 = new VecInt();
        bound5.push(4);
        bound5.push((-3));
        this.solver.findModel(bound5);
        VecInt bound6 = new VecInt();
        bound6.push(4);
        bound6.push(3);
        this.solver.findModel(bound6);
        VecInt bound7 = new VecInt();
        bound7.push(4);
        int[] model = this.solver.findModel(bound7);
        Set<Integer> satisfiedModel = new HashSet<Integer>();
        for (int i : model) {
            satisfiedModel.add(new Integer(i));
        }
        satisfiedModel.contains(new Integer(4));
        satisfiedModel.contains(new Integer(1));
        satisfiedModel.contains(new Integer(2));
    }

    @Test(timeout = 30000)
    public void testSimplePhoneSATSmall_remove5_remove386_remove2958() throws Exception, ContradictionException, TimeoutException {
        VecInt clause0 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause0)).toString());
        Assert.assertTrue(((VecInt) (clause0)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__4 = clause0.push(1);
        Assert.assertEquals("1", ((VecInt) (o_testSimplePhoneSATSmall_remove5__4)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__4)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__4)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove5__5 = this.solver.addClause(clause0);
        Assert.assertTrue(((UnitClause) (o_testSimplePhoneSATSmall_remove5__5)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((UnitClause) (o_testSimplePhoneSATSmall_remove5__5)).getActivity())), 0.1);
        Assert.assertEquals("1", ((UnitClause) (o_testSimplePhoneSATSmall_remove5__5)).toString());
        VecInt clause1 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause1)).toString());
        Assert.assertTrue(((VecInt) (clause1)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__9 = clause1.push(1);
        Assert.assertEquals("1", ((VecInt) (o_testSimplePhoneSATSmall_remove5__9)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__9)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__9)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__10 = clause1.push((-2));
        Assert.assertEquals("1,-2", ((VecInt) (o_testSimplePhoneSATSmall_remove5__10)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__10)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__10)).isEmpty());
        VecInt clause2 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause2)).toString());
        Assert.assertTrue(((VecInt) (clause2)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__14 = clause2.push(2);
        Assert.assertEquals("2", ((VecInt) (o_testSimplePhoneSATSmall_remove5__14)).toString());
        Assert.assertEquals(2, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__14)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__14)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__15 = clause2.push((-1));
        Assert.assertEquals("2,-1", ((VecInt) (o_testSimplePhoneSATSmall_remove5__15)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__15)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__15)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove5__17 = this.solver.addClause(clause2);
        Assert.assertTrue(((UnitClause) (o_testSimplePhoneSATSmall_remove5__17)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((UnitClause) (o_testSimplePhoneSATSmall_remove5__17)).getActivity())), 0.1);
        Assert.assertEquals("2", ((UnitClause) (o_testSimplePhoneSATSmall_remove5__17)).toString());
        VecInt clause3 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause3)).toString());
        Assert.assertTrue(((VecInt) (clause3)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__21 = clause3.push(3);
        Assert.assertEquals("3", ((VecInt) (o_testSimplePhoneSATSmall_remove5__21)).toString());
        Assert.assertEquals(3, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__21)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__21)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__22 = clause3.push((-2));
        Assert.assertEquals("3,-2", ((VecInt) (o_testSimplePhoneSATSmall_remove5__22)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__22)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__22)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove5__24 = this.solver.addClause(clause3);
        Assert.assertTrue(((UnitClause) (o_testSimplePhoneSATSmall_remove5__24)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((UnitClause) (o_testSimplePhoneSATSmall_remove5__24)).getActivity())), 0.1);
        Assert.assertEquals("3", ((UnitClause) (o_testSimplePhoneSATSmall_remove5__24)).toString());
        VecInt clause8 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause8)).toString());
        Assert.assertTrue(((VecInt) (clause8)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__27 = clause8.push(2);
        Assert.assertEquals("2", ((VecInt) (o_testSimplePhoneSATSmall_remove5__27)).toString());
        Assert.assertEquals(2, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__27)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__27)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__28 = clause8.push((-3));
        Assert.assertEquals("2,-3", ((VecInt) (o_testSimplePhoneSATSmall_remove5__28)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__28)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__28)).isEmpty());
        this.solver.addClause(clause8);
        VecInt clause4 = new VecInt();
        clause4.push((-4));
        clause4.push(1);
        this.solver.addClause(clause4);
        VecInt clause5 = new VecInt();
        clause5.push(4);
        this.solver.addClause(clause5);
        VecInt clause6 = new VecInt();
        clause6.push((-6));
        clause6.push(4);
        this.solver.addClause(clause6);
        VecInt clause7 = new VecInt();
        clause7.push(5);
        clause7.push(6);
        clause7.push((-4));
        this.solver.addAtLeast(clause6, 1);
        this.solver.isSatisfiable();
        VecInt bound1 = new VecInt();
        bound1.push(3);
        this.solver.findModel(bound1);
        VecInt bound2 = new VecInt();
        bound2.push((-3));
        this.solver.findModel(bound2);
        VecInt bound3 = new VecInt();
        bound3.push(5);
        bound3.push(3);
        this.solver.findModel(bound3);
        VecInt bound4 = new VecInt();
        bound4.push((-3));
        this.solver.findModel(bound4);
        VecInt bound5 = new VecInt();
        bound5.push(4);
        bound5.push((-3));
        this.solver.findModel(bound5);
        VecInt bound6 = new VecInt();
        bound6.push(4);
        bound6.push(3);
        this.solver.findModel(bound6);
        VecInt bound7 = new VecInt();
        bound7.push(4);
        int[] model = this.solver.findModel(bound7);
        Set<Integer> satisfiedModel = new HashSet<Integer>();
        for (int i : model) {
            satisfiedModel.add(new Integer(i));
        }
        satisfiedModel.contains(new Integer(4));
        satisfiedModel.contains(new Integer(1));
        satisfiedModel.contains(new Integer(2));
    }

    @Test(timeout = 30000)
    public void testSimplePhoneSATSmall_remove5_remove386_remove2965() throws Exception, ContradictionException, TimeoutException {
        VecInt clause0 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause0)).toString());
        Assert.assertTrue(((VecInt) (clause0)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__4 = clause0.push(1);
        Assert.assertEquals("1", ((VecInt) (o_testSimplePhoneSATSmall_remove5__4)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__4)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__4)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove5__5 = this.solver.addClause(clause0);
        Assert.assertTrue(((UnitClause) (o_testSimplePhoneSATSmall_remove5__5)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((UnitClause) (o_testSimplePhoneSATSmall_remove5__5)).getActivity())), 0.1);
        Assert.assertEquals("1", ((UnitClause) (o_testSimplePhoneSATSmall_remove5__5)).toString());
        VecInt clause1 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause1)).toString());
        Assert.assertTrue(((VecInt) (clause1)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__9 = clause1.push(1);
        Assert.assertEquals("1", ((VecInt) (o_testSimplePhoneSATSmall_remove5__9)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__9)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__9)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__10 = clause1.push((-2));
        Assert.assertEquals("1,-2", ((VecInt) (o_testSimplePhoneSATSmall_remove5__10)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__10)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__10)).isEmpty());
        VecInt clause2 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause2)).toString());
        Assert.assertTrue(((VecInt) (clause2)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__14 = clause2.push(2);
        Assert.assertEquals("2", ((VecInt) (o_testSimplePhoneSATSmall_remove5__14)).toString());
        Assert.assertEquals(2, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__14)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__14)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__15 = clause2.push((-1));
        Assert.assertEquals("2,-1", ((VecInt) (o_testSimplePhoneSATSmall_remove5__15)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__15)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__15)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove5__17 = this.solver.addClause(clause2);
        Assert.assertTrue(((UnitClause) (o_testSimplePhoneSATSmall_remove5__17)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((UnitClause) (o_testSimplePhoneSATSmall_remove5__17)).getActivity())), 0.1);
        Assert.assertEquals("2", ((UnitClause) (o_testSimplePhoneSATSmall_remove5__17)).toString());
        VecInt clause3 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause3)).toString());
        Assert.assertTrue(((VecInt) (clause3)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__21 = clause3.push(3);
        Assert.assertEquals("3", ((VecInt) (o_testSimplePhoneSATSmall_remove5__21)).toString());
        Assert.assertEquals(3, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__21)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__21)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__22 = clause3.push((-2));
        Assert.assertEquals("3,-2", ((VecInt) (o_testSimplePhoneSATSmall_remove5__22)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__22)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__22)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove5__24 = this.solver.addClause(clause3);
        Assert.assertTrue(((UnitClause) (o_testSimplePhoneSATSmall_remove5__24)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((UnitClause) (o_testSimplePhoneSATSmall_remove5__24)).getActivity())), 0.1);
        Assert.assertEquals("3", ((UnitClause) (o_testSimplePhoneSATSmall_remove5__24)).toString());
        VecInt clause8 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause8)).toString());
        Assert.assertTrue(((VecInt) (clause8)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__27 = clause8.push(2);
        Assert.assertEquals("2", ((VecInt) (o_testSimplePhoneSATSmall_remove5__27)).toString());
        Assert.assertEquals(2, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__27)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__27)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__28 = clause8.push((-3));
        Assert.assertEquals("2,-3", ((VecInt) (o_testSimplePhoneSATSmall_remove5__28)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__28)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__28)).isEmpty());
        this.solver.addClause(clause8);
        VecInt clause4 = new VecInt();
        clause4.push((-4));
        clause4.push(1);
        this.solver.addClause(clause4);
        VecInt clause5 = new VecInt();
        clause5.push((-5));
        clause5.push(4);
        this.solver.addClause(clause5);
        VecInt clause6 = new VecInt();
        clause6.push(4);
        this.solver.addClause(clause6);
        VecInt clause7 = new VecInt();
        clause7.push(5);
        clause7.push(6);
        clause7.push((-4));
        this.solver.addAtLeast(clause6, 1);
        this.solver.isSatisfiable();
        VecInt bound1 = new VecInt();
        bound1.push(3);
        this.solver.findModel(bound1);
        VecInt bound2 = new VecInt();
        bound2.push((-3));
        this.solver.findModel(bound2);
        VecInt bound3 = new VecInt();
        bound3.push(5);
        bound3.push(3);
        this.solver.findModel(bound3);
        VecInt bound4 = new VecInt();
        bound4.push((-3));
        this.solver.findModel(bound4);
        VecInt bound5 = new VecInt();
        bound5.push(4);
        bound5.push((-3));
        this.solver.findModel(bound5);
        VecInt bound6 = new VecInt();
        bound6.push(4);
        bound6.push(3);
        this.solver.findModel(bound6);
        VecInt bound7 = new VecInt();
        bound7.push(4);
        int[] model = this.solver.findModel(bound7);
        Set<Integer> satisfiedModel = new HashSet<Integer>();
        for (int i : model) {
            satisfiedModel.add(new Integer(i));
        }
        satisfiedModel.contains(new Integer(4));
        satisfiedModel.contains(new Integer(1));
        satisfiedModel.contains(new Integer(2));
    }

    @Test(timeout = 30000)
    public void testSimplePhoneSATSmall_remove5_remove330_remove2889() throws Exception, ContradictionException, TimeoutException {
        VecInt clause0 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause0)).toString());
        Assert.assertTrue(((VecInt) (clause0)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__4 = clause0.push(1);
        Assert.assertEquals("1", ((VecInt) (o_testSimplePhoneSATSmall_remove5__4)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__4)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__4)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove5__5 = this.solver.addClause(clause0);
        Assert.assertTrue(((UnitClause) (o_testSimplePhoneSATSmall_remove5__5)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((UnitClause) (o_testSimplePhoneSATSmall_remove5__5)).getActivity())), 0.1);
        Assert.assertEquals("1", ((UnitClause) (o_testSimplePhoneSATSmall_remove5__5)).toString());
        VecInt clause1 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause1)).toString());
        Assert.assertTrue(((VecInt) (clause1)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__9 = clause1.push(1);
        Assert.assertEquals("1", ((VecInt) (o_testSimplePhoneSATSmall_remove5__9)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__9)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__9)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__10 = clause1.push((-2));
        Assert.assertEquals("1,-2", ((VecInt) (o_testSimplePhoneSATSmall_remove5__10)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__10)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__10)).isEmpty());
        VecInt clause2 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause2)).toString());
        Assert.assertTrue(((VecInt) (clause2)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__14 = clause2.push(2);
        Assert.assertEquals("2", ((VecInt) (o_testSimplePhoneSATSmall_remove5__14)).toString());
        Assert.assertEquals(2, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__14)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__14)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__15 = clause2.push((-1));
        Assert.assertEquals("2,-1", ((VecInt) (o_testSimplePhoneSATSmall_remove5__15)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__15)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__15)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove5__17 = this.solver.addClause(clause2);
        Assert.assertTrue(((UnitClause) (o_testSimplePhoneSATSmall_remove5__17)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((UnitClause) (o_testSimplePhoneSATSmall_remove5__17)).getActivity())), 0.1);
        Assert.assertEquals("2", ((UnitClause) (o_testSimplePhoneSATSmall_remove5__17)).toString());
        VecInt clause3 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause3)).toString());
        Assert.assertTrue(((VecInt) (clause3)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__21 = clause3.push(3);
        Assert.assertEquals("3", ((VecInt) (o_testSimplePhoneSATSmall_remove5__21)).toString());
        Assert.assertEquals(3, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__21)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__21)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__22 = clause3.push((-2));
        Assert.assertEquals("3,-2", ((VecInt) (o_testSimplePhoneSATSmall_remove5__22)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__22)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__22)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove5__24 = this.solver.addClause(clause3);
        Assert.assertTrue(((UnitClause) (o_testSimplePhoneSATSmall_remove5__24)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((UnitClause) (o_testSimplePhoneSATSmall_remove5__24)).getActivity())), 0.1);
        Assert.assertEquals("3", ((UnitClause) (o_testSimplePhoneSATSmall_remove5__24)).toString());
        VecInt clause8 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause8)).toString());
        Assert.assertTrue(((VecInt) (clause8)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__27 = clause8.push(2);
        Assert.assertEquals("2", ((VecInt) (o_testSimplePhoneSATSmall_remove5__27)).toString());
        Assert.assertEquals(2, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__27)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__27)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__28 = clause8.push((-3));
        Assert.assertEquals("2,-3", ((VecInt) (o_testSimplePhoneSATSmall_remove5__28)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__28)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__28)).isEmpty());
        this.solver.addClause(clause8);
        VecInt clause4 = new VecInt();
        clause4.push((-4));
        clause4.push(1);
        this.solver.addClause(clause4);
        VecInt clause5 = new VecInt();
        clause5.push((-5));
        clause5.push(4);
        this.solver.addClause(clause5);
        VecInt clause6 = new VecInt();
        clause6.push(4);
        this.solver.addClause(clause6);
        VecInt clause7 = new VecInt();
        clause7.push(5);
        clause7.push(6);
        clause7.push((-4));
        this.solver.addAtLeast(clause6, 1);
        this.solver.isSatisfiable();
        VecInt bound1 = new VecInt();
        this.solver.findModel(bound1);
        VecInt bound2 = new VecInt();
        bound2.push((-3));
        this.solver.findModel(bound2);
        VecInt bound3 = new VecInt();
        bound3.push(5);
        bound3.push(3);
        this.solver.findModel(bound3);
        VecInt bound4 = new VecInt();
        bound4.push(5);
        bound4.push((-3));
        this.solver.findModel(bound4);
        VecInt bound5 = new VecInt();
        bound5.push(4);
        bound5.push((-3));
        this.solver.findModel(bound5);
        VecInt bound6 = new VecInt();
        bound6.push(4);
        bound6.push(3);
        this.solver.findModel(bound6);
        VecInt bound7 = new VecInt();
        bound7.push(4);
        int[] model = this.solver.findModel(bound7);
        Set<Integer> satisfiedModel = new HashSet<Integer>();
        for (int i : model) {
            satisfiedModel.add(new Integer(i));
        }
        satisfiedModel.contains(new Integer(4));
        satisfiedModel.contains(new Integer(1));
        satisfiedModel.contains(new Integer(2));
    }

    @Test(timeout = 30000)
    public void testSimplePhoneSATSmall_remove5_remove373_remove2547() throws Exception, ContradictionException, TimeoutException {
        VecInt clause0 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause0)).toString());
        Assert.assertTrue(((VecInt) (clause0)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__4 = clause0.push(1);
        Assert.assertEquals("1", ((VecInt) (o_testSimplePhoneSATSmall_remove5__4)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__4)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__4)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove5__5 = this.solver.addClause(clause0);
        Assert.assertTrue(((UnitClause) (o_testSimplePhoneSATSmall_remove5__5)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((UnitClause) (o_testSimplePhoneSATSmall_remove5__5)).getActivity())), 0.1);
        Assert.assertEquals("1", ((UnitClause) (o_testSimplePhoneSATSmall_remove5__5)).toString());
        VecInt clause1 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause1)).toString());
        Assert.assertTrue(((VecInt) (clause1)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__9 = clause1.push(1);
        Assert.assertEquals("1", ((VecInt) (o_testSimplePhoneSATSmall_remove5__9)).toString());
        Assert.assertEquals(1, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__9)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__9)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__10 = clause1.push((-2));
        Assert.assertEquals("1,-2", ((VecInt) (o_testSimplePhoneSATSmall_remove5__10)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__10)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__10)).isEmpty());
        VecInt clause2 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause2)).toString());
        Assert.assertTrue(((VecInt) (clause2)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__14 = clause2.push(2);
        Assert.assertEquals("2", ((VecInt) (o_testSimplePhoneSATSmall_remove5__14)).toString());
        Assert.assertEquals(2, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__14)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__14)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__15 = clause2.push((-1));
        Assert.assertEquals("2,-1", ((VecInt) (o_testSimplePhoneSATSmall_remove5__15)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__15)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__15)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove5__17 = this.solver.addClause(clause2);
        Assert.assertTrue(((UnitClause) (o_testSimplePhoneSATSmall_remove5__17)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((UnitClause) (o_testSimplePhoneSATSmall_remove5__17)).getActivity())), 0.1);
        Assert.assertEquals("2", ((UnitClause) (o_testSimplePhoneSATSmall_remove5__17)).toString());
        VecInt clause3 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause3)).toString());
        Assert.assertTrue(((VecInt) (clause3)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__21 = clause3.push(3);
        Assert.assertEquals("3", ((VecInt) (o_testSimplePhoneSATSmall_remove5__21)).toString());
        Assert.assertEquals(3, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__21)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__21)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__22 = clause3.push((-2));
        Assert.assertEquals("3,-2", ((VecInt) (o_testSimplePhoneSATSmall_remove5__22)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__22)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__22)).isEmpty());
        IConstr o_testSimplePhoneSATSmall_remove5__24 = this.solver.addClause(clause3);
        Assert.assertTrue(((UnitClause) (o_testSimplePhoneSATSmall_remove5__24)).isSatisfied());
        Assert.assertEquals(0.0, ((double) (((UnitClause) (o_testSimplePhoneSATSmall_remove5__24)).getActivity())), 0.1);
        Assert.assertEquals("3", ((UnitClause) (o_testSimplePhoneSATSmall_remove5__24)).toString());
        VecInt clause8 = new VecInt();
        Assert.assertEquals("", ((VecInt) (clause8)).toString());
        Assert.assertTrue(((VecInt) (clause8)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__27 = clause8.push(2);
        Assert.assertEquals("2", ((VecInt) (o_testSimplePhoneSATSmall_remove5__27)).toString());
        Assert.assertEquals(2, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__27)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__27)).isEmpty());
        IVecInt o_testSimplePhoneSATSmall_remove5__28 = clause8.push((-3));
        Assert.assertEquals("2,-3", ((VecInt) (o_testSimplePhoneSATSmall_remove5__28)).toString());
        Assert.assertEquals(0, ((int) (((VecInt) (o_testSimplePhoneSATSmall_remove5__28)).hashCode())));
        Assert.assertFalse(((VecInt) (o_testSimplePhoneSATSmall_remove5__28)).isEmpty());
        this.solver.addClause(clause8);
        VecInt clause4 = new VecInt();
        clause4.push((-4));
        clause4.push(1);
        this.solver.addClause(clause4);
        VecInt clause5 = new VecInt();
        clause5.push((-5));
        clause5.push(4);
        this.solver.addClause(clause5);
        VecInt clause6 = new VecInt();
        clause6.push((-6));
        clause6.push(4);
        this.solver.addClause(clause6);
        VecInt clause7 = new VecInt();
        clause7.push(6);
        clause7.push((-4));
        this.solver.addAtLeast(clause6, 1);
        this.solver.isSatisfiable();
        VecInt bound1 = new VecInt();
        bound1.push(3);
        this.solver.findModel(bound1);
        VecInt bound2 = new VecInt();
        this.solver.findModel(bound2);
        VecInt bound3 = new VecInt();
        bound3.push(5);
        bound3.push(3);
        this.solver.findModel(bound3);
        VecInt bound4 = new VecInt();
        bound4.push(5);
        bound4.push((-3));
        this.solver.findModel(bound4);
        VecInt bound5 = new VecInt();
        bound5.push(4);
        bound5.push((-3));
        this.solver.findModel(bound5);
        VecInt bound6 = new VecInt();
        bound6.push(4);
        bound6.push(3);
        this.solver.findModel(bound6);
        VecInt bound7 = new VecInt();
        bound7.push(4);
        int[] model = this.solver.findModel(bound7);
        Set<Integer> satisfiedModel = new HashSet<Integer>();
        for (int i : model) {
            satisfiedModel.add(new Integer(i));
        }
        satisfiedModel.contains(new Integer(4));
        satisfiedModel.contains(new Integer(1));
        satisfiedModel.contains(new Integer(2));
    }

    @Test(timeout = 30000)
    public void testSimplePhoneSATSmall_remove5_remove378_remove3086_failAssert12() throws Exception, ContradictionException, TimeoutException {
        try {
            VecInt clause0 = new VecInt();
            IVecInt o_testSimplePhoneSATSmall_remove5__4 = clause0.push(1);
            IConstr o_testSimplePhoneSATSmall_remove5__5 = this.solver.addClause(clause0);
            VecInt clause1 = new VecInt();
            IVecInt o_testSimplePhoneSATSmall_remove5__9 = clause1.push(1);
            IVecInt o_testSimplePhoneSATSmall_remove5__10 = clause1.push((-2));
            VecInt clause2 = new VecInt();
            IVecInt o_testSimplePhoneSATSmall_remove5__14 = clause2.push(2);
            IVecInt o_testSimplePhoneSATSmall_remove5__15 = clause2.push((-1));
            IConstr o_testSimplePhoneSATSmall_remove5__17 = this.solver.addClause(clause2);
            VecInt clause3 = new VecInt();
            IVecInt o_testSimplePhoneSATSmall_remove5__21 = clause3.push(3);
            IVecInt o_testSimplePhoneSATSmall_remove5__22 = clause3.push((-2));
            IConstr o_testSimplePhoneSATSmall_remove5__24 = this.solver.addClause(clause3);
            VecInt clause8 = new VecInt();
            IVecInt o_testSimplePhoneSATSmall_remove5__27 = clause8.push(2);
            IVecInt o_testSimplePhoneSATSmall_remove5__28 = clause8.push((-3));
            this.solver.addClause(clause8);
            VecInt clause4 = new VecInt();
            clause4.push((-4));
            this.solver.addClause(clause4);
            VecInt clause5 = new VecInt();
            clause5.push((-5));
            clause5.push(4);
            this.solver.addClause(clause5);
            VecInt clause6 = new VecInt();
            clause6.push((-6));
            clause6.push(4);
            this.solver.addClause(clause6);
            VecInt clause7 = new VecInt();
            clause7.push(5);
            clause7.push(6);
            clause7.push((-4));
            this.solver.addAtLeast(clause6, 1);
            this.solver.isSatisfiable();
            VecInt bound1 = new VecInt();
            bound1.push(3);
            this.solver.findModel(bound1);
            VecInt bound2 = new VecInt();
            bound2.push((-3));
            this.solver.findModel(bound2);
            VecInt bound3 = new VecInt();
            bound3.push(5);
            this.solver.findModel(bound3);
            VecInt bound4 = new VecInt();
            bound4.push(5);
            bound4.push((-3));
            this.solver.findModel(bound4);
            VecInt bound5 = new VecInt();
            bound5.push(4);
            bound5.push((-3));
            this.solver.findModel(bound5);
            VecInt bound6 = new VecInt();
            bound6.push(4);
            bound6.push(3);
            this.solver.findModel(bound6);
            VecInt bound7 = new VecInt();
            bound7.push(4);
            int[] model = this.solver.findModel(bound7);
            Set<Integer> satisfiedModel = new HashSet<Integer>();
            for (int i : model) {
                satisfiedModel.add(new Integer(i));
            }
            satisfiedModel.contains(new Integer(4));
            satisfiedModel.contains(new Integer(1));
            satisfiedModel.contains(new Integer(2));
            org.junit.Assert.fail("testSimplePhoneSATSmall_remove5_remove378_remove3086 should have thrown NullPointerException");
        } catch (NullPointerException expected) {
            Assert.assertEquals(null, expected.getMessage());
        }
    }

    @Test(timeout = 30000)
    public void testSimplePhoneSATSmall_remove5_remove321_remove2325_failAssert17() throws Exception, ContradictionException, TimeoutException {
        try {
            VecInt clause0 = new VecInt();
            IVecInt o_testSimplePhoneSATSmall_remove5__4 = clause0.push(1);
            IConstr o_testSimplePhoneSATSmall_remove5__5 = this.solver.addClause(clause0);
            VecInt clause1 = new VecInt();
            IVecInt o_testSimplePhoneSATSmall_remove5__9 = clause1.push(1);
            IVecInt o_testSimplePhoneSATSmall_remove5__10 = clause1.push((-2));
            VecInt clause2 = new VecInt();
            IVecInt o_testSimplePhoneSATSmall_remove5__14 = clause2.push(2);
            IVecInt o_testSimplePhoneSATSmall_remove5__15 = clause2.push((-1));
            IConstr o_testSimplePhoneSATSmall_remove5__17 = this.solver.addClause(clause2);
            VecInt clause3 = new VecInt();
            IVecInt o_testSimplePhoneSATSmall_remove5__21 = clause3.push(3);
            IVecInt o_testSimplePhoneSATSmall_remove5__22 = clause3.push((-2));
            IConstr o_testSimplePhoneSATSmall_remove5__24 = this.solver.addClause(clause3);
            VecInt clause8 = new VecInt();
            IVecInt o_testSimplePhoneSATSmall_remove5__27 = clause8.push(2);
            IVecInt o_testSimplePhoneSATSmall_remove5__28 = clause8.push((-3));
            this.solver.addClause(clause8);
            VecInt clause4 = new VecInt();
            clause4.push((-4));
            this.solver.addClause(clause4);
            VecInt clause5 = new VecInt();
            clause5.push((-5));
            this.solver.addClause(clause5);
            VecInt clause6 = new VecInt();
            clause6.push((-6));
            clause6.push(4);
            this.solver.addClause(clause6);
            VecInt clause7 = new VecInt();
            clause7.push(5);
            clause7.push(6);
            clause7.push((-4));
            this.solver.addAtLeast(clause6, 1);
            this.solver.isSatisfiable();
            VecInt bound1 = new VecInt();
            bound1.push(3);
            this.solver.findModel(bound1);
            VecInt bound2 = new VecInt();
            bound2.push((-3));
            this.solver.findModel(bound2);
            VecInt bound3 = new VecInt();
            bound3.push(5);
            bound3.push(3);
            this.solver.findModel(bound3);
            VecInt bound4 = new VecInt();
            bound4.push(5);
            bound4.push((-3));
            this.solver.findModel(bound4);
            VecInt bound5 = new VecInt();
            bound5.push(4);
            bound5.push((-3));
            this.solver.findModel(bound5);
            VecInt bound6 = new VecInt();
            bound6.push(4);
            bound6.push(3);
            this.solver.findModel(bound6);
            VecInt bound7 = new VecInt();
            bound7.push(4);
            int[] model = this.solver.findModel(bound7);
            Set<Integer> satisfiedModel = new HashSet<Integer>();
            for (int i : model) {
                satisfiedModel.add(new Integer(i));
            }
            satisfiedModel.contains(new Integer(4));
            satisfiedModel.contains(new Integer(1));
            satisfiedModel.contains(new Integer(2));
            org.junit.Assert.fail("testSimplePhoneSATSmall_remove5_remove321_remove2325 should have thrown NullPointerException");
        } catch (NullPointerException expected) {
            Assert.assertEquals(null, expected.getMessage());
        }
    }
}

